(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.onflowSdk = {}));
})(this, (function (exports) { 'use strict';

	var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
	let promise$1;
	var queueMicrotask_1$1 = typeof queueMicrotask === 'function' ? queueMicrotask.bind(typeof window !== 'undefined' ? window : commonjsGlobal$1)
	// reuse resolved promise, and allocate it lazily
	: cb => (promise$1 || (promise$1 = Promise.resolve())).then(cb).catch(err => setTimeout(() => {
	  throw err;
	}, 0));

	const mailbox$1 = () => {
	  const queue = [];
	  var next;
	  return {
	    async deliver(msg) {
	      queue.push(msg);
	      if (next) {
	        next(queue.shift());
	        next = undefined;
	      }
	    },
	    receive() {
	      return new Promise(function innerReceive(resolve) {
	        const msg = queue.shift();
	        if (msg) return resolve(msg);
	        next = resolve;
	      });
	    }
	  };
	};
	const INIT$1 = "INIT";
	const SUBSCRIBE$1 = "SUBSCRIBE";
	const UNSUBSCRIBE$1 = "UNSUBSCRIBE";
	const UPDATED$4 = "UPDATED";
	const EXIT$1 = "EXIT";
	const TERMINATE$1 = "TERMINATE";
	const root$1 = typeof self === "object" && self.self === self && self || typeof global === "object" && global.global === global && global || typeof window === "object" && window.window === window && window;
	root$1.FCL_REGISTRY = root$1.FCL_REGISTRY == null ? {} : root$1.FCL_REGISTRY;
	var pid$1 = 0b0;
	const DEFAULT_TIMEOUT$1 = 5000;
	const send$3 = function (addr, tag, data) {
	  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	  return new Promise((reply, reject) => {
	    const expectReply = opts.expectReply || false;
	    const timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT$1;
	    if (expectReply && timeout) {
	      setTimeout(() => reject(new Error(`Timeout: ${timeout}ms passed without a response.`)), timeout);
	    }
	    const payload = {
	      to: addr,
	      from: opts.from,
	      tag,
	      data,
	      timeout,
	      reply,
	      reject
	    };
	    try {
	      root$1.FCL_REGISTRY[addr] && root$1.FCL_REGISTRY[addr].mailbox.deliver(payload);
	      if (!expectReply) reply(true);
	    } catch (error) {
	      console.error("FCL.Actor -- Could Not Deliver Message", payload, root$1.FCL_REGISTRY[addr], error);
	    }
	  });
	};
	const kill$1 = addr => {
	  delete root$1.FCL_REGISTRY[addr];
	};
	const fromHandlers$1 = function () {
	  let handlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  return async ctx => {
	    if (typeof handlers[INIT$1] === "function") await handlers[INIT$1](ctx);
	    __loop: while (1) {
	      const letter = await ctx.receive();
	      try {
	        if (letter.tag === EXIT$1) {
	          if (typeof handlers[TERMINATE$1] === "function") {
	            await handlers[TERMINATE$1](ctx, letter, letter.data || {});
	          }
	          break __loop;
	        }
	        await handlers[letter.tag](ctx, letter, letter.data || {});
	      } catch (error) {
	        console.error(`${ctx.self()} Error`, letter, error);
	      } finally {
	        continue __loop;
	      }
	    }
	  };
	};
	const spawn$1 = function (fn) {
	  let addr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	  if (addr == null) addr = ++pid$1;
	  if (root$1.FCL_REGISTRY[addr] != null) return addr;
	  root$1.FCL_REGISTRY[addr] = {
	    addr,
	    mailbox: mailbox$1(),
	    subs: new Set(),
	    kvs: {},
	    error: null
	  };
	  const ctx = {
	    self: () => addr,
	    receive: () => root$1.FCL_REGISTRY[addr].mailbox.receive(),
	    send: function (to, tag, data) {
	      let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	      opts.from = addr;
	      return send$3(to, tag, data, opts);
	    },
	    sendSelf: (tag, data, opts) => {
	      if (root$1.FCL_REGISTRY[addr]) send$3(addr, tag, data, opts);
	    },
	    broadcast: function (tag, data) {
	      let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      opts.from = addr;
	      for (let to of root$1.FCL_REGISTRY[addr].subs) send$3(to, tag, data, opts);
	    },
	    subscribe: sub => sub != null && root$1.FCL_REGISTRY[addr].subs.add(sub),
	    unsubscribe: sub => sub != null && root$1.FCL_REGISTRY[addr].subs.delete(sub),
	    subscriberCount: () => root$1.FCL_REGISTRY[addr].subs.size,
	    hasSubs: () => !!root$1.FCL_REGISTRY[addr].subs.size,
	    put: (key, value) => {
	      if (key != null) root$1.FCL_REGISTRY[addr].kvs[key] = value;
	    },
	    get: (key, fallback) => {
	      const value = root$1.FCL_REGISTRY[addr].kvs[key];
	      return value == null ? fallback : value;
	    },
	    delete: key => {
	      delete root$1.FCL_REGISTRY[addr].kvs[key];
	    },
	    update: (key, fn) => {
	      if (key != null) root$1.FCL_REGISTRY[addr].kvs[key] = fn(root$1.FCL_REGISTRY[addr].kvs[key]);
	    },
	    keys: () => {
	      return Object.keys(root$1.FCL_REGISTRY[addr].kvs);
	    },
	    all: () => {
	      return root$1.FCL_REGISTRY[addr].kvs;
	    },
	    where: pattern => {
	      return Object.keys(root$1.FCL_REGISTRY[addr].kvs).reduce((acc, key) => {
	        return pattern.test(key) ? {
	          ...acc,
	          [key]: root$1.FCL_REGISTRY[addr].kvs[key]
	        } : acc;
	      }, {});
	    },
	    merge: function () {
	      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      Object.keys(data).forEach(key => root$1.FCL_REGISTRY[addr].kvs[key] = data[key]);
	    },
	    fatalError: error => {
	      root$1.FCL_REGISTRY[addr].error = error;
	      for (let to of root$1.FCL_REGISTRY[addr].subs) send$3(to, UPDATED$4);
	    }
	  };
	  if (typeof fn === "object") fn = fromHandlers$1(fn);
	  queueMicrotask_1$1(async () => {
	    await fn(ctx);
	    kill$1(addr);
	  });
	  return addr;
	};

	// Returns an unsubscribe function
	// A SUBSCRIBE handler will need to be created to handle the subscription event
	//
	//  [SUBSCRIBE]: (ctx, letter) => {
	//    ctx.subscribe(letter.from)
	//    ctx.send(letter.from, UPDATED, ctx.all())
	//  }
	//
	function subscriber$1(address, spawnFn, callback) {
	  spawnFn(address);
	  const EXIT = "@EXIT";
	  const self = spawn$1(async ctx => {
	    ctx.send(address, SUBSCRIBE$1);
	    while (1) {
	      const letter = await ctx.receive();
	      const error = root$1.FCL_REGISTRY[address].error;
	      if (letter.tag === EXIT) {
	        ctx.send(address, UNSUBSCRIBE$1);
	        return;
	      }
	      if (error) {
	        callback(null, error);
	        ctx.send(address, UNSUBSCRIBE$1);
	        return;
	      }
	      callback(letter.data, null);
	    }
	  });
	  return () => send$3(self, EXIT);
	}

	/**
	 * Asserts fact is true, otherwise throw an error with invariant message
	 * @param {boolean} fact
	 * @param {string} msg
	 * @param {Array} rest
	 * @returns {void}
	 */
	function invariant$1$1(fact, msg) {
	  if (!fact) {
	    const error = new Error(`INVARIANT ${msg}`);
	    error.stack = error.stack.split("\n").filter(d => !/at invariant/.test(d)).join("\n");
	    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      rest[_key - 2] = arguments[_key];
	    }
	    console.error("\n\n---\n\n", error, "\n\n", ...rest, "\n\n---\n\n");
	    throw error;
	  }
	}
	const pipe$1$1 = function () {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	  return v => {
	    return funcs.reduce((res, func) => {
	      return func(res);
	    }, v);
	  };
	};

	/***
	 * Merge multiple functions returning objects into one object.
	 * @param {...function(*): object} funcs - Functions to merge
	 * @return {object} - Merged object
	 */
	const mergePipe$1$1 = function () {
	  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    funcs[_key2] = arguments[_key2];
	  }
	  return v => {
	    return funcs.reduce((res, func) => {
	      return {
	        ...res,
	        ...func(v)
	      };
	    }, {});
	  };
	};

	/**
	 * @description Object check
	 * @param {*} value - Value to check
	 * @returns {boolean} - Is object status
	 */
	const isObject$1$1 = value => value && typeof value === "object" && !Array.isArray(value);

	/**
	 * @description Deep merge multiple objects.
	 * @param {object} target - Target object
	 * @param {...object[]} sources - Source objects
	 * @returns {object} - Merged object
	 */
	const mergeDeep$1$1 = function (target) {
	  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	    sources[_key3 - 1] = arguments[_key3];
	  }
	  if (!sources.length) return target;
	  const source = sources.shift();
	  if (isObject$1$1(target) && isObject$1$1(source)) {
	    for (const key in source) {
	      if (isObject$1$1(source[key])) {
	        if (!target[key]) Object.assign(target, {
	          [key]: {}
	        });
	        mergeDeep$1$1(target[key], source[key]);
	      } else {
	        Object.assign(target, {
	          [key]: source[key]
	        });
	      }
	    }
	  }
	  return mergeDeep$1$1(target, ...sources);
	};

	/**
	 * @description Deep merge multiple Flow JSON.
	 * @param {object|object[]} value - Flow JSON or array of Flow JSONs
	 * @returns {object} - Merged Flow JSON
	 */
	const mergeFlowJSONs$1$1 = value => Array.isArray(value) ? mergeDeep$1$1({}, ...value) : value;

	/**
	 * @description Filter out contracts section of flow.json.
	 * @param {object|object[]} obj - Flow JSON or array of Flow JSONs
	 * @returns {object} - Contracts section of Flow JSON
	 */
	const filterContracts$1$1 = obj => obj.contracts ? obj.contracts : {};

	/**
	 * @description Gathers contract addresses by network
	 * @param {string} network - Network to gather addresses for
	 * @returns {object} - Contract names by addresses mapping e.g { "HelloWorld": "0x123" }
	 */
	const mapContractAliasesToNetworkAddress$1$1 = network => contracts => {
	  return Object.entries(contracts).reduce((c, _ref) => {
	    let [key, value] = _ref;
	    const networkContractAlias = value?.aliases?.[network];
	    if (networkContractAlias) {
	      c[key] = networkContractAlias;
	    }
	    return c;
	  }, {});
	};
	const mapDeploymentsToNetworkAddress$1$1 = network => _ref2 => {
	  let {
	    deployments = {},
	    accounts = {}
	  } = _ref2;
	  const networkDeployment = deployments?.[network];
	  if (!networkDeployment) return {};
	  return Object.entries(networkDeployment).reduce((c, _ref3) => {
	    let [key, value] = _ref3;
	    // Resolve account address
	    const accountAddress = accounts[key]?.address;
	    if (!accountAddress) return c;

	    // Create an object assigning the address to the contract name.
	    return value.reduce((c, contract) => {
	      return {
	        ...c,
	        [contract]: accountAddress
	      };
	    }, {});
	  }, {});
	};

	/**
	 * @description Take in flow.json files and return contract to address mapping by network
	 * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs
	 * @param {string} network - Network to gather addresses for
	 * @returns {object} - Contract names by addresses mapping e.g { "HelloWorld": "0x123" }
	 */
	const getContracts$1$1 = (jsons, network) => {
	  return pipe$1$1(mergeFlowJSONs$1$1, mergePipe$1$1(mapDeploymentsToNetworkAddress$1$1(network), pipe$1$1(filterContracts$1$1, mapContractAliasesToNetworkAddress$1$1(network))))(jsons);
	};

	/**
	 * @description Checks if string is hexidecimal
	 * @param {string} str - String to check
	 * @returns {boolean} - Is hexidecimal status
	 */
	const isHexidecimal$1$1 = str => {
	  // Check that it is a string
	  if (typeof str !== "string") return false;
	  return /^[0-9A-Fa-f]+$/.test(str);
	};

	/**
	 * @description Checks flow.json file for private keys
	 * @param {object} flowJSON - Flow JSON
	 * @returns {boolean} - Has private keys status
	 */
	const hasPrivateKeys$1$1 = flowJSON => {
	  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {
	    let [key, value] = _ref4;
	    if (hasPrivateKey) return true;
	    return value?.hasOwnProperty("key") && isHexidecimal$1$1(value?.key);
	  }, false);
	};

	/**
	 * @description Take in flow.json or array of flow.json files and checks for private keys
	 * @param {object|object[]} value - Flow JSON or array of Flow JSONs
	 * @returns {boolean} - Has private keys status
	 */
	const anyHasPrivateKeys$1$1 = value => {
	  if (isObject$1$1(value)) return hasPrivateKeys$1$1(value);
	  return value.some(hasPrivateKeys$1$1);
	};

	/**
	 * @description Format network to always be 'emulator', 'testnet', or 'mainnet'
	 * @param {string} network - Network to format
	 * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')
	 */
	const cleanNetwork$1$1 = network => network?.toLowerCase() === "local" ? "emulator" : network?.toLowerCase();
	const NAME$1$1 = "config";
	const PUT$1$1 = "PUT_CONFIG";
	const GET$1$1 = "GET_CONFIG";
	const GET_ALL$1$1 = "GET_ALL_CONFIG";
	const UPDATE$1$1 = "UPDATE_CONFIG";
	const DELETE$1$1 = "DELETE_CONFIG";
	const CLEAR$1$1 = "CLEAR_CONFIG";
	const WHERE$1$1 = "WHERE_CONFIG";
	const UPDATED$1$1 = "CONFIG/UPDATED";
	const identity$1$1 = v => v;
	const HANDLERS$1$1 = {
	  [PUT$1$1]: (ctx, _letter, _ref) => {
	    let {
	      key,
	      value
	    } = _ref;
	    if (key == null) throw new Error("Missing 'key' for config/put.");
	    ctx.put(key, value);
	    ctx.broadcast(UPDATED$1$1, {
	      ...ctx.all()
	    });
	  },
	  [GET$1$1]: (ctx, letter, _ref2) => {
	    let {
	      key,
	      fallback
	    } = _ref2;
	    if (key == null) throw new Error("Missing 'key' for config/get");
	    letter.reply(ctx.get(key, fallback));
	  },
	  [GET_ALL$1$1]: (ctx, letter) => {
	    letter.reply({
	      ...ctx.all()
	    });
	  },
	  [UPDATE$1$1]: (ctx, letter, _ref3) => {
	    let {
	      key,
	      fn
	    } = _ref3;
	    if (key == null) throw new Error("Missing 'key' for config/update");
	    ctx.update(key, fn || identity$1$1);
	    ctx.broadcast(UPDATED$1$1, {
	      ...ctx.all()
	    });
	  },
	  [DELETE$1$1]: (ctx, letter, _ref4) => {
	    let {
	      key
	    } = _ref4;
	    if (key == null) throw new Error("Missing 'key' for config/delete");
	    ctx.delete(key);
	    ctx.broadcast(UPDATED$1$1, {
	      ...ctx.all()
	    });
	  },
	  [CLEAR$1$1]: (ctx, letter) => {
	    let keys = Object.keys(ctx.all());
	    for (let key of keys) ctx.delete(key);
	    ctx.broadcast(UPDATED$1$1, {
	      ...ctx.all()
	    });
	  },
	  [WHERE$1$1]: (ctx, letter, _ref5) => {
	    let {
	      pattern
	    } = _ref5;
	    if (pattern == null) throw new Error("Missing 'pattern' for config/where");
	    letter.reply(ctx.where(pattern));
	  },
	  [SUBSCRIBE$1]: (ctx, letter) => {
	    ctx.subscribe(letter.from);
	    ctx.send(letter.from, UPDATED$1$1, {
	      ...ctx.all()
	    });
	  },
	  [UNSUBSCRIBE$1]: (ctx, letter) => {
	    ctx.unsubscribe(letter.from);
	  }
	};
	spawn$1(HANDLERS$1$1, NAME$1$1);

	/**
	 * @description Adds a key-value pair to the config
	 * @param {string} key - The key to add
	 * @param {*} value - The value to add
	 * @returns {Promise<object>} - The current config
	 */
	function put$1$1(key, value) {
	  send$3(NAME$1$1, PUT$1$1, {
	    key,
	    value
	  });
	  return config$1$1();
	}

	/**
	 * @description Gets a key-value pair with a fallback from the config
	 * @param {string} key - The key to add
	 * @param {*} [fallback] - The fallback value to return if key is not found
	 * @returns {Promise<*>} - The value found at key or fallback
	 */
	function get$1$1(key, fallback) {
	  return send$3(NAME$1$1, GET$1$1, {
	    key,
	    fallback
	  }, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Returns the first non null config value or the fallback
	 * @param {string[]} wants - The keys to search for
	 * @param {*} fallback - The fallback value to return if key is not found
	 * @returns {Promise<*>} - The value found at key or fallback
	 */
	async function first$1$1() {
	  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  let fallback = arguments.length > 1 ? arguments[1] : undefined;
	  if (!wants.length) return fallback;
	  const [head, ...rest] = wants;
	  const ret = await get$1$1(head);
	  if (ret == null) return first$1$1(rest, fallback);
	  return ret;
	}

	/**
	 * @description Returns the current config
	 * @returns {Promise<object>} - The current config
	 */
	function all$1$1() {
	  return send$3(NAME$1$1, GET_ALL$1$1, null, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Updates a key-value pair in the config
	 * @param {string} key - The key to update
	 * @param {Function} fn - The function to update the value with
	 * @returns {Promise<object>} - The current config
	 */
	function update$1$1(key) {
	  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$1$1;
	  send$3(NAME$1$1, UPDATE$1$1, {
	    key,
	    fn
	  });
	  return config$1$1();
	}

	/**
	 * @description Deletes a key-value pair from the config
	 * @param {string} key - The key to delete
	 * @returns {Promise<object>} - The current config
	 */
	function _delete$1$1(key) {
	  send$3(NAME$1$1, DELETE$1$1, {
	    key
	  });
	  return config$1$1();
	}

	/**
	 * @description Returns a subset of the config based on a pattern
	 * @param {string} pattern - The pattern to match keys against
	 * @returns {Promise<object>} - The subset of the config
	 */
	function where$1$1(pattern) {
	  return send$3(NAME$1$1, WHERE$1$1, {
	    pattern
	  }, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Subscribes to config updates
	 * @param {Function} callback - The callback to call when config is updated
	 * @returns {Function} - The unsubscribe function
	 */
	function subscribe$1$1(callback) {
	  return subscriber$1(NAME$1$1, () => spawn$1(HANDLERS$1$1, NAME$1$1), callback);
	}

	/**
	 * @description Clears the config
	 * @returns {void}
	 */
	function clearConfig$1$1() {
	  return send$3(NAME$1$1, CLEAR$1$1);
	}

	/**
	 * @description Resets the config to a previous state
	 * @param {object} oldConfig - The previous config state
	 * @returns {Promise<object>} - The current config
	 */
	function resetConfig$1$1(oldConfig) {
	  return clearConfig$1$1().then(config$1$1(oldConfig));
	}

	/**
	 * @description Takes in flow.json or array of flow.json files and creates contract placeholders
	 * @param {object|object[]} data - The flow.json or array of flow.json files
	 * @returns {void}
	 */
	async function load$1$1(data) {
	  const network = await get$1$1("flow.network");
	  const cleanedNetwork = cleanNetwork$1$1(network);
	  const {
	    flowJSON
	  } = data;
	  invariant$1$1(Boolean(flowJSON), "config.load -- 'flowJSON' must be defined");
	  invariant$1$1(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define "flow.network" to "emulator", "local", "testnet", or "mainnet" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);
	  if (anyHasPrivateKeys$1$1(flowJSON)) {
	    const isEmulator = cleanedNetwork === "emulator";
	    log$3({
	      title: "Private Keys Detected",
	      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,
	      level: isEmulator ? LEVELS$3.warn : LEVELS$3.error
	    });
	    if (!isEmulator) return;
	  }
	  for (const [key, value] of Object.entries(getContracts$1$1(flowJSON, cleanedNetwork))) {
	    const contractConfigKey = `0x${key}`;
	    const existingContractConfigKey = await get$1$1(contractConfigKey);
	    if (existingContractConfigKey && existingContractConfigKey !== value) {
	      log$3({
	        title: "Contract Placeholder Conflict Detected",
	        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
	        level: LEVELS$3.warn
	      });
	    } else {
	      put$1$1(contractConfigKey, value);
	    }
	    const systemContractConfigKey = `system.contracts.${key}`;
	    const systemExistingContractConfigKeyValue = await get$1$1(systemContractConfigKey);
	    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {
	      log$3({
	        title: "Contract Placeholder Conflict Detected",
	        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
	        level: LEVELS$3.warn
	      });
	    } else {
	      put$1$1(systemContractConfigKey, value);
	    }
	  }
	}

	// eslint-disable-next-line jsdoc/require-returns
	/**
	 * @description Sets the config
	 * @param {object} [values] - The values to set
	 */
	function config$1$1(values) {
	  if (values != null && typeof values === "object") {
	    Object.keys(values).map(d => put$1$1(d, values[d]));
	  }
	  return {
	    put: put$1$1,
	    get: get$1$1,
	    all: all$1$1,
	    first: first$1$1,
	    update: update$1$1,
	    delete: _delete$1$1,
	    where: where$1$1,
	    subscribe: subscribe$1$1,
	    overload: overload$1$1,
	    load: load$1$1
	  };
	}
	config$1$1.put = put$1$1;
	config$1$1.get = get$1$1;
	config$1$1.all = all$1$1;
	config$1$1.first = first$1$1;
	config$1$1.update = update$1$1;
	config$1$1.delete = _delete$1$1;
	config$1$1.where = where$1$1;
	config$1$1.subscribe = subscribe$1$1;
	config$1$1.overload = overload$1$1;
	config$1$1.load = load$1$1;
	const noop$1$1 = v => v;
	function overload$1$1() {
	  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$1$1;
	  return new Promise(async (resolve, reject) => {
	    const oldConfig = await all$1$1();
	    try {
	      config$1$1(opts);
	      var result = await callback(await all$1$1());
	      await resetConfig$1$1(oldConfig);
	      resolve(result);
	    } catch (error) {
	      await resetConfig$1$1(oldConfig);
	      reject(error);
	    }
	  });
	}

	/**
	 * The levels of the logger
	 * 
	 * @typedef {Object} LEVELS
	 * @property {number} debug - The debug level
	 * @property {number} info - The info level
	 * @property {number} log - The log level
	 * @property {number} warn - The warn level
	 * @property {number} error - The error level
	 * 
	 */
	const LEVELS$3 = Object.freeze({
	  debug: 5,
	  info: 4,
	  log: 3,
	  warn: 2,
	  error: 1
	});

	/**
	 * Builds a message formatted for the logger
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.title - The title of the log
	 * @param {string} options.message - The message of the log
	 * @returns {Array<string>} - The message formatted for the logger
	 * 
	 * @example
	 * buildLoggerMessageArgs({ title: "My Title", message: "My Message" })
	 */
	const buildLoggerMessageArgs$3 = _ref => {
	  let {
	    title,
	    message
	  } = _ref;
	  return [`
    %c${title}
    ============================

    ${message}

    ============================
    `.replace(/\n[^\S\r\n]+/g, "\n").trim(),, "font-weight:bold;font-family:monospace;"];
	};

	/**
	 * Logs messages based on the level of the message and the level set in the config
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.title - The title of the log
	 * @param {string} options.message - The message of the log
	 * @param {number} options.level - The level of the log
	 * @param {boolean} options.always - Whether to always show the log
	 * @returns {Promise<void>}
	 * 
	 * @example
	 * log({ title: "My Title", message: "My Message", level: LEVELS.warn, always: false })
	 * 
	 */
	const log$3 = async _ref2 => {
	  let {
	    title,
	    message,
	    level,
	    always = false
	  } = _ref2;
	  const configLoggerLevel = await config$1$1.get("logger.level", LEVELS$3.warn);

	  // If config level is below message level then don't show it
	  if (!always && configLoggerLevel < level) return;
	  const loggerMessageArgs = buildLoggerMessageArgs$3({
	    title,
	    message
	  });
	  switch (level) {
	    case LEVELS$3.debug:
	      console.debug(...loggerMessageArgs);
	      break;
	    case LEVELS$3.info:
	      console.info(...loggerMessageArgs);
	      break;
	    case LEVELS$3.warn:
	      console.warn(...loggerMessageArgs);
	      break;
	    case LEVELS$3.error:
	      console.error(...loggerMessageArgs);
	      break;
	    default:
	      console.log(...loggerMessageArgs);
	  }
	};

	/**
	 * Logs a deprecation notice
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.pkg - The package that is being deprecated
	 * @param {string} options.subject - The subject of the deprecation
	 * @param {string} options.transition - The transition path for the deprecation
	 * @param {number} options.level - The level of the log
	 * @param {string} options.message - The message of the log
	 * @param {Function} options.callback - A callback to run after the log
	 * @returns {Promise<void>}
	 * 
	 * @example
	 * log.deprecate({ pkg: "@onflow/fcl", subject: "Some item", transition: "https://github.com/onflow/flow-js-sdk", message: "Descriptive message", level: LEVELS.warn, callback: () => {} })
	 * 
	 */
	log$3.deprecate = _ref3 => {
	  let {
	    pkg,
	    subject,
	    transition,
	    level = LEVELS$3.warn,
	    message = "",
	    callback = null
	  } = _ref3;
	  const capitalizeFirstLetter = string => {
	    return string.charAt(0).toUpperCase() + string.slice(1);
	  };
	  const logMessage = () => log$3({
	    title: `${pkg ? pkg + " " : ""}Deprecation Notice`,
	    message: `
      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? " of " + pkg : ""}.` : ""}${message ? "\n" + message : ""}${transition ? `\nYou can learn more (including a guide on common transition paths) here: ${transition}` : ""}
    `.trim(),
	    level
	  });
	  if (typeof callback === "function") {
	    return async function () {
	      await logMessage();
	      return await callback(...arguments);
	    };
	  }
	  return logMessage();
	};

	/**
	 * Asserts fact is true, otherwise throw an error with invariant message
	 * @param {boolean} fact
	 * @param {string} msg
	 * @param {Array} rest
	 * @returns {void}
	 */
	function invariant$4(fact, msg) {
	  if (!fact) {
	    const error = new Error(`INVARIANT ${msg}`);
	    error.stack = error.stack.split("\n").filter(d => !/at invariant/.test(d)).join("\n");
	    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      rest[_key - 2] = arguments[_key];
	    }
	    console.error("\n\n---\n\n", error, "\n\n", ...rest, "\n\n---\n\n");
	    throw error;
	  }
	}
	const pipe$3 = function () {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	  return v => {
	    return funcs.reduce((res, func) => {
	      return func(res);
	    }, v);
	  };
	};

	/***
	 * Merge multiple functions returning objects into one object.
	 * @param {...function(*): object} funcs - Functions to merge
	 * @return {object} - Merged object
	 */
	const mergePipe$2 = function () {
	  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    funcs[_key2] = arguments[_key2];
	  }
	  return v => {
	    return funcs.reduce((res, func) => {
	      return {
	        ...res,
	        ...func(v)
	      };
	    }, {});
	  };
	};

	/**
	 * @description Object check
	 * @param {*} value - Value to check
	 * @returns {boolean} - Is object status
	 */
	const isObject$3 = value => value && typeof value === "object" && !Array.isArray(value);

	/**
	 * @description Deep merge multiple objects.
	 * @param {object} target - Target object
	 * @param {...object[]} sources - Source objects
	 * @returns {object} - Merged object
	 */
	const mergeDeep$2 = function (target) {
	  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	    sources[_key3 - 1] = arguments[_key3];
	  }
	  if (!sources.length) return target;
	  const source = sources.shift();
	  if (isObject$3(target) && isObject$3(source)) {
	    for (const key in source) {
	      if (isObject$3(source[key])) {
	        if (!target[key]) Object.assign(target, {
	          [key]: {}
	        });
	        mergeDeep$2(target[key], source[key]);
	      } else {
	        Object.assign(target, {
	          [key]: source[key]
	        });
	      }
	    }
	  }
	  return mergeDeep$2(target, ...sources);
	};

	/**
	 * @description Deep merge multiple Flow JSON.
	 * @param {object|object[]} value - Flow JSON or array of Flow JSONs
	 * @returns {object} - Merged Flow JSON
	 */
	const mergeFlowJSONs$2 = value => Array.isArray(value) ? mergeDeep$2({}, ...value) : value;

	/**
	 * @description Filter out contracts section of flow.json.
	 * @param {object|object[]} obj - Flow JSON or array of Flow JSONs
	 * @returns {object} - Contracts section of Flow JSON
	 */
	const filterContracts$2 = obj => obj.contracts ? obj.contracts : {};

	/**
	 * @description Gathers contract addresses by network
	 * @param {string} network - Network to gather addresses for
	 * @returns {object} - Contract names by addresses mapping e.g { "HelloWorld": "0x123" }
	 */
	const mapContractAliasesToNetworkAddress$2 = network => contracts => {
	  return Object.entries(contracts).reduce((c, _ref) => {
	    let [key, value] = _ref;
	    const networkContractAlias = value?.aliases?.[network];
	    if (networkContractAlias) {
	      c[key] = networkContractAlias;
	    }
	    return c;
	  }, {});
	};
	const mapDeploymentsToNetworkAddress$2 = network => _ref2 => {
	  let {
	    deployments = {},
	    accounts = {}
	  } = _ref2;
	  const networkDeployment = deployments?.[network];
	  if (!networkDeployment) return {};
	  return Object.entries(networkDeployment).reduce((c, _ref3) => {
	    let [key, value] = _ref3;
	    // Resolve account address
	    const accountAddress = accounts[key]?.address;
	    if (!accountAddress) return c;

	    // Create an object assigning the address to the contract name.
	    return value.reduce((c, contract) => {
	      return {
	        ...c,
	        [contract]: accountAddress
	      };
	    }, {});
	  }, {});
	};

	/**
	 * @description Take in flow.json files and return contract to address mapping by network
	 * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs
	 * @param {string} network - Network to gather addresses for
	 * @returns {object} - Contract names by addresses mapping e.g { "HelloWorld": "0x123" }
	 */
	const getContracts$2 = (jsons, network) => {
	  return pipe$3(mergeFlowJSONs$2, mergePipe$2(mapDeploymentsToNetworkAddress$2(network), pipe$3(filterContracts$2, mapContractAliasesToNetworkAddress$2(network))))(jsons);
	};

	/**
	 * @description Checks if string is hexidecimal
	 * @param {string} str - String to check
	 * @returns {boolean} - Is hexidecimal status
	 */
	const isHexidecimal$2 = str => {
	  // Check that it is a string
	  if (typeof str !== "string") return false;
	  return /^[0-9A-Fa-f]+$/.test(str);
	};

	/**
	 * @description Checks flow.json file for private keys
	 * @param {object} flowJSON - Flow JSON
	 * @returns {boolean} - Has private keys status
	 */
	const hasPrivateKeys$2 = flowJSON => {
	  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {
	    let [key, value] = _ref4;
	    if (hasPrivateKey) return true;
	    return value?.hasOwnProperty("key") && isHexidecimal$2(value?.key);
	  }, false);
	};

	/**
	 * @description Take in flow.json or array of flow.json files and checks for private keys
	 * @param {object|object[]} value - Flow JSON or array of Flow JSONs
	 * @returns {boolean} - Has private keys status
	 */
	const anyHasPrivateKeys$2 = value => {
	  if (isObject$3(value)) return hasPrivateKeys$2(value);
	  return value.some(hasPrivateKeys$2);
	};

	/**
	 * @description Format network to always be 'emulator', 'testnet', or 'mainnet'
	 * @param {string} network - Network to format
	 * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')
	 */
	const cleanNetwork$2 = network => network?.toLowerCase() === "local" ? "emulator" : network?.toLowerCase();
	const NAME$2 = "config";
	const PUT$2 = "PUT_CONFIG";
	const GET$2 = "GET_CONFIG";
	const GET_ALL$2 = "GET_ALL_CONFIG";
	const UPDATE$2 = "UPDATE_CONFIG";
	const DELETE$2 = "DELETE_CONFIG";
	const CLEAR$2 = "CLEAR_CONFIG";
	const WHERE$2 = "WHERE_CONFIG";
	const UPDATED$3 = "CONFIG/UPDATED";
	const identity$4 = v => v;
	const HANDLERS$2 = {
	  [PUT$2]: (ctx, _letter, _ref) => {
	    let {
	      key,
	      value
	    } = _ref;
	    if (key == null) throw new Error("Missing 'key' for config/put.");
	    ctx.put(key, value);
	    ctx.broadcast(UPDATED$3, {
	      ...ctx.all()
	    });
	  },
	  [GET$2]: (ctx, letter, _ref2) => {
	    let {
	      key,
	      fallback
	    } = _ref2;
	    if (key == null) throw new Error("Missing 'key' for config/get");
	    letter.reply(ctx.get(key, fallback));
	  },
	  [GET_ALL$2]: (ctx, letter) => {
	    letter.reply({
	      ...ctx.all()
	    });
	  },
	  [UPDATE$2]: (ctx, letter, _ref3) => {
	    let {
	      key,
	      fn
	    } = _ref3;
	    if (key == null) throw new Error("Missing 'key' for config/update");
	    ctx.update(key, fn || identity$4);
	    ctx.broadcast(UPDATED$3, {
	      ...ctx.all()
	    });
	  },
	  [DELETE$2]: (ctx, letter, _ref4) => {
	    let {
	      key
	    } = _ref4;
	    if (key == null) throw new Error("Missing 'key' for config/delete");
	    ctx.delete(key);
	    ctx.broadcast(UPDATED$3, {
	      ...ctx.all()
	    });
	  },
	  [CLEAR$2]: (ctx, letter) => {
	    let keys = Object.keys(ctx.all());
	    for (let key of keys) ctx.delete(key);
	    ctx.broadcast(UPDATED$3, {
	      ...ctx.all()
	    });
	  },
	  [WHERE$2]: (ctx, letter, _ref5) => {
	    let {
	      pattern
	    } = _ref5;
	    if (pattern == null) throw new Error("Missing 'pattern' for config/where");
	    letter.reply(ctx.where(pattern));
	  },
	  [SUBSCRIBE$1]: (ctx, letter) => {
	    ctx.subscribe(letter.from);
	    ctx.send(letter.from, UPDATED$3, {
	      ...ctx.all()
	    });
	  },
	  [UNSUBSCRIBE$1]: (ctx, letter) => {
	    ctx.unsubscribe(letter.from);
	  }
	};
	spawn$1(HANDLERS$2, NAME$2);

	/**
	 * @description Adds a key-value pair to the config
	 * @param {string} key - The key to add
	 * @param {*} value - The value to add
	 * @returns {Promise<object>} - The current config
	 */
	function put$3(key, value) {
	  send$3(NAME$2, PUT$2, {
	    key,
	    value
	  });
	  return config$2();
	}

	/**
	 * @description Gets a key-value pair with a fallback from the config
	 * @param {string} key - The key to add
	 * @param {*} [fallback] - The fallback value to return if key is not found
	 * @returns {Promise<*>} - The value found at key or fallback
	 */
	function get$3(key, fallback) {
	  return send$3(NAME$2, GET$2, {
	    key,
	    fallback
	  }, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Returns the first non null config value or the fallback
	 * @param {string[]} wants - The keys to search for
	 * @param {*} fallback - The fallback value to return if key is not found
	 * @returns {Promise<*>} - The value found at key or fallback
	 */
	async function first$2() {
	  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  let fallback = arguments.length > 1 ? arguments[1] : undefined;
	  if (!wants.length) return fallback;
	  const [head, ...rest] = wants;
	  const ret = await get$3(head);
	  if (ret == null) return first$2(rest, fallback);
	  return ret;
	}

	/**
	 * @description Returns the current config
	 * @returns {Promise<object>} - The current config
	 */
	function all$2() {
	  return send$3(NAME$2, GET_ALL$2, null, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Updates a key-value pair in the config
	 * @param {string} key - The key to update
	 * @param {Function} fn - The function to update the value with
	 * @returns {Promise<object>} - The current config
	 */
	function update$3(key) {
	  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$4;
	  send$3(NAME$2, UPDATE$2, {
	    key,
	    fn
	  });
	  return config$2();
	}

	/**
	 * @description Deletes a key-value pair from the config
	 * @param {string} key - The key to delete
	 * @returns {Promise<object>} - The current config
	 */
	function _delete$2(key) {
	  send$3(NAME$2, DELETE$2, {
	    key
	  });
	  return config$2();
	}

	/**
	 * @description Returns a subset of the config based on a pattern
	 * @param {string} pattern - The pattern to match keys against
	 * @returns {Promise<object>} - The subset of the config
	 */
	function where$2(pattern) {
	  return send$3(NAME$2, WHERE$2, {
	    pattern
	  }, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Subscribes to config updates
	 * @param {Function} callback - The callback to call when config is updated
	 * @returns {Function} - The unsubscribe function
	 */
	function subscribe$2(callback) {
	  return subscriber$1(NAME$2, () => spawn$1(HANDLERS$2, NAME$2), callback);
	}

	/**
	 * @description Clears the config
	 * @returns {void}
	 */
	function clearConfig$2() {
	  return send$3(NAME$2, CLEAR$2);
	}

	/**
	 * @description Resets the config to a previous state
	 * @param {object} oldConfig - The previous config state
	 * @returns {Promise<object>} - The current config
	 */
	function resetConfig$2(oldConfig) {
	  return clearConfig$2().then(config$2(oldConfig));
	}

	/**
	 * @description Takes in flow.json or array of flow.json files and creates contract placeholders
	 * @param {object|object[]} data - The flow.json or array of flow.json files
	 * @returns {void}
	 */
	async function load$2(data) {
	  const network = await get$3("flow.network");
	  const cleanedNetwork = cleanNetwork$2(network);
	  const {
	    flowJSON
	  } = data;
	  invariant$4(Boolean(flowJSON), "config.load -- 'flowJSON' must be defined");
	  invariant$4(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define "flow.network" to "emulator", "local", "testnet", or "mainnet" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);
	  if (anyHasPrivateKeys$2(flowJSON)) {
	    const isEmulator = cleanedNetwork === "emulator";
	    log$3({
	      title: "Private Keys Detected",
	      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,
	      level: isEmulator ? LEVELS$3.warn : LEVELS$3.error
	    });
	    if (!isEmulator) return;
	  }
	  for (const [key, value] of Object.entries(getContracts$2(flowJSON, cleanedNetwork))) {
	    const contractConfigKey = `0x${key}`;
	    const existingContractConfigKey = await get$3(contractConfigKey);
	    if (existingContractConfigKey && existingContractConfigKey !== value) {
	      log$3({
	        title: "Contract Placeholder Conflict Detected",
	        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
	        level: LEVELS$3.warn
	      });
	    } else {
	      put$3(contractConfigKey, value);
	    }
	    const systemContractConfigKey = `system.contracts.${key}`;
	    const systemExistingContractConfigKeyValue = await get$3(systemContractConfigKey);
	    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {
	      log$3({
	        title: "Contract Placeholder Conflict Detected",
	        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
	        level: LEVELS$3.warn
	      });
	    } else {
	      put$3(systemContractConfigKey, value);
	    }
	  }
	}

	// eslint-disable-next-line jsdoc/require-returns
	/**
	 * @description Sets the config
	 * @param {object} [values] - The values to set
	 */
	function config$2(values) {
	  if (values != null && typeof values === "object") {
	    Object.keys(values).map(d => put$3(d, values[d]));
	  }
	  return {
	    put: put$3,
	    get: get$3,
	    all: all$2,
	    first: first$2,
	    update: update$3,
	    delete: _delete$2,
	    where: where$2,
	    subscribe: subscribe$2,
	    overload: overload$2,
	    load: load$2
	  };
	}
	config$2.put = put$3;
	config$2.get = get$3;
	config$2.all = all$2;
	config$2.first = first$2;
	config$2.update = update$3;
	config$2.delete = _delete$2;
	config$2.where = where$2;
	config$2.subscribe = subscribe$2;
	config$2.overload = overload$2;
	config$2.load = load$2;
	const noop$3 = v => v;
	function overload$2() {
	  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$3;
	  return new Promise(async (resolve, reject) => {
	    const oldConfig = await all$2();
	    try {
	      config$2(opts);
	      var result = await callback(await all$2());
	      await resetConfig$2(oldConfig);
	      resolve(result);
	    } catch (error) {
	      await resetConfig$2(oldConfig);
	      reject(error);
	    }
	  });
	}

	/**
	 * The levels of the logger
	 * 
	 * @typedef {Object} LEVELS
	 * @property {number} debug - The debug level
	 * @property {number} info - The info level
	 * @property {number} log - The log level
	 * @property {number} warn - The warn level
	 * @property {number} error - The error level
	 * 
	 */
	const LEVELS$2 = Object.freeze({
	  debug: 5,
	  info: 4,
	  log: 3,
	  warn: 2,
	  error: 1
	});

	/**
	 * Builds a message formatted for the logger
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.title - The title of the log
	 * @param {string} options.message - The message of the log
	 * @returns {Array<string>} - The message formatted for the logger
	 * 
	 * @example
	 * buildLoggerMessageArgs({ title: "My Title", message: "My Message" })
	 */
	const buildLoggerMessageArgs$2 = _ref => {
	  let {
	    title,
	    message
	  } = _ref;
	  return [`
    %c${title}
    ============================

    ${message}

    ============================
    `.replace(/\n[^\S\r\n]+/g, "\n").trim(),, "font-weight:bold;font-family:monospace;"];
	};

	/**
	 * Logs messages based on the level of the message and the level set in the config
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.title - The title of the log
	 * @param {string} options.message - The message of the log
	 * @param {number} options.level - The level of the log
	 * @param {boolean} options.always - Whether to always show the log
	 * @returns {Promise<void>}
	 * 
	 * @example
	 * log({ title: "My Title", message: "My Message", level: LEVELS.warn, always: false })
	 * 
	 */
	const log$2 = async _ref2 => {
	  let {
	    title,
	    message,
	    level,
	    always = false
	  } = _ref2;
	  const configLoggerLevel = await config$2.get("logger.level", LEVELS$2.warn);

	  // If config level is below message level then don't show it
	  if (!always && configLoggerLevel < level) return;
	  const loggerMessageArgs = buildLoggerMessageArgs$2({
	    title,
	    message
	  });
	  switch (level) {
	    case LEVELS$2.debug:
	      console.debug(...loggerMessageArgs);
	      break;
	    case LEVELS$2.info:
	      console.info(...loggerMessageArgs);
	      break;
	    case LEVELS$2.warn:
	      console.warn(...loggerMessageArgs);
	      break;
	    case LEVELS$2.error:
	      console.error(...loggerMessageArgs);
	      break;
	    default:
	      console.log(...loggerMessageArgs);
	  }
	};

	/**
	 * Logs a deprecation notice
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.pkg - The package that is being deprecated
	 * @param {string} options.subject - The subject of the deprecation
	 * @param {string} options.transition - The transition path for the deprecation
	 * @param {number} options.level - The level of the log
	 * @param {string} options.message - The message of the log
	 * @param {Function} options.callback - A callback to run after the log
	 * @returns {Promise<void>}
	 * 
	 * @example
	 * log.deprecate({ pkg: "@onflow/fcl", subject: "Some item", transition: "https://github.com/onflow/flow-js-sdk", message: "Descriptive message", level: LEVELS.warn, callback: () => {} })
	 * 
	 */
	log$2.deprecate = _ref3 => {
	  let {
	    pkg,
	    subject,
	    transition,
	    level = LEVELS$2.warn,
	    message = "",
	    callback = null
	  } = _ref3;
	  const capitalizeFirstLetter = string => {
	    return string.charAt(0).toUpperCase() + string.slice(1);
	  };
	  const logMessage = () => log$2({
	    title: `${pkg ? pkg + " " : ""}Deprecation Notice`,
	    message: `
      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? " of " + pkg : ""}.` : ""}${message ? "\n" + message : ""}${transition ? `\nYou can learn more (including a guide on common transition paths) here: ${transition}` : ""}
    `.trim(),
	    level
	  });
	  if (typeof callback === "function") {
	    return async function () {
	      await logMessage();
	      return await callback(...arguments);
	    };
	  }
	  return logMessage();
	};

	/**
	 * Asserts fact is true, otherwise throw an error with invariant message
	 * @param {boolean} fact
	 * @param {string} msg
	 * @param {Array} rest
	 * @returns {void}
	 */
	function invariant$3(fact, msg) {
	  if (!fact) {
	    const error = new Error(`INVARIANT ${msg}`);
	    error.stack = error.stack.split("\n").filter(d => !/at invariant/.test(d)).join("\n");
	    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      rest[_key - 2] = arguments[_key];
	    }
	    console.error("\n\n---\n\n", error, "\n\n", ...rest, "\n\n---\n\n");
	    throw error;
	  }
	}

	const UNKNOWN /*                       */ = "UNKNOWN";
	const SCRIPT /*                        */ = "SCRIPT";
	const TRANSACTION /*                   */ = "TRANSACTION";
	const GET_TRANSACTION_STATUS /*        */ = "GET_TRANSACTION_STATUS";
	const GET_ACCOUNT /*                   */ = "GET_ACCOUNT";
	const GET_EVENTS /*                    */ = "GET_EVENTS";
	const PING /*                          */ = "PING";
	const GET_TRANSACTION /*               */ = "GET_TRANSACTION";
	const GET_BLOCK /*                     */ = "GET_BLOCK";
	const GET_BLOCK_HEADER /*              */ = "GET_BLOCK_HEADER";
	const GET_COLLECTION /*                */ = "GET_COLLECTION";
	const GET_NETWORK_PARAMETERS /*        */ = "GET_NETWORK_PARAMETERS";
	const BAD /* */ = "BAD";
	const OK /*  */ = "OK";
	const ACCOUNT /*  */ = "ACCOUNT";
	const PARAM /*    */ = "PARAM";
	const ARGUMENT /* */ = "ARGUMENT";
	const AUTHORIZER /* */ = "authorizer";
	const PAYER /*      */ = "payer";
	const PROPOSER /*   */ = "proposer";
	const ACCT = `{
  "kind":"${ACCOUNT}",
  "tempId":null,
  "addr":null,
  "keyId":null,
  "sequenceNum":null,
  "signature":null,
  "signingFunction":null,
  "resolve":null,
  "role": {
    "proposer":false,
    "authorizer":false,
    "payer":false,
    "param":false
  }
}`;
	const ARG = `{
  "kind":"${ARGUMENT}",
  "tempId":null,
  "value":null,
  "asArgument":null,
  "xform":null,
  "resolve": null,
  "resolveArgument": null
}`;
	const IX = `{
  "tag":"${UNKNOWN}",
  "assigns":{},
  "status":"${OK}",
  "reason":null,
  "accounts":{},
  "params":{},
  "arguments":{},
  "message": {
    "cadence":null,
    "refBlock":null,
    "computeLimit":null,
    "proposer":null,
    "payer":null,
    "authorizations":[],
    "params":[],
    "arguments":[]
  },
  "proposer":null,
  "authorizations":[],
  "payer":[],
  "events": {
    "eventType":null,
    "start":null,
    "end":null,
    "blockIds":[]
  },
  "transaction": {
    "id":null
  },
  "block": {
    "id":null,
    "height":null,
    "isSealed":null
  },
  "account": {
    "addr":null
  },
  "collection": {
    "id":null
  }
}`;
	const KEYS = new Set(Object.keys(JSON.parse(IX)));
	const interaction = () => JSON.parse(IX);
	const CHARS = "abcdefghijklmnopqrstuvwxyz0123456789".split("");
	const randChar = () => CHARS[~~(Math.random() * CHARS.length)];
	const uuid = () => Array.from({
	  length: 10
	}, randChar).join("");
	const isNumber$1 = d => typeof d === "number";
	const isArray$1 = d => Array.isArray(d);
	const isObj = d => d !== null && typeof d === "object";
	const isNull = d => d == null;
	const isFn$3 = d => typeof d === "function";
	const isInteraction = ix => {
	  if (!isObj(ix) || isNull(ix) || isNumber$1(ix)) return false;
	  for (let key of KEYS) if (!ix.hasOwnProperty(key)) return false;
	  return true;
	};
	const Ok = ix => {
	  ix.status = OK;
	  return ix;
	};
	const Bad = (ix, reason) => {
	  ix.status = BAD;
	  ix.reason = reason;
	  return ix;
	};
	const makeIx = wat => ix => {
	  ix.tag = wat;
	  return Ok(ix);
	};
	const prepAccountKeyId = acct => {
	  if (acct.keyId == null) return acct;
	  invariant$3(!isNaN(parseInt(acct.keyId)), "account.keyId must be an integer");
	  return {
	    ...acct,
	    keyId: parseInt(acct.keyId)
	  };
	};
	const prepAccount = function (acct) {
	  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  return ix => {
	    invariant$3(typeof acct === "function" || typeof acct === "object", "prepAccount must be passed an authorization function or an account object");
	    invariant$3(opts.role != null, "Account must have a role");
	    const ACCOUNT = JSON.parse(ACCT);
	    const role = opts.role;
	    const tempId = uuid();
	    if (acct.authorization && isFn$3(acct.authorization)) acct = {
	      resolve: acct.authorization
	    };
	    if (!acct.authorization && isFn$3(acct)) acct = {
	      resolve: acct
	    };
	    const resolve = acct.resolve;
	    if (resolve) acct.resolve = function (acct) {
	      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        rest[_key - 1] = arguments[_key];
	      }
	      return [resolve, prepAccountKeyId].reduce(async (d, fn) => fn(await d, ...rest), acct);
	    };
	    acct = prepAccountKeyId(acct);
	    ix.accounts[tempId] = {
	      ...ACCOUNT,
	      tempId,
	      ...acct,
	      role: {
	        ...ACCOUNT.role,
	        ...(typeof acct.role === "object" ? acct.role : {}),
	        [role]: true
	      }
	    };
	    if (role === AUTHORIZER) {
	      ix.authorizations.push(tempId);
	    } else if (role === PAYER) {
	      ix.payer.push(tempId);
	    } else {
	      ix[role] = tempId;
	    }
	    return ix;
	  };
	};
	const makeArgument = arg => ix => {
	  let tempId = uuid();
	  ix.message.arguments.push(tempId);
	  ix.arguments[tempId] = JSON.parse(ARG);
	  ix.arguments[tempId].tempId = tempId;
	  ix.arguments[tempId].value = arg.value;
	  ix.arguments[tempId].asArgument = arg.asArgument;
	  ix.arguments[tempId].xform = arg.xform;
	  ix.arguments[tempId].resolve = arg.resolve;
	  ix.arguments[tempId].resolveArgument = isFn$3(arg.resolveArgument) ? arg.resolveArgument.bind(arg) : arg.resolveArgument;
	  return Ok(ix);
	};
	const makeUnknown /*                 */ = makeIx(UNKNOWN);
	const makeScript /*                  */ = makeIx(SCRIPT);
	const makeTransaction /*             */ = makeIx(TRANSACTION);
	const makeGetTransactionStatus /*    */ = makeIx(GET_TRANSACTION_STATUS);
	const makeGetTransaction /*          */ = makeIx(GET_TRANSACTION);
	const makeGetAccount /*              */ = makeIx(GET_ACCOUNT);
	const makeGetEvents /*               */ = makeIx(GET_EVENTS);
	const makePing /*                    */ = makeIx(PING);
	const makeGetBlock /*                */ = makeIx(GET_BLOCK);
	const makeGetBlockHeader /*          */ = makeIx(GET_BLOCK_HEADER);
	const makeGetCollection /*           */ = makeIx(GET_COLLECTION);
	const makeGetNetworkParameters /*    */ = makeIx(GET_NETWORK_PARAMETERS);
	const is = wat => ix => ix.tag === wat;
	const isUnknown /*                 */ = is(UNKNOWN);
	const isScript /*                  */ = is(SCRIPT);
	const isTransaction /*             */ = is(TRANSACTION);
	const isGetTransactionStatus /*    */ = is(GET_TRANSACTION_STATUS);
	const isGetTransaction /*          */ = is(GET_TRANSACTION);
	const isGetAccount /*              */ = is(GET_ACCOUNT);
	const isGetEvents /*               */ = is(GET_EVENTS);
	const isPing /*                    */ = is(PING);
	const isGetBlock /*                */ = is(GET_BLOCK);
	const isGetBlockHeader /*          */ = is(GET_BLOCK_HEADER);
	const isGetCollection /*           */ = is(GET_COLLECTION);
	const isGetNetworkParameters /*    */ = is(GET_NETWORK_PARAMETERS);
	const isOk /*  */ = ix => ix.status === OK;
	const isBad /* */ = ix => ix.status === BAD;
	const why /*   */ = ix => ix.reason;
	const isAccount /*  */ = account => account.kind === ACCOUNT;
	const isParam /*    */ = param => param.kind === PARAM;
	const isArgument /* */ = argument => argument.kind === ARGUMENT;
	const hardMode = ix => {
	  for (let key of Object.keys(ix)) {
	    if (!KEYS.has(key)) throw new Error(`"${key}" is an invalid root level Interaction property.`);
	  }
	  return ix;
	};
	const recPipe = async function (ix) {
	  let fns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	  try {
	    ix = hardMode(await ix);
	    if (isBad(ix)) throw new Error(`Interaction Error: ${ix.reason}`);
	    if (!fns.length) return ix;
	    const [hd, ...rest] = fns;
	    const cur = await hd;
	    if (isFn$3(cur)) return recPipe(cur(ix), rest);
	    if (isNull(cur) || !cur) return recPipe(ix, rest);
	    if (isInteraction(cur)) return recPipe(cur, rest);
	    throw new Error("Invalid Interaction Composition");
	  } catch (e) {
	    throw e;
	  }
	};
	const pipe$2 = function () {
	  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }
	  const [arg1, arg2] = args;
	  if (isArray$1(arg1) && arg2 == null) return d => pipe$2(d, arg1);
	  return recPipe(arg1, arg2);
	};
	const identity$3 = v => v;
	const get$2 = (ix, key, fallback) => {
	  return ix.assigns[key] == null ? fallback : ix.assigns[key];
	};
	const put$2 = (key, value) => ix => {
	  ix.assigns[key] = value;
	  return Ok(ix);
	};
	const update$2 = function (key) {
	  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$3;
	  return ix => {
	    ix.assigns[key] = fn(ix.assigns[key], ix);
	    return Ok(ix);
	  };
	};
	const destroy = key => ix => {
	  delete ix.assigns[key];
	  return Ok(ix);
	};

	var ixModule = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UNKNOWN: UNKNOWN,
		SCRIPT: SCRIPT,
		TRANSACTION: TRANSACTION,
		GET_TRANSACTION_STATUS: GET_TRANSACTION_STATUS,
		GET_ACCOUNT: GET_ACCOUNT,
		GET_EVENTS: GET_EVENTS,
		PING: PING,
		GET_TRANSACTION: GET_TRANSACTION,
		GET_BLOCK: GET_BLOCK,
		GET_BLOCK_HEADER: GET_BLOCK_HEADER,
		GET_COLLECTION: GET_COLLECTION,
		GET_NETWORK_PARAMETERS: GET_NETWORK_PARAMETERS,
		BAD: BAD,
		OK: OK,
		ACCOUNT: ACCOUNT,
		PARAM: PARAM,
		ARGUMENT: ARGUMENT,
		AUTHORIZER: AUTHORIZER,
		PAYER: PAYER,
		PROPOSER: PROPOSER,
		interaction: interaction,
		uuid: uuid,
		isNumber: isNumber$1,
		isArray: isArray$1,
		isObj: isObj,
		isNull: isNull,
		isFn: isFn$3,
		isInteraction: isInteraction,
		Ok: Ok,
		Bad: Bad,
		prepAccount: prepAccount,
		makeArgument: makeArgument,
		makeUnknown: makeUnknown,
		makeScript: makeScript,
		makeTransaction: makeTransaction,
		makeGetTransactionStatus: makeGetTransactionStatus,
		makeGetTransaction: makeGetTransaction,
		makeGetAccount: makeGetAccount,
		makeGetEvents: makeGetEvents,
		makePing: makePing,
		makeGetBlock: makeGetBlock,
		makeGetBlockHeader: makeGetBlockHeader,
		makeGetCollection: makeGetCollection,
		makeGetNetworkParameters: makeGetNetworkParameters,
		isUnknown: isUnknown,
		isScript: isScript,
		isTransaction: isTransaction,
		isGetTransactionStatus: isGetTransactionStatus,
		isGetTransaction: isGetTransaction,
		isGetAccount: isGetAccount,
		isGetEvents: isGetEvents,
		isPing: isPing,
		isGetBlock: isGetBlock,
		isGetBlockHeader: isGetBlockHeader,
		isGetCollection: isGetCollection,
		isGetNetworkParameters: isGetNetworkParameters,
		isOk: isOk,
		isBad: isBad,
		why: why,
		isAccount: isAccount,
		isParam: isParam,
		isArgument: isArgument,
		pipe: pipe$2,
		get: get$2,
		put: put$2,
		update: update$2,
		destroy: destroy
	});

	function build() {
	  let fns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  return pipe$2(interaction(), fns);
	}

	var buffer = {};

	var base64Js = {};

	base64Js.byteLength = byteLength;
	base64Js.toByteArray = toByteArray;
	base64Js.fromByteArray = fromByteArray;
	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i];
	  revLookup[code.charCodeAt(i)] = i;
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62;
	revLookup['_'.charCodeAt(0)] = 63;
	function getLens(b64) {
	  var len = b64.length;
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4');
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=');
	  if (validLen === -1) validLen = len;
	  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
	  return [validLen, placeHoldersLen];
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength(b64) {
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];
	  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
	}
	function _byteLength(b64, validLen, placeHoldersLen) {
	  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
	}
	function toByteArray(b64) {
	  var tmp;
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];
	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
	  var curByte = 0;

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
	  var i;
	  for (i = 0; i < len; i += 4) {
	    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
	    arr[curByte++] = tmp >> 16 & 0xFF;
	    arr[curByte++] = tmp >> 8 & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }
	  if (placeHoldersLen === 2) {
	    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
	    arr[curByte++] = tmp & 0xFF;
	  }
	  if (placeHoldersLen === 1) {
	    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
	    arr[curByte++] = tmp >> 8 & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }
	  return arr;
	}
	function tripletToBase64(num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
	}
	function encodeChunk(uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('');
	}
	function fromByteArray(uint8) {
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
	    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
	  }
	  return parts.join('');
	}

	var ieee754 = {};

	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
	ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? nBytes - 1 : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];
	  i += d;
	  e = s & (1 << -nBits) - 1;
	  s >>= -nBits;
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : (s ? -1 : 1) * Infinity;
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};
	ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
	  var i = isLE ? 0 : nBytes - 1;
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	  value = Math.abs(value);
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	  buffer[offset + i - d] |= s * 128;
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */
	(function (exports) {

	  const base64 = base64Js;
	  const ieee754$1 = ieee754;
	  const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
	  ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
	  : null;
	  exports.Buffer = Buffer;
	  exports.SlowBuffer = SlowBuffer;
	  exports.INSPECT_MAX_BYTES = 50;
	  const K_MAX_LENGTH = 0x7fffffff;
	  exports.kMaxLength = K_MAX_LENGTH;

	  /**
	   * If `Buffer.TYPED_ARRAY_SUPPORT`:
	   *   === true    Use Uint8Array implementation (fastest)
	   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
	   *               implementation (most compatible, even IE6)
	   *
	   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	   * Opera 11.6+, iOS 4.2+.
	   *
	   * We report that the browser does not support typed arrays if the are not subclassable
	   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
	   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
	   * for __proto__ and has a buggy typed array implementation.
	   */
	  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
	  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
	  }
	  function typedArraySupport() {
	    // Can typed array instances can be augmented?
	    try {
	      const arr = new Uint8Array(1);
	      const proto = {
	        foo: function () {
	          return 42;
	        }
	      };
	      Object.setPrototypeOf(proto, Uint8Array.prototype);
	      Object.setPrototypeOf(arr, proto);
	      return arr.foo() === 42;
	    } catch (e) {
	      return false;
	    }
	  }
	  Object.defineProperty(Buffer.prototype, 'parent', {
	    enumerable: true,
	    get: function () {
	      if (!Buffer.isBuffer(this)) return undefined;
	      return this.buffer;
	    }
	  });
	  Object.defineProperty(Buffer.prototype, 'offset', {
	    enumerable: true,
	    get: function () {
	      if (!Buffer.isBuffer(this)) return undefined;
	      return this.byteOffset;
	    }
	  });
	  function createBuffer(length) {
	    if (length > K_MAX_LENGTH) {
	      throw new RangeError('The value "' + length + '" is invalid for option "size"');
	    }
	    // Return an augmented `Uint8Array` instance
	    const buf = new Uint8Array(length);
	    Object.setPrototypeOf(buf, Buffer.prototype);
	    return buf;
	  }

	  /**
	   * The Buffer constructor returns instances of `Uint8Array` that have their
	   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	   * returns a single octet.
	   *
	   * The `Uint8Array` prototype remains unmodified.
	   */

	  function Buffer(arg, encodingOrOffset, length) {
	    // Common case.
	    if (typeof arg === 'number') {
	      if (typeof encodingOrOffset === 'string') {
	        throw new TypeError('The "string" argument must be of type string. Received type number');
	      }
	      return allocUnsafe(arg);
	    }
	    return from(arg, encodingOrOffset, length);
	  }
	  Buffer.poolSize = 8192; // not used by this implementation

	  function from(value, encodingOrOffset, length) {
	    if (typeof value === 'string') {
	      return fromString(value, encodingOrOffset);
	    }
	    if (ArrayBuffer.isView(value)) {
	      return fromArrayView(value);
	    }
	    if (value == null) {
	      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
	    }
	    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
	      return fromArrayBuffer(value, encodingOrOffset, length);
	    }
	    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
	      return fromArrayBuffer(value, encodingOrOffset, length);
	    }
	    if (typeof value === 'number') {
	      throw new TypeError('The "value" argument must not be of type number. Received type number');
	    }
	    const valueOf = value.valueOf && value.valueOf();
	    if (valueOf != null && valueOf !== value) {
	      return Buffer.from(valueOf, encodingOrOffset, length);
	    }
	    const b = fromObject(value);
	    if (b) return b;
	    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
	      return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
	    }
	    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
	  }

	  /**
	   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	   * if value is a number.
	   * Buffer.from(str[, encoding])
	   * Buffer.from(array)
	   * Buffer.from(buffer)
	   * Buffer.from(arrayBuffer[, byteOffset[, length]])
	   **/
	  Buffer.from = function (value, encodingOrOffset, length) {
	    return from(value, encodingOrOffset, length);
	  };

	  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
	  // https://github.com/feross/buffer/pull/148
	  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
	  Object.setPrototypeOf(Buffer, Uint8Array);
	  function assertSize(size) {
	    if (typeof size !== 'number') {
	      throw new TypeError('"size" argument must be of type number');
	    } else if (size < 0) {
	      throw new RangeError('The value "' + size + '" is invalid for option "size"');
	    }
	  }
	  function alloc(size, fill, encoding) {
	    assertSize(size);
	    if (size <= 0) {
	      return createBuffer(size);
	    }
	    if (fill !== undefined) {
	      // Only pay attention to encoding if it's a string. This
	      // prevents accidentally sending in a number that would
	      // be interpreted as a start offset.
	      return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
	    }
	    return createBuffer(size);
	  }

	  /**
	   * Creates a new filled Buffer instance.
	   * alloc(size[, fill[, encoding]])
	   **/
	  Buffer.alloc = function (size, fill, encoding) {
	    return alloc(size, fill, encoding);
	  };
	  function allocUnsafe(size) {
	    assertSize(size);
	    return createBuffer(size < 0 ? 0 : checked(size) | 0);
	  }

	  /**
	   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	   * */
	  Buffer.allocUnsafe = function (size) {
	    return allocUnsafe(size);
	  };
	  /**
	   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	   */
	  Buffer.allocUnsafeSlow = function (size) {
	    return allocUnsafe(size);
	  };
	  function fromString(string, encoding) {
	    if (typeof encoding !== 'string' || encoding === '') {
	      encoding = 'utf8';
	    }
	    if (!Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding);
	    }
	    const length = byteLength(string, encoding) | 0;
	    let buf = createBuffer(length);
	    const actual = buf.write(string, encoding);
	    if (actual !== length) {
	      // Writing a hex string, for example, that contains invalid characters will
	      // cause everything after the first invalid character to be ignored. (e.g.
	      // 'abxxcd' will be treated as 'ab')
	      buf = buf.slice(0, actual);
	    }
	    return buf;
	  }
	  function fromArrayLike(array) {
	    const length = array.length < 0 ? 0 : checked(array.length) | 0;
	    const buf = createBuffer(length);
	    for (let i = 0; i < length; i += 1) {
	      buf[i] = array[i] & 255;
	    }
	    return buf;
	  }
	  function fromArrayView(arrayView) {
	    if (isInstance(arrayView, Uint8Array)) {
	      const copy = new Uint8Array(arrayView);
	      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
	    }
	    return fromArrayLike(arrayView);
	  }
	  function fromArrayBuffer(array, byteOffset, length) {
	    if (byteOffset < 0 || array.byteLength < byteOffset) {
	      throw new RangeError('"offset" is outside of buffer bounds');
	    }
	    if (array.byteLength < byteOffset + (length || 0)) {
	      throw new RangeError('"length" is outside of buffer bounds');
	    }
	    let buf;
	    if (byteOffset === undefined && length === undefined) {
	      buf = new Uint8Array(array);
	    } else if (length === undefined) {
	      buf = new Uint8Array(array, byteOffset);
	    } else {
	      buf = new Uint8Array(array, byteOffset, length);
	    }

	    // Return an augmented `Uint8Array` instance
	    Object.setPrototypeOf(buf, Buffer.prototype);
	    return buf;
	  }
	  function fromObject(obj) {
	    if (Buffer.isBuffer(obj)) {
	      const len = checked(obj.length) | 0;
	      const buf = createBuffer(len);
	      if (buf.length === 0) {
	        return buf;
	      }
	      obj.copy(buf, 0, 0, len);
	      return buf;
	    }
	    if (obj.length !== undefined) {
	      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
	        return createBuffer(0);
	      }
	      return fromArrayLike(obj);
	    }
	    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
	      return fromArrayLike(obj.data);
	    }
	  }
	  function checked(length) {
	    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
	    // length is NaN (which is otherwise coerced to zero.)
	    if (length >= K_MAX_LENGTH) {
	      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
	    }
	    return length | 0;
	  }
	  function SlowBuffer(length) {
	    if (+length != length) {
	      // eslint-disable-line eqeqeq
	      length = 0;
	    }
	    return Buffer.alloc(+length);
	  }
	  Buffer.isBuffer = function isBuffer(b) {
	    return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
	  };

	  Buffer.compare = function compare(a, b) {
	    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
	    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
	    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
	    }
	    if (a === b) return 0;
	    let x = a.length;
	    let y = b.length;
	    for (let i = 0, len = Math.min(x, y); i < len; ++i) {
	      if (a[i] !== b[i]) {
	        x = a[i];
	        y = b[i];
	        break;
	      }
	    }
	    if (x < y) return -1;
	    if (y < x) return 1;
	    return 0;
	  };
	  Buffer.isEncoding = function isEncoding(encoding) {
	    switch (String(encoding).toLowerCase()) {
	      case 'hex':
	      case 'utf8':
	      case 'utf-8':
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	      case 'base64':
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return true;
	      default:
	        return false;
	    }
	  };
	  Buffer.concat = function concat(list, length) {
	    if (!Array.isArray(list)) {
	      throw new TypeError('"list" argument must be an Array of Buffers');
	    }
	    if (list.length === 0) {
	      return Buffer.alloc(0);
	    }
	    let i;
	    if (length === undefined) {
	      length = 0;
	      for (i = 0; i < list.length; ++i) {
	        length += list[i].length;
	      }
	    }
	    const buffer = Buffer.allocUnsafe(length);
	    let pos = 0;
	    for (i = 0; i < list.length; ++i) {
	      let buf = list[i];
	      if (isInstance(buf, Uint8Array)) {
	        if (pos + buf.length > buffer.length) {
	          if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
	          buf.copy(buffer, pos);
	        } else {
	          Uint8Array.prototype.set.call(buffer, buf, pos);
	        }
	      } else if (!Buffer.isBuffer(buf)) {
	        throw new TypeError('"list" argument must be an Array of Buffers');
	      } else {
	        buf.copy(buffer, pos);
	      }
	      pos += buf.length;
	    }
	    return buffer;
	  };
	  function byteLength(string, encoding) {
	    if (Buffer.isBuffer(string)) {
	      return string.length;
	    }
	    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
	      return string.byteLength;
	    }
	    if (typeof string !== 'string') {
	      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
	    }
	    const len = string.length;
	    const mustMatch = arguments.length > 2 && arguments[2] === true;
	    if (!mustMatch && len === 0) return 0;

	    // Use a for loop to avoid recursion
	    let loweredCase = false;
	    for (;;) {
	      switch (encoding) {
	        case 'ascii':
	        case 'latin1':
	        case 'binary':
	          return len;
	        case 'utf8':
	        case 'utf-8':
	          return utf8ToBytes(string).length;
	        case 'ucs2':
	        case 'ucs-2':
	        case 'utf16le':
	        case 'utf-16le':
	          return len * 2;
	        case 'hex':
	          return len >>> 1;
	        case 'base64':
	          return base64ToBytes(string).length;
	        default:
	          if (loweredCase) {
	            return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
	          }

	          encoding = ('' + encoding).toLowerCase();
	          loweredCase = true;
	      }
	    }
	  }
	  Buffer.byteLength = byteLength;
	  function slowToString(encoding, start, end) {
	    let loweredCase = false;

	    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	    // property of a typed array.

	    // This behaves neither like String nor Uint8Array in that we set start/end
	    // to their upper/lower bounds if the value passed is out of range.
	    // undefined is handled specially as per ECMA-262 6th Edition,
	    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	    if (start === undefined || start < 0) {
	      start = 0;
	    }
	    // Return early if start > this.length. Done here to prevent potential uint32
	    // coercion fail below.
	    if (start > this.length) {
	      return '';
	    }
	    if (end === undefined || end > this.length) {
	      end = this.length;
	    }
	    if (end <= 0) {
	      return '';
	    }

	    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
	    end >>>= 0;
	    start >>>= 0;
	    if (end <= start) {
	      return '';
	    }
	    if (!encoding) encoding = 'utf8';
	    while (true) {
	      switch (encoding) {
	        case 'hex':
	          return hexSlice(this, start, end);
	        case 'utf8':
	        case 'utf-8':
	          return utf8Slice(this, start, end);
	        case 'ascii':
	          return asciiSlice(this, start, end);
	        case 'latin1':
	        case 'binary':
	          return latin1Slice(this, start, end);
	        case 'base64':
	          return base64Slice(this, start, end);
	        case 'ucs2':
	        case 'ucs-2':
	        case 'utf16le':
	        case 'utf-16le':
	          return utf16leSlice(this, start, end);
	        default:
	          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
	          encoding = (encoding + '').toLowerCase();
	          loweredCase = true;
	      }
	    }
	  }

	  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
	  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
	  // reliably in a browserify context because there could be multiple different
	  // copies of the 'buffer' package in use. This method works even for Buffer
	  // instances that were created from another copy of the `buffer` package.
	  // See: https://github.com/feross/buffer/issues/154
	  Buffer.prototype._isBuffer = true;
	  function swap(b, n, m) {
	    const i = b[n];
	    b[n] = b[m];
	    b[m] = i;
	  }
	  Buffer.prototype.swap16 = function swap16() {
	    const len = this.length;
	    if (len % 2 !== 0) {
	      throw new RangeError('Buffer size must be a multiple of 16-bits');
	    }
	    for (let i = 0; i < len; i += 2) {
	      swap(this, i, i + 1);
	    }
	    return this;
	  };
	  Buffer.prototype.swap32 = function swap32() {
	    const len = this.length;
	    if (len % 4 !== 0) {
	      throw new RangeError('Buffer size must be a multiple of 32-bits');
	    }
	    for (let i = 0; i < len; i += 4) {
	      swap(this, i, i + 3);
	      swap(this, i + 1, i + 2);
	    }
	    return this;
	  };
	  Buffer.prototype.swap64 = function swap64() {
	    const len = this.length;
	    if (len % 8 !== 0) {
	      throw new RangeError('Buffer size must be a multiple of 64-bits');
	    }
	    for (let i = 0; i < len; i += 8) {
	      swap(this, i, i + 7);
	      swap(this, i + 1, i + 6);
	      swap(this, i + 2, i + 5);
	      swap(this, i + 3, i + 4);
	    }
	    return this;
	  };
	  Buffer.prototype.toString = function toString() {
	    const length = this.length;
	    if (length === 0) return '';
	    if (arguments.length === 0) return utf8Slice(this, 0, length);
	    return slowToString.apply(this, arguments);
	  };
	  Buffer.prototype.toLocaleString = Buffer.prototype.toString;
	  Buffer.prototype.equals = function equals(b) {
	    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
	    if (this === b) return true;
	    return Buffer.compare(this, b) === 0;
	  };
	  Buffer.prototype.inspect = function inspect() {
	    let str = '';
	    const max = exports.INSPECT_MAX_BYTES;
	    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
	    if (this.length > max) str += ' ... ';
	    return '<Buffer ' + str + '>';
	  };
	  if (customInspectSymbol) {
	    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
	  }
	  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
	    if (isInstance(target, Uint8Array)) {
	      target = Buffer.from(target, target.offset, target.byteLength);
	    }
	    if (!Buffer.isBuffer(target)) {
	      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
	    }
	    if (start === undefined) {
	      start = 0;
	    }
	    if (end === undefined) {
	      end = target ? target.length : 0;
	    }
	    if (thisStart === undefined) {
	      thisStart = 0;
	    }
	    if (thisEnd === undefined) {
	      thisEnd = this.length;
	    }
	    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	      throw new RangeError('out of range index');
	    }
	    if (thisStart >= thisEnd && start >= end) {
	      return 0;
	    }
	    if (thisStart >= thisEnd) {
	      return -1;
	    }
	    if (start >= end) {
	      return 1;
	    }
	    start >>>= 0;
	    end >>>= 0;
	    thisStart >>>= 0;
	    thisEnd >>>= 0;
	    if (this === target) return 0;
	    let x = thisEnd - thisStart;
	    let y = end - start;
	    const len = Math.min(x, y);
	    const thisCopy = this.slice(thisStart, thisEnd);
	    const targetCopy = target.slice(start, end);
	    for (let i = 0; i < len; ++i) {
	      if (thisCopy[i] !== targetCopy[i]) {
	        x = thisCopy[i];
	        y = targetCopy[i];
	        break;
	      }
	    }
	    if (x < y) return -1;
	    if (y < x) return 1;
	    return 0;
	  };

	  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	  //
	  // Arguments:
	  // - buffer - a Buffer to search
	  // - val - a string, Buffer, or number
	  // - byteOffset - an index into `buffer`; will be clamped to an int32
	  // - encoding - an optional encoding, relevant is val is a string
	  // - dir - true for indexOf, false for lastIndexOf
	  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
	    // Empty buffer means no match
	    if (buffer.length === 0) return -1;

	    // Normalize byteOffset
	    if (typeof byteOffset === 'string') {
	      encoding = byteOffset;
	      byteOffset = 0;
	    } else if (byteOffset > 0x7fffffff) {
	      byteOffset = 0x7fffffff;
	    } else if (byteOffset < -0x80000000) {
	      byteOffset = -0x80000000;
	    }
	    byteOffset = +byteOffset; // Coerce to Number.
	    if (numberIsNaN(byteOffset)) {
	      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	      byteOffset = dir ? 0 : buffer.length - 1;
	    }

	    // Normalize byteOffset: negative offsets start from the end of the buffer
	    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	    if (byteOffset >= buffer.length) {
	      if (dir) return -1;else byteOffset = buffer.length - 1;
	    } else if (byteOffset < 0) {
	      if (dir) byteOffset = 0;else return -1;
	    }

	    // Normalize val
	    if (typeof val === 'string') {
	      val = Buffer.from(val, encoding);
	    }

	    // Finally, search either indexOf (if dir is true) or lastIndexOf
	    if (Buffer.isBuffer(val)) {
	      // Special case: looking for empty string/buffer always fails
	      if (val.length === 0) {
	        return -1;
	      }
	      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
	    } else if (typeof val === 'number') {
	      val = val & 0xFF; // Search for a byte value [0-255]
	      if (typeof Uint8Array.prototype.indexOf === 'function') {
	        if (dir) {
	          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
	        } else {
	          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
	        }
	      }
	      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
	    }
	    throw new TypeError('val must be string, number or Buffer');
	  }
	  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
	    let indexSize = 1;
	    let arrLength = arr.length;
	    let valLength = val.length;
	    if (encoding !== undefined) {
	      encoding = String(encoding).toLowerCase();
	      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
	        if (arr.length < 2 || val.length < 2) {
	          return -1;
	        }
	        indexSize = 2;
	        arrLength /= 2;
	        valLength /= 2;
	        byteOffset /= 2;
	      }
	    }
	    function read(buf, i) {
	      if (indexSize === 1) {
	        return buf[i];
	      } else {
	        return buf.readUInt16BE(i * indexSize);
	      }
	    }
	    let i;
	    if (dir) {
	      let foundIndex = -1;
	      for (i = byteOffset; i < arrLength; i++) {
	        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	          if (foundIndex === -1) foundIndex = i;
	          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
	        } else {
	          if (foundIndex !== -1) i -= i - foundIndex;
	          foundIndex = -1;
	        }
	      }
	    } else {
	      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	      for (i = byteOffset; i >= 0; i--) {
	        let found = true;
	        for (let j = 0; j < valLength; j++) {
	          if (read(arr, i + j) !== read(val, j)) {
	            found = false;
	            break;
	          }
	        }
	        if (found) return i;
	      }
	    }
	    return -1;
	  }
	  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
	    return this.indexOf(val, byteOffset, encoding) !== -1;
	  };
	  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
	    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
	  };
	  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
	    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
	  };
	  function hexWrite(buf, string, offset, length) {
	    offset = Number(offset) || 0;
	    const remaining = buf.length - offset;
	    if (!length) {
	      length = remaining;
	    } else {
	      length = Number(length);
	      if (length > remaining) {
	        length = remaining;
	      }
	    }
	    const strLen = string.length;
	    if (length > strLen / 2) {
	      length = strLen / 2;
	    }
	    let i;
	    for (i = 0; i < length; ++i) {
	      const parsed = parseInt(string.substr(i * 2, 2), 16);
	      if (numberIsNaN(parsed)) return i;
	      buf[offset + i] = parsed;
	    }
	    return i;
	  }
	  function utf8Write(buf, string, offset, length) {
	    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
	  }
	  function asciiWrite(buf, string, offset, length) {
	    return blitBuffer(asciiToBytes(string), buf, offset, length);
	  }
	  function base64Write(buf, string, offset, length) {
	    return blitBuffer(base64ToBytes(string), buf, offset, length);
	  }
	  function ucs2Write(buf, string, offset, length) {
	    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
	  }
	  Buffer.prototype.write = function write(string, offset, length, encoding) {
	    // Buffer#write(string)
	    if (offset === undefined) {
	      encoding = 'utf8';
	      length = this.length;
	      offset = 0;
	      // Buffer#write(string, encoding)
	    } else if (length === undefined && typeof offset === 'string') {
	      encoding = offset;
	      length = this.length;
	      offset = 0;
	      // Buffer#write(string, offset[, length][, encoding])
	    } else if (isFinite(offset)) {
	      offset = offset >>> 0;
	      if (isFinite(length)) {
	        length = length >>> 0;
	        if (encoding === undefined) encoding = 'utf8';
	      } else {
	        encoding = length;
	        length = undefined;
	      }
	    } else {
	      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
	    }
	    const remaining = this.length - offset;
	    if (length === undefined || length > remaining) length = remaining;
	    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
	      throw new RangeError('Attempt to write outside buffer bounds');
	    }
	    if (!encoding) encoding = 'utf8';
	    let loweredCase = false;
	    for (;;) {
	      switch (encoding) {
	        case 'hex':
	          return hexWrite(this, string, offset, length);
	        case 'utf8':
	        case 'utf-8':
	          return utf8Write(this, string, offset, length);
	        case 'ascii':
	        case 'latin1':
	        case 'binary':
	          return asciiWrite(this, string, offset, length);
	        case 'base64':
	          // Warning: maxLength not taken into account in base64Write
	          return base64Write(this, string, offset, length);
	        case 'ucs2':
	        case 'ucs-2':
	        case 'utf16le':
	        case 'utf-16le':
	          return ucs2Write(this, string, offset, length);
	        default:
	          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
	          encoding = ('' + encoding).toLowerCase();
	          loweredCase = true;
	      }
	    }
	  };
	  Buffer.prototype.toJSON = function toJSON() {
	    return {
	      type: 'Buffer',
	      data: Array.prototype.slice.call(this._arr || this, 0)
	    };
	  };
	  function base64Slice(buf, start, end) {
	    if (start === 0 && end === buf.length) {
	      return base64.fromByteArray(buf);
	    } else {
	      return base64.fromByteArray(buf.slice(start, end));
	    }
	  }
	  function utf8Slice(buf, start, end) {
	    end = Math.min(buf.length, end);
	    const res = [];
	    let i = start;
	    while (i < end) {
	      const firstByte = buf[i];
	      let codePoint = null;
	      let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
	      if (i + bytesPerSequence <= end) {
	        let secondByte, thirdByte, fourthByte, tempCodePoint;
	        switch (bytesPerSequence) {
	          case 1:
	            if (firstByte < 0x80) {
	              codePoint = firstByte;
	            }
	            break;
	          case 2:
	            secondByte = buf[i + 1];
	            if ((secondByte & 0xC0) === 0x80) {
	              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
	              if (tempCodePoint > 0x7F) {
	                codePoint = tempCodePoint;
	              }
	            }
	            break;
	          case 3:
	            secondByte = buf[i + 1];
	            thirdByte = buf[i + 2];
	            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
	              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	                codePoint = tempCodePoint;
	              }
	            }
	            break;
	          case 4:
	            secondByte = buf[i + 1];
	            thirdByte = buf[i + 2];
	            fourthByte = buf[i + 3];
	            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
	              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	                codePoint = tempCodePoint;
	              }
	            }
	        }
	      }
	      if (codePoint === null) {
	        // we did not generate a valid codePoint so insert a
	        // replacement char (U+FFFD) and advance only 1 byte
	        codePoint = 0xFFFD;
	        bytesPerSequence = 1;
	      } else if (codePoint > 0xFFFF) {
	        // encode to utf16 (surrogate pair dance)
	        codePoint -= 0x10000;
	        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	        codePoint = 0xDC00 | codePoint & 0x3FF;
	      }
	      res.push(codePoint);
	      i += bytesPerSequence;
	    }
	    return decodeCodePointsArray(res);
	  }

	  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
	  // the lowest limit is Chrome, with 0x10000 args.
	  // We go 1 magnitude less, for safety
	  const MAX_ARGUMENTS_LENGTH = 0x1000;
	  function decodeCodePointsArray(codePoints) {
	    const len = codePoints.length;
	    if (len <= MAX_ARGUMENTS_LENGTH) {
	      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
	    }

	    // Decode in chunks to avoid "call stack size exceeded".
	    let res = '';
	    let i = 0;
	    while (i < len) {
	      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
	    }
	    return res;
	  }
	  function asciiSlice(buf, start, end) {
	    let ret = '';
	    end = Math.min(buf.length, end);
	    for (let i = start; i < end; ++i) {
	      ret += String.fromCharCode(buf[i] & 0x7F);
	    }
	    return ret;
	  }
	  function latin1Slice(buf, start, end) {
	    let ret = '';
	    end = Math.min(buf.length, end);
	    for (let i = start; i < end; ++i) {
	      ret += String.fromCharCode(buf[i]);
	    }
	    return ret;
	  }
	  function hexSlice(buf, start, end) {
	    const len = buf.length;
	    if (!start || start < 0) start = 0;
	    if (!end || end < 0 || end > len) end = len;
	    let out = '';
	    for (let i = start; i < end; ++i) {
	      out += hexSliceLookupTable[buf[i]];
	    }
	    return out;
	  }
	  function utf16leSlice(buf, start, end) {
	    const bytes = buf.slice(start, end);
	    let res = '';
	    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
	    for (let i = 0; i < bytes.length - 1; i += 2) {
	      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	    }
	    return res;
	  }
	  Buffer.prototype.slice = function slice(start, end) {
	    const len = this.length;
	    start = ~~start;
	    end = end === undefined ? len : ~~end;
	    if (start < 0) {
	      start += len;
	      if (start < 0) start = 0;
	    } else if (start > len) {
	      start = len;
	    }
	    if (end < 0) {
	      end += len;
	      if (end < 0) end = 0;
	    } else if (end > len) {
	      end = len;
	    }
	    if (end < start) end = start;
	    const newBuf = this.subarray(start, end);
	    // Return an augmented `Uint8Array` instance
	    Object.setPrototypeOf(newBuf, Buffer.prototype);
	    return newBuf;
	  };

	  /*
	   * Need to make sure that buffer isn't trying to write out of bounds.
	   */
	  function checkOffset(offset, ext, length) {
	    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
	    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
	  }
	  Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert) checkOffset(offset, byteLength, this.length);
	    let val = this[offset];
	    let mul = 1;
	    let i = 0;
	    while (++i < byteLength && (mul *= 0x100)) {
	      val += this[offset + i] * mul;
	    }
	    return val;
	  };
	  Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert) {
	      checkOffset(offset, byteLength, this.length);
	    }
	    let val = this[offset + --byteLength];
	    let mul = 1;
	    while (byteLength > 0 && (mul *= 0x100)) {
	      val += this[offset + --byteLength] * mul;
	    }
	    return val;
	  };
	  Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 1, this.length);
	    return this[offset];
	  };
	  Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 2, this.length);
	    return this[offset] | this[offset + 1] << 8;
	  };
	  Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 2, this.length);
	    return this[offset] << 8 | this[offset + 1];
	  };
	  Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 4, this.length);
	    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
	  };
	  Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 4, this.length);
	    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
	  };
	  Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
	    offset = offset >>> 0;
	    validateNumber(offset, 'offset');
	    const first = this[offset];
	    const last = this[offset + 7];
	    if (first === undefined || last === undefined) {
	      boundsError(offset, this.length - 8);
	    }
	    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
	    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
	    return BigInt(lo) + (BigInt(hi) << BigInt(32));
	  });
	  Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
	    offset = offset >>> 0;
	    validateNumber(offset, 'offset');
	    const first = this[offset];
	    const last = this[offset + 7];
	    if (first === undefined || last === undefined) {
	      boundsError(offset, this.length - 8);
	    }
	    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
	    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
	    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
	  });
	  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert) checkOffset(offset, byteLength, this.length);
	    let val = this[offset];
	    let mul = 1;
	    let i = 0;
	    while (++i < byteLength && (mul *= 0x100)) {
	      val += this[offset + i] * mul;
	    }
	    mul *= 0x80;
	    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
	    return val;
	  };
	  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert) checkOffset(offset, byteLength, this.length);
	    let i = byteLength;
	    let mul = 1;
	    let val = this[offset + --i];
	    while (i > 0 && (mul *= 0x100)) {
	      val += this[offset + --i] * mul;
	    }
	    mul *= 0x80;
	    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
	    return val;
	  };
	  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 1, this.length);
	    if (!(this[offset] & 0x80)) return this[offset];
	    return (0xff - this[offset] + 1) * -1;
	  };
	  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 2, this.length);
	    const val = this[offset] | this[offset + 1] << 8;
	    return val & 0x8000 ? val | 0xFFFF0000 : val;
	  };
	  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 2, this.length);
	    const val = this[offset + 1] | this[offset] << 8;
	    return val & 0x8000 ? val | 0xFFFF0000 : val;
	  };
	  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 4, this.length);
	    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
	  };
	  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 4, this.length);
	    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
	  };
	  Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
	    offset = offset >>> 0;
	    validateNumber(offset, 'offset');
	    const first = this[offset];
	    const last = this[offset + 7];
	    if (first === undefined || last === undefined) {
	      boundsError(offset, this.length - 8);
	    }
	    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24); // Overflow

	    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
	  });
	  Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
	    offset = offset >>> 0;
	    validateNumber(offset, 'offset');
	    const first = this[offset];
	    const last = this[offset + 7];
	    if (first === undefined || last === undefined) {
	      boundsError(offset, this.length - 8);
	    }
	    const val = (first << 24) +
	    // Overflow
	    this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
	    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
	  });
	  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 4, this.length);
	    return ieee754$1.read(this, offset, true, 23, 4);
	  };
	  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 4, this.length);
	    return ieee754$1.read(this, offset, false, 23, 4);
	  };
	  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 8, this.length);
	    return ieee754$1.read(this, offset, true, 52, 8);
	  };
	  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
	    offset = offset >>> 0;
	    if (!noAssert) checkOffset(offset, 8, this.length);
	    return ieee754$1.read(this, offset, false, 52, 8);
	  };
	  function checkInt(buf, value, offset, ext, max, min) {
	    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
	    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
	    if (offset + ext > buf.length) throw new RangeError('Index out of range');
	  }
	  Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert) {
	      const maxBytes = Math.pow(2, 8 * byteLength) - 1;
	      checkInt(this, value, offset, byteLength, maxBytes, 0);
	    }
	    let mul = 1;
	    let i = 0;
	    this[offset] = value & 0xFF;
	    while (++i < byteLength && (mul *= 0x100)) {
	      this[offset + i] = value / mul & 0xFF;
	    }
	    return offset + byteLength;
	  };
	  Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    byteLength = byteLength >>> 0;
	    if (!noAssert) {
	      const maxBytes = Math.pow(2, 8 * byteLength) - 1;
	      checkInt(this, value, offset, byteLength, maxBytes, 0);
	    }
	    let i = byteLength - 1;
	    let mul = 1;
	    this[offset + i] = value & 0xFF;
	    while (--i >= 0 && (mul *= 0x100)) {
	      this[offset + i] = value / mul & 0xFF;
	    }
	    return offset + byteLength;
	  };
	  Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	    this[offset] = value & 0xff;
	    return offset + 1;
	  };
	  Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	    return offset + 2;
	  };
	  Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	    this[offset] = value >>> 8;
	    this[offset + 1] = value & 0xff;
	    return offset + 2;
	  };
	  Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	    this[offset + 3] = value >>> 24;
	    this[offset + 2] = value >>> 16;
	    this[offset + 1] = value >>> 8;
	    this[offset] = value & 0xff;
	    return offset + 4;
	  };
	  Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value & 0xff;
	    return offset + 4;
	  };
	  function wrtBigUInt64LE(buf, value, offset, min, max) {
	    checkIntBI(value, min, max, buf, offset, 7);
	    let lo = Number(value & BigInt(0xffffffff));
	    buf[offset++] = lo;
	    lo = lo >> 8;
	    buf[offset++] = lo;
	    lo = lo >> 8;
	    buf[offset++] = lo;
	    lo = lo >> 8;
	    buf[offset++] = lo;
	    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
	    buf[offset++] = hi;
	    hi = hi >> 8;
	    buf[offset++] = hi;
	    hi = hi >> 8;
	    buf[offset++] = hi;
	    hi = hi >> 8;
	    buf[offset++] = hi;
	    return offset;
	  }
	  function wrtBigUInt64BE(buf, value, offset, min, max) {
	    checkIntBI(value, min, max, buf, offset, 7);
	    let lo = Number(value & BigInt(0xffffffff));
	    buf[offset + 7] = lo;
	    lo = lo >> 8;
	    buf[offset + 6] = lo;
	    lo = lo >> 8;
	    buf[offset + 5] = lo;
	    lo = lo >> 8;
	    buf[offset + 4] = lo;
	    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
	    buf[offset + 3] = hi;
	    hi = hi >> 8;
	    buf[offset + 2] = hi;
	    hi = hi >> 8;
	    buf[offset + 1] = hi;
	    hi = hi >> 8;
	    buf[offset] = hi;
	    return offset + 8;
	  }
	  Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value) {
	    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
	  });
	  Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value) {
	    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
	  });
	  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) {
	      const limit = Math.pow(2, 8 * byteLength - 1);
	      checkInt(this, value, offset, byteLength, limit - 1, -limit);
	    }
	    let i = 0;
	    let mul = 1;
	    let sub = 0;
	    this[offset] = value & 0xFF;
	    while (++i < byteLength && (mul *= 0x100)) {
	      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	        sub = 1;
	      }
	      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
	    }
	    return offset + byteLength;
	  };
	  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) {
	      const limit = Math.pow(2, 8 * byteLength - 1);
	      checkInt(this, value, offset, byteLength, limit - 1, -limit);
	    }
	    let i = byteLength - 1;
	    let mul = 1;
	    let sub = 0;
	    this[offset + i] = value & 0xFF;
	    while (--i >= 0 && (mul *= 0x100)) {
	      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	        sub = 1;
	      }
	      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
	    }
	    return offset + byteLength;
	  };
	  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	    if (value < 0) value = 0xff + value + 1;
	    this[offset] = value & 0xff;
	    return offset + 1;
	  };
	  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	    return offset + 2;
	  };
	  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	    this[offset] = value >>> 8;
	    this[offset + 1] = value & 0xff;
	    return offset + 2;
	  };
	  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	    this[offset + 2] = value >>> 16;
	    this[offset + 3] = value >>> 24;
	    return offset + 4;
	  };
	  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	    if (value < 0) value = 0xffffffff + value + 1;
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value & 0xff;
	    return offset + 4;
	  };
	  Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value) {
	    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
	  });
	  Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value) {
	    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
	  });
	  function checkIEEE754(buf, value, offset, ext, max, min) {
	    if (offset + ext > buf.length) throw new RangeError('Index out of range');
	    if (offset < 0) throw new RangeError('Index out of range');
	  }
	  function writeFloat(buf, value, offset, littleEndian, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) {
	      checkIEEE754(buf, value, offset, 4);
	    }
	    ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
	    return offset + 4;
	  }
	  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
	    return writeFloat(this, value, offset, true, noAssert);
	  };
	  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
	    return writeFloat(this, value, offset, false, noAssert);
	  };
	  function writeDouble(buf, value, offset, littleEndian, noAssert) {
	    value = +value;
	    offset = offset >>> 0;
	    if (!noAssert) {
	      checkIEEE754(buf, value, offset, 8);
	    }
	    ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
	    return offset + 8;
	  }
	  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
	    return writeDouble(this, value, offset, true, noAssert);
	  };
	  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
	    return writeDouble(this, value, offset, false, noAssert);
	  };

	  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
	    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
	    if (!start) start = 0;
	    if (!end && end !== 0) end = this.length;
	    if (targetStart >= target.length) targetStart = target.length;
	    if (!targetStart) targetStart = 0;
	    if (end > 0 && end < start) end = start;

	    // Copy 0 bytes; we're done
	    if (end === start) return 0;
	    if (target.length === 0 || this.length === 0) return 0;

	    // Fatal error conditions
	    if (targetStart < 0) {
	      throw new RangeError('targetStart out of bounds');
	    }
	    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
	    if (end < 0) throw new RangeError('sourceEnd out of bounds');

	    // Are we oob?
	    if (end > this.length) end = this.length;
	    if (target.length - targetStart < end - start) {
	      end = target.length - targetStart + start;
	    }
	    const len = end - start;
	    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
	      // Use built-in when available, missing from IE11
	      this.copyWithin(targetStart, start, end);
	    } else {
	      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
	    }
	    return len;
	  };

	  // Usage:
	  //    buffer.fill(number[, offset[, end]])
	  //    buffer.fill(buffer[, offset[, end]])
	  //    buffer.fill(string[, offset[, end]][, encoding])
	  Buffer.prototype.fill = function fill(val, start, end, encoding) {
	    // Handle string cases:
	    if (typeof val === 'string') {
	      if (typeof start === 'string') {
	        encoding = start;
	        start = 0;
	        end = this.length;
	      } else if (typeof end === 'string') {
	        encoding = end;
	        end = this.length;
	      }
	      if (encoding !== undefined && typeof encoding !== 'string') {
	        throw new TypeError('encoding must be a string');
	      }
	      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	        throw new TypeError('Unknown encoding: ' + encoding);
	      }
	      if (val.length === 1) {
	        const code = val.charCodeAt(0);
	        if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
	          // Fast path: If `val` fits into a single byte, use that numeric value.
	          val = code;
	        }
	      }
	    } else if (typeof val === 'number') {
	      val = val & 255;
	    } else if (typeof val === 'boolean') {
	      val = Number(val);
	    }

	    // Invalid ranges are not set to a default, so can range check early.
	    if (start < 0 || this.length < start || this.length < end) {
	      throw new RangeError('Out of range index');
	    }
	    if (end <= start) {
	      return this;
	    }
	    start = start >>> 0;
	    end = end === undefined ? this.length : end >>> 0;
	    if (!val) val = 0;
	    let i;
	    if (typeof val === 'number') {
	      for (i = start; i < end; ++i) {
	        this[i] = val;
	      }
	    } else {
	      const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
	      const len = bytes.length;
	      if (len === 0) {
	        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
	      }
	      for (i = 0; i < end - start; ++i) {
	        this[i + start] = bytes[i % len];
	      }
	    }
	    return this;
	  };

	  // CUSTOM ERRORS
	  // =============

	  // Simplified versions from Node, changed for Buffer-only usage
	  const errors = {};
	  function E(sym, getMessage, Base) {
	    errors[sym] = class NodeError extends Base {
	      constructor() {
	        super();
	        Object.defineProperty(this, 'message', {
	          value: getMessage.apply(this, arguments),
	          writable: true,
	          configurable: true
	        });

	        // Add the error code to the name to include it in the stack trace.
	        this.name = `${this.name} [${sym}]`;
	        // Access the stack to generate the error message including the error code
	        // from the name.
	        this.stack; // eslint-disable-line no-unused-expressions
	        // Reset the name to the actual name.
	        delete this.name;
	      }
	      get code() {
	        return sym;
	      }
	      set code(value) {
	        Object.defineProperty(this, 'code', {
	          configurable: true,
	          enumerable: true,
	          value,
	          writable: true
	        });
	      }
	      toString() {
	        return `${this.name} [${sym}]: ${this.message}`;
	      }
	    };
	  }
	  E('ERR_BUFFER_OUT_OF_BOUNDS', function (name) {
	    if (name) {
	      return `${name} is outside of buffer bounds`;
	    }
	    return 'Attempt to access memory outside buffer bounds';
	  }, RangeError);
	  E('ERR_INVALID_ARG_TYPE', function (name, actual) {
	    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
	  }, TypeError);
	  E('ERR_OUT_OF_RANGE', function (str, range, input) {
	    let msg = `The value of "${str}" is out of range.`;
	    let received = input;
	    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
	      received = addNumericalSeparator(String(input));
	    } else if (typeof input === 'bigint') {
	      received = String(input);
	      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
	        received = addNumericalSeparator(received);
	      }
	      received += 'n';
	    }
	    msg += ` It must be ${range}. Received ${received}`;
	    return msg;
	  }, RangeError);
	  function addNumericalSeparator(val) {
	    let res = '';
	    let i = val.length;
	    const start = val[0] === '-' ? 1 : 0;
	    for (; i >= start + 4; i -= 3) {
	      res = `_${val.slice(i - 3, i)}${res}`;
	    }
	    return `${val.slice(0, i)}${res}`;
	  }

	  // CHECK FUNCTIONS
	  // ===============

	  function checkBounds(buf, offset, byteLength) {
	    validateNumber(offset, 'offset');
	    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
	      boundsError(offset, buf.length - (byteLength + 1));
	    }
	  }
	  function checkIntBI(value, min, max, buf, offset, byteLength) {
	    if (value > max || value < min) {
	      const n = typeof min === 'bigint' ? 'n' : '';
	      let range;
	      if (byteLength > 3) {
	        if (min === 0 || min === BigInt(0)) {
	          range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
	        } else {
	          range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
	        }
	      } else {
	        range = `>= ${min}${n} and <= ${max}${n}`;
	      }
	      throw new errors.ERR_OUT_OF_RANGE('value', range, value);
	    }
	    checkBounds(buf, offset, byteLength);
	  }
	  function validateNumber(value, name) {
	    if (typeof value !== 'number') {
	      throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
	    }
	  }
	  function boundsError(value, length, type) {
	    if (Math.floor(value) !== value) {
	      validateNumber(value, type);
	      throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
	    }
	    if (length < 0) {
	      throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
	    }
	    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
	  }

	  // HELPER FUNCTIONS
	  // ================

	  const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
	  function base64clean(str) {
	    // Node takes equal signs as end of the Base64 encoding
	    str = str.split('=')[0];
	    // Node strips out invalid characters like \n and \t from the string, base64-js does not
	    str = str.trim().replace(INVALID_BASE64_RE, '');
	    // Node converts strings with length < 2 to ''
	    if (str.length < 2) return '';
	    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	    while (str.length % 4 !== 0) {
	      str = str + '=';
	    }
	    return str;
	  }
	  function utf8ToBytes(string, units) {
	    units = units || Infinity;
	    let codePoint;
	    const length = string.length;
	    let leadSurrogate = null;
	    const bytes = [];
	    for (let i = 0; i < length; ++i) {
	      codePoint = string.charCodeAt(i);

	      // is surrogate component
	      if (codePoint > 0xD7FF && codePoint < 0xE000) {
	        // last char was a lead
	        if (!leadSurrogate) {
	          // no lead yet
	          if (codePoint > 0xDBFF) {
	            // unexpected trail
	            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	            continue;
	          } else if (i + 1 === length) {
	            // unpaired lead
	            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	            continue;
	          }

	          // valid lead
	          leadSurrogate = codePoint;
	          continue;
	        }

	        // 2 leads in a row
	        if (codePoint < 0xDC00) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          leadSurrogate = codePoint;
	          continue;
	        }

	        // valid surrogate pair
	        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	      } else if (leadSurrogate) {
	        // valid bmp char, but last char was a lead
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	      }
	      leadSurrogate = null;

	      // encode utf8
	      if (codePoint < 0x80) {
	        if ((units -= 1) < 0) break;
	        bytes.push(codePoint);
	      } else if (codePoint < 0x800) {
	        if ((units -= 2) < 0) break;
	        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
	      } else if (codePoint < 0x10000) {
	        if ((units -= 3) < 0) break;
	        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
	      } else if (codePoint < 0x110000) {
	        if ((units -= 4) < 0) break;
	        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
	      } else {
	        throw new Error('Invalid code point');
	      }
	    }
	    return bytes;
	  }
	  function asciiToBytes(str) {
	    const byteArray = [];
	    for (let i = 0; i < str.length; ++i) {
	      // Node's code seems to be doing this and not & 0x7F..
	      byteArray.push(str.charCodeAt(i) & 0xFF);
	    }
	    return byteArray;
	  }
	  function utf16leToBytes(str, units) {
	    let c, hi, lo;
	    const byteArray = [];
	    for (let i = 0; i < str.length; ++i) {
	      if ((units -= 2) < 0) break;
	      c = str.charCodeAt(i);
	      hi = c >> 8;
	      lo = c % 256;
	      byteArray.push(lo);
	      byteArray.push(hi);
	    }
	    return byteArray;
	  }
	  function base64ToBytes(str) {
	    return base64.toByteArray(base64clean(str));
	  }
	  function blitBuffer(src, dst, offset, length) {
	    let i;
	    for (i = 0; i < length; ++i) {
	      if (i + offset >= dst.length || i >= src.length) break;
	      dst[i + offset] = src[i];
	    }
	    return i;
	  }

	  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
	  // the `instanceof` check but they should be treated as of that type.
	  // See: https://github.com/feross/buffer/issues/166
	  function isInstance(obj, type) {
	    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
	  }
	  function numberIsNaN(obj) {
	    // For IE11 support
	    return obj !== obj; // eslint-disable-line no-self-compare
	  }

	  // Create lookup table for `toString('hex')`
	  // See: https://github.com/feross/buffer/issues/219
	  const hexSliceLookupTable = function () {
	    const alphabet = '0123456789abcdef';
	    const table = new Array(256);
	    for (let i = 0; i < 16; ++i) {
	      const i16 = i * 16;
	      for (let j = 0; j < 16; ++j) {
	        table[i16 + j] = alphabet[i] + alphabet[j];
	      }
	    }
	    return table;
	  }();

	  // Return not function with Error if BigInt not supported
	  function defineBigIntMethod(fn) {
	    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
	  }
	  function BufferBigIntNotDefined() {
	    throw new Error('BigInt not supported');
	  }
	})(buffer);

	/**
	 * Built on top of rlp library, removing the BN dependency for the flow.
	 * Package : https://github.com/ethereumjs/rlp
	 * RLP License : https://github.com/ethereumjs/rlp/blob/master/LICENSE
	 *
	 * ethereumjs/rlp is licensed under the
	 * Mozilla Public License 2.0
	 * Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.
	 **/

	/**
	 * @param input - will be converted to buffer
	 * @returns returns buffer of encoded data
	 **/
	function encode(input) {
	  if (Array.isArray(input)) {
	    var output = [];
	    for (var i = 0; i < input.length; i++) {
	      output.push(encode(input[i]));
	    }
	    var buf = buffer.Buffer.concat(output);
	    return buffer.Buffer.concat([encodeLength(buf.length, 192), buf]);
	  } else {
	    var inputBuf = toBuffer(input);
	    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : buffer.Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
	  }
	}
	function encodeLength(len, offset) {
	  if (len < 56) {
	    return buffer.Buffer.from([len + offset]);
	  } else {
	    var hexLength = intToHex(len);
	    var lLength = hexLength.length / 2;
	    var firstByte = intToHex(offset + 55 + lLength);
	    return buffer.Buffer.from(firstByte + hexLength, "hex");
	  }
	}
	/** Check if a string is prefixed by 0x */
	function isHexPrefixed(str) {
	  return str.slice(0, 2) === "0x";
	}
	/** Removes 0x from a given String */
	function stripHexPrefix(str) {
	  if (typeof str !== "string") {
	    return str;
	  }
	  return isHexPrefixed(str) ? str.slice(2) : str;
	}
	/** Transform an integer into its hexadecimal value */
	function intToHex(integer) {
	  if (integer < 0) {
	    throw new Error("Invalid integer as argument, must be unsigned!");
	  }
	  var hex = integer.toString(16);
	  return hex.length % 2 ? "0" + hex : hex;
	}
	/** Pad a string to be even */
	function padToEven(a) {
	  return a.length % 2 ? "0" + a : a;
	}
	/** Transform an integer into a Buffer */
	function intToBuffer(integer) {
	  var hex = intToHex(integer);
	  return buffer.Buffer.from(hex, "hex");
	}

	/** Transform anything into a Buffer */
	function toBuffer(v) {
	  if (!buffer.Buffer.isBuffer(v)) {
	    if (typeof v === "string") {
	      if (isHexPrefixed(v)) {
	        return buffer.Buffer.from(padToEven(stripHexPrefix(v)), "hex");
	      } else {
	        return buffer.Buffer.from(v);
	      }
	    } else if (typeof v === "number") {
	      if (!v) {
	        return buffer.Buffer.from([]);
	      } else {
	        return intToBuffer(v);
	      }
	    } else if (v === null || v === undefined) {
	      return buffer.Buffer.from([]);
	    } else if (v instanceof Uint8Array) {
	      return buffer.Buffer.from(v);
	    } else {
	      throw new Error("invalid type");
	    }
	  }
	  return v;
	}

	var browserPonyfill = {exports: {}};

	(function (module, exports) {
	  var global = typeof self !== 'undefined' ? self : commonjsGlobal$1;
	  var __self__ = function () {
	    function F() {
	      this.fetch = false;
	      this.DOMException = global.DOMException;
	    }
	    F.prototype = global;
	    return new F();
	  }();
	  (function (self) {
	    (function (exports) {
	      var support = {
	        searchParams: 'URLSearchParams' in self,
	        iterable: 'Symbol' in self && 'iterator' in Symbol,
	        blob: 'FileReader' in self && 'Blob' in self && function () {
	          try {
	            new Blob();
	            return true;
	          } catch (e) {
	            return false;
	          }
	        }(),
	        formData: 'FormData' in self,
	        arrayBuffer: 'ArrayBuffer' in self
	      };
	      function isDataView(obj) {
	        return obj && DataView.prototype.isPrototypeOf(obj);
	      }
	      if (support.arrayBuffer) {
	        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];
	        var isArrayBufferView = ArrayBuffer.isView || function (obj) {
	          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
	        };
	      }
	      function normalizeName(name) {
	        if (typeof name !== 'string') {
	          name = String(name);
	        }
	        if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
	          throw new TypeError('Invalid character in header field name');
	        }
	        return name.toLowerCase();
	      }
	      function normalizeValue(value) {
	        if (typeof value !== 'string') {
	          value = String(value);
	        }
	        return value;
	      }

	      // Build a destructive iterator for the value list
	      function iteratorFor(items) {
	        var iterator = {
	          next: function () {
	            var value = items.shift();
	            return {
	              done: value === undefined,
	              value: value
	            };
	          }
	        };
	        if (support.iterable) {
	          iterator[Symbol.iterator] = function () {
	            return iterator;
	          };
	        }
	        return iterator;
	      }
	      function Headers(headers) {
	        this.map = {};
	        if (headers instanceof Headers) {
	          headers.forEach(function (value, name) {
	            this.append(name, value);
	          }, this);
	        } else if (Array.isArray(headers)) {
	          headers.forEach(function (header) {
	            this.append(header[0], header[1]);
	          }, this);
	        } else if (headers) {
	          Object.getOwnPropertyNames(headers).forEach(function (name) {
	            this.append(name, headers[name]);
	          }, this);
	        }
	      }
	      Headers.prototype.append = function (name, value) {
	        name = normalizeName(name);
	        value = normalizeValue(value);
	        var oldValue = this.map[name];
	        this.map[name] = oldValue ? oldValue + ', ' + value : value;
	      };
	      Headers.prototype['delete'] = function (name) {
	        delete this.map[normalizeName(name)];
	      };
	      Headers.prototype.get = function (name) {
	        name = normalizeName(name);
	        return this.has(name) ? this.map[name] : null;
	      };
	      Headers.prototype.has = function (name) {
	        return this.map.hasOwnProperty(normalizeName(name));
	      };
	      Headers.prototype.set = function (name, value) {
	        this.map[normalizeName(name)] = normalizeValue(value);
	      };
	      Headers.prototype.forEach = function (callback, thisArg) {
	        for (var name in this.map) {
	          if (this.map.hasOwnProperty(name)) {
	            callback.call(thisArg, this.map[name], name, this);
	          }
	        }
	      };
	      Headers.prototype.keys = function () {
	        var items = [];
	        this.forEach(function (value, name) {
	          items.push(name);
	        });
	        return iteratorFor(items);
	      };
	      Headers.prototype.values = function () {
	        var items = [];
	        this.forEach(function (value) {
	          items.push(value);
	        });
	        return iteratorFor(items);
	      };
	      Headers.prototype.entries = function () {
	        var items = [];
	        this.forEach(function (value, name) {
	          items.push([name, value]);
	        });
	        return iteratorFor(items);
	      };
	      if (support.iterable) {
	        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
	      }
	      function consumed(body) {
	        if (body.bodyUsed) {
	          return Promise.reject(new TypeError('Already read'));
	        }
	        body.bodyUsed = true;
	      }
	      function fileReaderReady(reader) {
	        return new Promise(function (resolve, reject) {
	          reader.onload = function () {
	            resolve(reader.result);
	          };
	          reader.onerror = function () {
	            reject(reader.error);
	          };
	        });
	      }
	      function readBlobAsArrayBuffer(blob) {
	        var reader = new FileReader();
	        var promise = fileReaderReady(reader);
	        reader.readAsArrayBuffer(blob);
	        return promise;
	      }
	      function readBlobAsText(blob) {
	        var reader = new FileReader();
	        var promise = fileReaderReady(reader);
	        reader.readAsText(blob);
	        return promise;
	      }
	      function readArrayBufferAsText(buf) {
	        var view = new Uint8Array(buf);
	        var chars = new Array(view.length);
	        for (var i = 0; i < view.length; i++) {
	          chars[i] = String.fromCharCode(view[i]);
	        }
	        return chars.join('');
	      }
	      function bufferClone(buf) {
	        if (buf.slice) {
	          return buf.slice(0);
	        } else {
	          var view = new Uint8Array(buf.byteLength);
	          view.set(new Uint8Array(buf));
	          return view.buffer;
	        }
	      }
	      function Body() {
	        this.bodyUsed = false;
	        this._initBody = function (body) {
	          this._bodyInit = body;
	          if (!body) {
	            this._bodyText = '';
	          } else if (typeof body === 'string') {
	            this._bodyText = body;
	          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	            this._bodyBlob = body;
	          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	            this._bodyFormData = body;
	          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	            this._bodyText = body.toString();
	          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	            this._bodyArrayBuffer = bufferClone(body.buffer);
	            // IE 10-11 can't handle a DataView body.
	            this._bodyInit = new Blob([this._bodyArrayBuffer]);
	          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	            this._bodyArrayBuffer = bufferClone(body);
	          } else {
	            this._bodyText = body = Object.prototype.toString.call(body);
	          }
	          if (!this.headers.get('content-type')) {
	            if (typeof body === 'string') {
	              this.headers.set('content-type', 'text/plain;charset=UTF-8');
	            } else if (this._bodyBlob && this._bodyBlob.type) {
	              this.headers.set('content-type', this._bodyBlob.type);
	            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	            }
	          }
	        };
	        if (support.blob) {
	          this.blob = function () {
	            var rejected = consumed(this);
	            if (rejected) {
	              return rejected;
	            }
	            if (this._bodyBlob) {
	              return Promise.resolve(this._bodyBlob);
	            } else if (this._bodyArrayBuffer) {
	              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
	            } else if (this._bodyFormData) {
	              throw new Error('could not read FormData body as blob');
	            } else {
	              return Promise.resolve(new Blob([this._bodyText]));
	            }
	          };
	          this.arrayBuffer = function () {
	            if (this._bodyArrayBuffer) {
	              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
	            } else {
	              return this.blob().then(readBlobAsArrayBuffer);
	            }
	          };
	        }
	        this.text = function () {
	          var rejected = consumed(this);
	          if (rejected) {
	            return rejected;
	          }
	          if (this._bodyBlob) {
	            return readBlobAsText(this._bodyBlob);
	          } else if (this._bodyArrayBuffer) {
	            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
	          } else if (this._bodyFormData) {
	            throw new Error('could not read FormData body as text');
	          } else {
	            return Promise.resolve(this._bodyText);
	          }
	        };
	        if (support.formData) {
	          this.formData = function () {
	            return this.text().then(decode);
	          };
	        }
	        this.json = function () {
	          return this.text().then(JSON.parse);
	        };
	        return this;
	      }

	      // HTTP methods whose capitalization should be normalized
	      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];
	      function normalizeMethod(method) {
	        var upcased = method.toUpperCase();
	        return methods.indexOf(upcased) > -1 ? upcased : method;
	      }
	      function Request(input, options) {
	        options = options || {};
	        var body = options.body;
	        if (input instanceof Request) {
	          if (input.bodyUsed) {
	            throw new TypeError('Already read');
	          }
	          this.url = input.url;
	          this.credentials = input.credentials;
	          if (!options.headers) {
	            this.headers = new Headers(input.headers);
	          }
	          this.method = input.method;
	          this.mode = input.mode;
	          this.signal = input.signal;
	          if (!body && input._bodyInit != null) {
	            body = input._bodyInit;
	            input.bodyUsed = true;
	          }
	        } else {
	          this.url = String(input);
	        }
	        this.credentials = options.credentials || this.credentials || 'same-origin';
	        if (options.headers || !this.headers) {
	          this.headers = new Headers(options.headers);
	        }
	        this.method = normalizeMethod(options.method || this.method || 'GET');
	        this.mode = options.mode || this.mode || null;
	        this.signal = options.signal || this.signal;
	        this.referrer = null;
	        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	          throw new TypeError('Body not allowed for GET or HEAD requests');
	        }
	        this._initBody(body);
	      }
	      Request.prototype.clone = function () {
	        return new Request(this, {
	          body: this._bodyInit
	        });
	      };
	      function decode(body) {
	        var form = new FormData();
	        body.trim().split('&').forEach(function (bytes) {
	          if (bytes) {
	            var split = bytes.split('=');
	            var name = split.shift().replace(/\+/g, ' ');
	            var value = split.join('=').replace(/\+/g, ' ');
	            form.append(decodeURIComponent(name), decodeURIComponent(value));
	          }
	        });
	        return form;
	      }
	      function parseHeaders(rawHeaders) {
	        var headers = new Headers();
	        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	        // https://tools.ietf.org/html/rfc7230#section-3.2
	        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
	        preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
	          var parts = line.split(':');
	          var key = parts.shift().trim();
	          if (key) {
	            var value = parts.join(':').trim();
	            headers.append(key, value);
	          }
	        });
	        return headers;
	      }
	      Body.call(Request.prototype);
	      function Response(bodyInit, options) {
	        if (!options) {
	          options = {};
	        }
	        this.type = 'default';
	        this.status = options.status === undefined ? 200 : options.status;
	        this.ok = this.status >= 200 && this.status < 300;
	        this.statusText = 'statusText' in options ? options.statusText : 'OK';
	        this.headers = new Headers(options.headers);
	        this.url = options.url || '';
	        this._initBody(bodyInit);
	      }
	      Body.call(Response.prototype);
	      Response.prototype.clone = function () {
	        return new Response(this._bodyInit, {
	          status: this.status,
	          statusText: this.statusText,
	          headers: new Headers(this.headers),
	          url: this.url
	        });
	      };
	      Response.error = function () {
	        var response = new Response(null, {
	          status: 0,
	          statusText: ''
	        });
	        response.type = 'error';
	        return response;
	      };
	      var redirectStatuses = [301, 302, 303, 307, 308];
	      Response.redirect = function (url, status) {
	        if (redirectStatuses.indexOf(status) === -1) {
	          throw new RangeError('Invalid status code');
	        }
	        return new Response(null, {
	          status: status,
	          headers: {
	            location: url
	          }
	        });
	      };
	      exports.DOMException = self.DOMException;
	      try {
	        new exports.DOMException();
	      } catch (err) {
	        exports.DOMException = function (message, name) {
	          this.message = message;
	          this.name = name;
	          var error = Error(message);
	          this.stack = error.stack;
	        };
	        exports.DOMException.prototype = Object.create(Error.prototype);
	        exports.DOMException.prototype.constructor = exports.DOMException;
	      }
	      function fetch(input, init) {
	        return new Promise(function (resolve, reject) {
	          var request = new Request(input, init);
	          if (request.signal && request.signal.aborted) {
	            return reject(new exports.DOMException('Aborted', 'AbortError'));
	          }
	          var xhr = new XMLHttpRequest();
	          function abortXhr() {
	            xhr.abort();
	          }
	          xhr.onload = function () {
	            var options = {
	              status: xhr.status,
	              statusText: xhr.statusText,
	              headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	            };
	            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
	            var body = 'response' in xhr ? xhr.response : xhr.responseText;
	            resolve(new Response(body, options));
	          };
	          xhr.onerror = function () {
	            reject(new TypeError('Network request failed'));
	          };
	          xhr.ontimeout = function () {
	            reject(new TypeError('Network request failed'));
	          };
	          xhr.onabort = function () {
	            reject(new exports.DOMException('Aborted', 'AbortError'));
	          };
	          xhr.open(request.method, request.url, true);
	          if (request.credentials === 'include') {
	            xhr.withCredentials = true;
	          } else if (request.credentials === 'omit') {
	            xhr.withCredentials = false;
	          }
	          if ('responseType' in xhr && support.blob) {
	            xhr.responseType = 'blob';
	          }
	          request.headers.forEach(function (value, name) {
	            xhr.setRequestHeader(name, value);
	          });
	          if (request.signal) {
	            request.signal.addEventListener('abort', abortXhr);
	            xhr.onreadystatechange = function () {
	              // DONE (success or failure)
	              if (xhr.readyState === 4) {
	                request.signal.removeEventListener('abort', abortXhr);
	              }
	            };
	          }
	          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
	        });
	      }
	      fetch.polyfill = true;
	      if (!self.fetch) {
	        self.fetch = fetch;
	        self.Headers = Headers;
	        self.Request = Request;
	        self.Response = Response;
	      }
	      exports.Headers = Headers;
	      exports.Request = Request;
	      exports.Response = Response;
	      exports.fetch = fetch;
	      Object.defineProperty(exports, '__esModule', {
	        value: true
	      });
	      return exports;
	    })({});
	  })(__self__);
	  __self__.fetch.ponyfill = true;
	  // Remove "polyfill" property added by whatwg-fetch
	  delete __self__.fetch.polyfill;
	  // Choose between native implementation (global) or custom implementation (__self__)
	  // var ctx = global.fetch ? global : __self__;
	  var ctx = __self__; // this line disable service worker support temporarily
	  exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
	  exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
	  exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
	  exports.Headers = ctx.Headers;
	  exports.Request = ctx.Request;
	  exports.Response = ctx.Response;
	  module.exports = exports;
	})(browserPonyfill, browserPonyfill.exports);
	var fetchTransport = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);

	/**
	 * @description Removes 0x from address if present
	 * @param {string} address - Flow address
	 * @returns {string} - Flow address without 0x prefix
	 */
	function sansPrefix(address) {
	  if (address == null) return null;
	  return address.replace(/^0x/, "").replace(/^Fx/, "");
	}

	/**
	 * @description Adds 0x to address if not already present
	 * @param {string} address - Flow address
	 * @returns {string} - Flow address with 0x prefix
	 */
	function withPrefix$1(address) {
	  if (address == null) return null;
	  return "0x" + sansPrefix(address);
	}

	const AbortController = globalThis.AbortController || require("abort-controller");
	class HTTPRequestError extends Error {
	  constructor(_ref) {
	    let {
	      error,
	      hostname,
	      path,
	      method,
	      requestBody,
	      responseBody,
	      responseStatusText,
	      statusCode
	    } = _ref;
	    const msg = `
      HTTP Request Error: An error occurred when interacting with the Access API.
      ${error ? `error=${error}` : ""}
      ${hostname ? `hostname=${hostname}` : ""}
      ${path ? `path=${path}` : ""}
      ${method ? `method=${method}` : ""}
      ${requestBody ? `requestBody=${requestBody}` : ""}
      ${responseBody ? `responseBody=${responseBody}` : ""}
      ${responseStatusText ? `responseStatusText=${responseStatusText}` : ""}
      ${statusCode ? `statusCode=${statusCode}` : ""}
    `;
	    super(msg);
	    this.name = "HTTP Request Error";
	    this.statusCode = statusCode;
	    this.errorMessage = error;
	  }
	}

	/**
	 * Creates an HTTP Request to be sent to a REST Access API via Fetch API.
	 *
	 * @param {object} options - Options for the HTTP Request
	 * @param {String} options.hostname - Access API Hostname
	 * @param {String} options.path - Path to the resource on the Access API
	 * @param {String} options.method - HTTP Method
	 * @param {object} options.body - HTTP Request Body
	 * @param {object} [options.headers] - HTTP Request Headers
	 *
	 * @returns JSON object response from Access API.
	 */
	async function httpRequest(_ref2) {
	  let {
	    hostname,
	    path,
	    method,
	    body,
	    headers,
	    retryLimit = 5,
	    retryIntervalMs = 1000,
	    timeoutLimit = 30000
	  } = _ref2;
	  const bodyJSON = body ? JSON.stringify(body) : null;
	  function makeRequest() {
	    const controller = new AbortController();
	    const fetchTimeout = setTimeout(() => {
	      controller.abort();
	    }, timeoutLimit);
	    return fetchTransport(`${hostname}${path}`, {
	      method: method,
	      body: bodyJSON,
	      headers,
	      signal: controller.signal
	    }).then(async res => {
	      if (res.ok) {
	        return res.json();
	      }
	      const responseText = res.body ? await res.text() : null;
	      const response = safeParseJSON(responseText);
	      throw new HTTPRequestError({
	        error: response?.message,
	        hostname,
	        path,
	        method,
	        requestBody: bodyJSON,
	        responseBody: responseText,
	        responseStatusText: res.statusText,
	        statusCode: res.status
	      });
	    }).catch(async e => {
	      if (e instanceof HTTPRequestError) {
	        throw e;
	      }
	      if (e.name === "AbortError") {
	        throw e;
	      }

	      // Show AN error for all network errors
	      await log$2({
	        title: "Access Node Error",
	        message: `The provided access node ${hostname} does not appear to be a valid REST/HTTP access node.
Please verify that you are not unintentionally using a GRPC access node.
See more here: https://docs.onflow.org/fcl/reference/sdk-guidelines/#connect`,
	        level: LEVELS$2.error
	      });
	      throw new HTTPRequestError({
	        error: e?.message,
	        hostname,
	        path,
	        method,
	        requestBody: bodyJSON
	      });
	    }).finally(() => {
	      clearTimeout(fetchTimeout);
	    });
	  }
	  async function requestLoop() {
	    let retryAttempt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	    try {
	      const resp = await makeRequest();
	      return resp;
	    } catch (error) {
	      const retryStatusCodes = [408, 429, 500, 502, 503, 504];
	      if (error.name === "AbortError" || retryStatusCodes.includes(error.statusCode)) {
	        return await new Promise((resolve, reject) => {
	          if (retryAttempt < retryLimit) {
	            console.warn(`Access node unavailable, retrying in ${retryIntervalMs} ms...`);
	            setTimeout(() => {
	              resolve(requestLoop(retryAttempt + 1));
	            }, retryIntervalMs);
	          } else {
	            reject(error);
	          }
	        });
	      } else {
	        throw error;
	      }
	    }
	  }

	  // Keep retrying request until server available or max attempts exceeded
	  return await requestLoop();
	}
	function safeParseJSON(data) {
	  try {
	    return JSON.parse(data);
	  } catch {
	    return null;
	  }
	}
	async function sendExecuteScriptAtBlockIDRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/scripts?block_id=${ix.block.id}`,
	    method: "POST",
	    body: {
	      script: context.Buffer.from(ix.message.cadence).toString("base64"),
	      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString("base64"))
	    }
	  });
	  return constructResponse$4(ix, context, res);
	}
	async function sendExecuteScriptAtBlockHeightRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/scripts?block_height=${ix.block.height}`,
	    method: "POST",
	    body: {
	      script: context.Buffer.from(ix.message.cadence).toString("base64"),
	      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString("base64"))
	    }
	  });
	  return constructResponse$4(ix, context, res);
	}
	async function sendExecuteScriptAtLatestBlockRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/scripts?block_height=sealed`,
	    method: "POST",
	    body: {
	      script: context.Buffer.from(ix.message.cadence).toString("base64"),
	      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString("base64"))
	    }
	  });
	  return constructResponse$4(ix, context, res);
	}
	function constructResponse$4(ix, context, res) {
	  let ret = context.response();
	  ret.tag = ix.tag;
	  ret.encodedData = JSON.parse(context.Buffer.from(res, "base64").toString());
	  return ret;
	}
	async function sendExecuteScript(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Execute Script Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Execute Script Error: context.response must be defined.`);
	  invariant$3(context.Buffer, `SDK Send Execute Script Error: context.Buffer must be defined.`);
	  ix = await ix;
	  if (ix.block.id) {
	    return await sendExecuteScriptAtBlockIDRequest(ix, context, opts);
	  } else if (ix.block.height) {
	    return await sendExecuteScriptAtBlockHeightRequest(ix, context, opts);
	  } else {
	    return await sendExecuteScriptAtLatestBlockRequest(ix, context, opts);
	  }
	}
	const HashAlgorithmIDs = {
	  SHA2_256: 1,
	  SHA2_384: 2,
	  SHA3_256: 3,
	  SHA3_384: 4,
	  KMAC128_BLS_BLS12_381: 5
	};
	const SignatureAlgorithmIDs = {
	  ECDSA_P256: 1,
	  ECDSA_secp256k1: 2,
	  BLS_BLS12_381: 3
	};
	async function sendGetAccountAtBlockHeightRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.height}&expand=contracts,keys`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse$3(ix, context, res);
	}
	async function sendGetAccountAtLatestBlockRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/accounts/${ix.account.addr}?block_height=sealed&expand=contracts,keys`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse$3(ix, context, res);
	}
	function constructResponse$3(ix, context, res) {
	  let ret = context.response();
	  ret.tag = ix.tag;
	  const unwrapContracts = contracts => {
	    const c = {};
	    if (!contracts) return c;
	    for (let key of Object.keys(contracts)) {
	      c[key] = context.Buffer.from(contracts[key], "base64").toString();
	    }
	    return c;
	  };
	  ret.account = {
	    address: res.address,
	    balance: Number(res.balance),
	    code: "",
	    contracts: unwrapContracts(res.contracts),
	    keys: res.keys?.map(key => ({
	      index: Number(key.index),
	      publicKey: key.public_key.replace(/^0x/, ""),
	      signAlgo: SignatureAlgorithmIDs[key.signing_algorithm],
	      signAlgoString: key.signing_algorithm,
	      hashAlgo: HashAlgorithmIDs[key.hashing_algorithm],
	      hashAlgoString: key.hashing_algorithm,
	      sequenceNumber: Number(key.sequence_number),
	      weight: Number(key.weight),
	      revoked: key.revoked
	    })) ?? []
	  };
	  return ret;
	}
	async function sendGetAccount(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Get Account Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Get Account Error: context.response must be defined.`);
	  invariant$3(context.Buffer, `SDK Send Get Account Error: context.Buffer must be defined.`);
	  ix = await ix;
	  if (ix.block.height !== null) {
	    return await sendGetAccountAtBlockHeightRequest(ix, context, opts);
	  } else {
	    return await sendGetAccountAtLatestBlockRequest(ix, context, opts);
	  }
	}
	async function sendGetBlockHeaderByIDRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/blocks/${ix.block.id}`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse$2(ix, context, res);
	}
	async function sendGetBlockHeaderByHeightRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/blocks?height=${ix.block.height}`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse$2(ix, context, res);
	}
	async function sendGetLatestBlockHeaderRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const height = ix.block?.isSealed ? "sealed" : "final";
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/blocks?height=${height}`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse$2(ix, context, res);
	}
	function constructResponse$2(ix, context, res) {
	  const block = res.length ? res[0] : null;
	  const ret = context.response();
	  ret.tag = ix.tag;
	  ret.blockHeader = {
	    id: block.header.id,
	    parentId: block.header.parent_id,
	    height: Number(block.header.height),
	    timestamp: block.header.timestamp
	  };
	  return ret;
	}
	async function sendGetBlockHeader(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Get Block Header Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Get Block Header Error: context.response must be defined.`);
	  ix = await ix;
	  const interactionHasBlockID = ix.block.id !== null;
	  const interactionHasBlockHeight = ix.block.height !== null;
	  if (interactionHasBlockID) {
	    return await sendGetBlockHeaderByIDRequest(ix, context, opts);
	  } else if (interactionHasBlockHeight) {
	    return await sendGetBlockHeaderByHeightRequest(ix, context, opts);
	  } else {
	    return await sendGetLatestBlockHeaderRequest(ix, context, opts);
	  }
	}
	async function sendGetBlockByIDRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/blocks/${ix.block.id}?expand=payload`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse$1(ix, context, res);
	}
	async function sendGetBlockByHeightRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/blocks?height=${ix.block.height}&expand=payload`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse$1(ix, context, res);
	}
	async function sendGetBlockRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const height = ix.block?.isSealed ? "sealed" : "final";
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/blocks?height=${height}&expand=payload`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse$1(ix, context, res);
	}
	function constructResponse$1(ix, context, res) {
	  const block = res.length ? res[0] : null;
	  const ret = context.response();
	  ret.tag = ix.tag;
	  ret.block = {
	    id: block.header.id,
	    parentId: block.header.parent_id,
	    height: Number(block.header.height),
	    timestamp: block.header.timestamp,
	    collectionGuarantees: block.payload.collection_guarantees.map(collectionGuarantee => ({
	      collectionId: collectionGuarantee.collection_id,
	      signerIds: collectionGuarantee.signer_ids
	    })),
	    blockSeals: block.payload.block_seals.map(blockSeal => ({
	      blockId: blockSeal.block_id,
	      executionReceiptId: blockSeal.result_id
	    }))
	  };
	  return ret;
	}
	async function sendGetBlock(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Get Block Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Get Block Error: context.response must be defined.`);
	  ix = await ix;
	  const interactionHasBlockID = ix.block.id !== null;
	  const interactionHasBlockHeight = ix.block.height !== null;
	  if (interactionHasBlockID) {
	    return await sendGetBlockByIDRequest(ix, context, opts);
	  } else if (interactionHasBlockHeight) {
	    return await sendGetBlockByHeightRequest(ix, context, opts);
	  } else {
	    return await sendGetBlockRequest(ix, context, opts);
	  }
	}
	async function sendGetCollection(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Get Collection Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Get Collection Error: context.response must be defined.`);
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/collections/${ix.collection.id}?expand=transactions`,
	    method: "GET",
	    body: null
	  });
	  const ret = context.response();
	  ret.tag = ix.tag;
	  ret.collection = {
	    id: res.id,
	    transactionIds: res.transactions.map(transaction => transaction.id)
	  };
	  return ret;
	}
	async function sendGetEventsForHeightRangeRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/events?type=${ix.events.eventType}&start_height=${ix.events.start}&end_height=${ix.events.end}`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse(ix, context, res);
	}
	async function sendGetEventsForBlockIDsRequest(ix, context, opts) {
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/events?type=${ix.events.eventType}&block_ids=${ix.events.blockIds.join(",")}`,
	    method: "GET",
	    body: null
	  });
	  return constructResponse(ix, context, res);
	}
	function constructResponse(ix, context, res) {
	  let ret = context.response();
	  ret.tag = ix.tag;
	  ret.events = [];
	  res.forEach(block => block.events ? block.events.forEach(event => ret.events.push({
	    blockId: block.block_id,
	    blockHeight: Number(block.block_height),
	    blockTimestamp: block.block_timestamp,
	    type: event.type,
	    transactionId: event.transaction_id,
	    transactionIndex: Number(event.transaction_index),
	    eventIndex: Number(event.event_index),
	    payload: JSON.parse(context.Buffer.from(event.payload, "base64").toString())
	  })) : null);
	  return ret;
	}
	async function sendGetEvents(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Get Events Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Get Events Error: context.response must be defined.`);
	  invariant$3(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`);
	  ix = await ix;
	  const interactionContainsBlockHeightRange = ix.events.start !== null;
	  const interactionContainsBlockIDsList = Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0;
	  invariant$3(interactionContainsBlockHeightRange || interactionContainsBlockIDsList, "SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.");
	  if (interactionContainsBlockHeightRange) {
	    return await sendGetEventsForHeightRangeRequest(ix, context, opts);
	  } else {
	    return await sendGetEventsForBlockIDsRequest(ix, context, opts);
	  }
	}
	async function sendGetTransaction(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Get Transaction Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Get Transaction Error: context.response must be defined.`);
	  invariant$3(context.Buffer, `SDK Send Get Transaction Error: context.Buffer must be defined.`);
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  ix = await ix;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/transactions/${ix.transaction.id}`,
	    method: "GET",
	    body: null
	  });
	  const unwrapKey = key => ({
	    address: key.address,
	    keyId: Number(key.key_id),
	    sequenceNumber: Number(key.sequence_number)
	  });
	  const unwrapSignature = sig => ({
	    address: sig.address,
	    keyId: Number(sig.key_index),
	    signature: sig.signature
	  });
	  const unwrapArg = arg => JSON.parse(context.Buffer.from(arg, "base64").toString());
	  let ret = context.response();
	  ret.tag = ix.tag;
	  ret.transaction = {
	    script: context.Buffer.from(res.script, "base64").toString(),
	    args: [...res.arguments.map(unwrapArg)],
	    referenceBlockId: res.reference_block_id,
	    gasLimit: Number(res.gas_limit),
	    payer: res.payer,
	    proposalKey: res.proposal_key ? unwrapKey(res.proposal_key) : res.proposal_key,
	    authorizers: res.authorizers,
	    payloadSignatures: [...res.payload_signatures.map(unwrapSignature)],
	    envelopeSignatures: [...res.envelope_signatures.map(unwrapSignature)]
	  };
	  return ret;
	}
	const STATUS_MAP = {
	  UNKNOWN: 0,
	  PENDING: 1,
	  FINALIZED: 2,
	  EXECUTED: 3,
	  SEALED: 4,
	  EXPIRED: 5
	};
	async function sendGetTransactionStatus(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Get Transaction Status Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Get Transaction Status Error: context.response must be defined.`);
	  invariant$3(context.Buffer, `SDK Send Get Transaction Status Error: context.Buffer must be defined.`);
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  ix = await ix;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/transaction_results/${ix.transaction.id}`,
	    method: "GET",
	    body: null
	  });
	  let ret = context.response();
	  ret.tag = ix.tag;
	  ret.transactionStatus = {
	    blockId: res.block_id,
	    status: STATUS_MAP[res.status.toUpperCase()] || "",
	    statusString: res.status.toUpperCase(),
	    statusCode: res.status_code,
	    errorMessage: res.error_message,
	    events: res.events.map(event => ({
	      type: event.type,
	      transactionId: event.transaction_id,
	      transactionIndex: Number(event.transaction_index),
	      eventIndex: Number(event.event_index),
	      payload: JSON.parse(context.Buffer.from(event.payload, "base64").toString())
	    }))
	  };
	  return ret;
	}
	async function sendPing(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Ping Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Ping Error: context.response must be defined.`);
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  await httpRequest$1({
	    hostname: opts.node,
	    path: "/v1/blocks?height=sealed",
	    method: "GET",
	    body: null
	  });
	  let ret = context.response();
	  ret.tag = ix.tag;
	  return ret;
	}
	const idof$2 = acct => `${withPrefix(acct.addr)}-${acct.keyId}`;
	async function sendTransaction(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Transaction Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Transaction Error: context.response must be defined.`);
	  invariant$3(context.Buffer, `SDK Send Transaction Error: context.Buffer must be defined.`);
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  ix = await ix;

	  // Apply Non Payer Signatures to Payload Signatures
	  let payloadSignatures = [];
	  for (let acct of Object.values(ix.accounts)) {
	    try {
	      if (!acct.role.payer && acct.signature != null) {
	        payloadSignatures.push({
	          address: sansPrefix(acct.addr),
	          key_index: String(acct.keyId),
	          signature: context.Buffer.from(acct.signature, "hex").toString("base64")
	        });
	      }
	    } catch (error) {
	      console.error("SDK HTTP Send Error: Trouble applying payload signature", {
	        acct,
	        ix
	      });
	      throw error;
	    }
	  }

	  // Apply Payer Signatures to Envelope Signatures
	  let envelopeSignatures = {};
	  for (let acct of Object.values(ix.accounts)) {
	    try {
	      if (acct.role.payer && acct.signature != null) {
	        let id = acct.tempId || idof$2(acct);
	        envelopeSignatures[id] = envelopeSignatures[id] || {
	          address: sansPrefix(acct.addr),
	          key_index: String(acct.keyId),
	          signature: context.Buffer.from(acct.signature, "hex").toString("base64")
	        };
	      }
	    } catch (error) {
	      console.error("SDK HTTP Send Error: Trouble applying envelope signature", {
	        acct,
	        ix
	      });
	      throw error;
	    }
	  }
	  envelopeSignatures = Object.values(envelopeSignatures);
	  var t1 = Date.now();
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/transactions`,
	    method: "POST",
	    body: {
	      script: context.Buffer.from(ix.message.cadence).toString("base64"),
	      arguments: [...ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString("base64"))],
	      reference_block_id: ix.message.refBlock ? ix.message.refBlock : null,
	      gas_limit: String(ix.message.computeLimit),
	      payer: sansPrefix(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),
	      proposal_key: {
	        address: sansPrefix(ix.accounts[ix.proposer].addr),
	        key_index: String(ix.accounts[ix.proposer].keyId),
	        sequence_number: String(ix.accounts[ix.proposer].sequenceNum)
	      },
	      authorizers: ix.authorizations.map(tempId => ix.accounts[tempId].addr).reduce((prev, current) => {
	        return prev.find(item => item === current) ? prev : [...prev, current];
	      }, []).map(sansPrefix),
	      payload_signatures: payloadSignatures,
	      envelope_signatures: envelopeSignatures
	    }
	  });
	  var t2 = Date.now();
	  let ret = context.response();
	  ret.tag = ix.tag;
	  ret.transactionId = res.id;
	  if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") {
	    window.dispatchEvent(new CustomEvent("FLOW::TX", {
	      detail: {
	        txId: ret.transactionId,
	        delta: t2 - t1
	      }
	    }));
	  }
	  return ret;
	}
	async function sendGetNetworkParameters(ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Get Network Parameters Error: opts.node must be defined.`);
	  invariant$3(context.response, `SDK Send Get Network Parameters Error: context.response must be defined.`);
	  const httpRequest$1 = opts.httpRequest || httpRequest;
	  ix = await ix;
	  const res = await httpRequest$1({
	    hostname: opts.node,
	    path: `/v1/network/parameters`,
	    method: "GET",
	    body: null
	  });
	  let ret = context.response();
	  ret.tag = ix.tag;
	  ret.networkParameters = {
	    chainId: res.chain_id
	  };
	  return ret;
	}
	const send$2 = async function (ix) {
	  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  invariant$3(opts.node, `SDK Send Error: Either opts.node or "accessNode.api" in config must be defined.`);
	  invariant$3(context.ix, `SDK Send Error: context.ix must be defined.`);
	  ix = await ix;

	  // prettier-ignore
	  switch (true) {
	    case context.ix.isTransaction(ix):
	      return opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts);
	    case context.ix.isGetTransactionStatus(ix):
	      return opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts);
	    case context.ix.isGetTransaction(ix):
	      return opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts);
	    case context.ix.isScript(ix):
	      return opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts);
	    case context.ix.isGetAccount(ix):
	      return opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts);
	    case context.ix.isGetEvents(ix):
	      return opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts);
	    case context.ix.isGetBlock(ix):
	      return opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts);
	    case context.ix.isGetBlockHeader(ix):
	      return opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts);
	    case context.ix.isGetCollection(ix):
	      return opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts);
	    case context.ix.isPing(ix):
	      return opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts);
	    case context.ix.isGetNetworkParameters(ix):
	      return opts.sendGetNetworkParameters ? opts.sendGetNetworkParameters(ix, context, opts) : sendGetNetworkParameters(ix, context, opts);
	    default:
	      return ix;
	  }
	};

	const DEFAULT_RESPONSE = `{
    "tag":null,
    "transaction":null,
    "transactionStatus":null,
    "transactionId":null,
    "encodedData":null,
    "events":null,
    "account":null,
    "block":null,
    "blockHeader":null,
    "latestBlock":null,
    "collection":null,
    "networkParameters":null
}`;
	const response = () => JSON.parse(DEFAULT_RESPONSE);

	/**
	 * @description - A builder function that returns the interaction to get the latest block
	 * @param {boolean} [isSealed] - Whether or not the block should be sealed
	 * @returns {object} - An interaction object
	 */
	function getBlock() {
	  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	  return pipe$2([makeGetBlock, ix => {
	    ix.block.isSealed = isSealed;
	    return Ok(ix);
	  }]);
	}

	/**
	 * @description - A builder function that returns the interaction to get an account by address
	 * @param {string} addr - The address of the account to getq
	 * @returns {object} - An interaction object
	 */
	function getAccount(addr) {
	  return pipe$2([makeGetAccount, ix => {
	    ix.account.addr = sansPrefix(addr);
	    return Ok(ix);
	  }]);
	}

	const latestBlockDeprecationNotice = () => {
	  log$2.deprecate({
	    pkg: "@onflow/decode",
	    subject: "Operating upon data of the latestBlock field of the response object",
	    transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/decode/WARNINGS.md#0001-Deprecating-latestBlock-field"
	  });
	};
	const decodeImplicit = async i => i;
	const decodeVoid = async () => null;
	const decodeType = async type => {
	  return type.staticType;
	};
	const decodePath = async path => {
	  return {
	    domain: path.domain,
	    identifier: path.identifier
	  };
	};
	const decodeCapability = async cap => {
	  return {
	    path: cap.path,
	    address: cap.address,
	    borrowType: cap.borrowType
	  };
	};
	const decodeOptional = async (optional, decoders, stack) => optional ? await recurseDecode(optional, decoders, stack) : null;
	const decodeReference = async v => ({
	  address: v.address,
	  type: v.type
	});
	const decodeArray = async (array, decoders, stack) => await Promise.all(array.map(v => new Promise(async res => res(await recurseDecode(v, decoders, [...stack, v.type])))));
	const decodeDictionary = async (dictionary, decoders, stack) => await dictionary.reduce(async (acc, v) => {
	  acc = await acc;
	  acc[await recurseDecode(v.key, decoders, [...stack, v.key])] = await recurseDecode(v.value, decoders, [...stack, v.key]);
	  return acc;
	}, Promise.resolve({}));
	const decodeComposite = async (composite, decoders, stack) => {
	  const decoded = await composite.fields.reduce(async (acc, v) => {
	    acc = await acc;
	    acc[v.name] = await recurseDecode(v.value, decoders, [...stack, v.name]);
	    return acc;
	  }, Promise.resolve({}));
	  const decoder = composite.id && decoderLookup(decoders, composite.id);
	  return decoder ? await decoder(decoded) : decoded;
	};
	const defaultDecoders = {
	  UInt: decodeImplicit,
	  Int: decodeImplicit,
	  UInt8: decodeImplicit,
	  Int8: decodeImplicit,
	  UInt16: decodeImplicit,
	  Int16: decodeImplicit,
	  UInt32: decodeImplicit,
	  Int32: decodeImplicit,
	  UInt64: decodeImplicit,
	  Int64: decodeImplicit,
	  UInt128: decodeImplicit,
	  Int128: decodeImplicit,
	  UInt256: decodeImplicit,
	  Int256: decodeImplicit,
	  Word8: decodeImplicit,
	  Word16: decodeImplicit,
	  Word32: decodeImplicit,
	  Word64: decodeImplicit,
	  UFix64: decodeImplicit,
	  Fix64: decodeImplicit,
	  String: decodeImplicit,
	  Character: decodeImplicit,
	  Bool: decodeImplicit,
	  Address: decodeImplicit,
	  Void: decodeVoid,
	  Optional: decodeOptional,
	  Reference: decodeReference,
	  Array: decodeArray,
	  Dictionary: decodeDictionary,
	  Event: decodeComposite,
	  Resource: decodeComposite,
	  Struct: decodeComposite,
	  Enum: decodeComposite,
	  Type: decodeType,
	  Path: decodePath,
	  Capability: decodeCapability
	};
	const decoderLookup = (decoders, lookup) => {
	  const found = Object.keys(decoders).find(decoder => {
	    if (/^\/.*\/$/.test(decoder)) {
	      const reg = new RegExp(decoder.substring(1, decoder.length - 1));
	      return reg.test(lookup);
	    }
	    return decoder === lookup;
	  });
	  return lookup && found && decoders[found];
	};
	const recurseDecode = async (decodeInstructions, decoders, stack) => {
	  let decoder = decoderLookup(decoders, decodeInstructions.type);
	  if (!decoder) throw new Error(`Undefined Decoder Error: ${decodeInstructions.type}@${stack.join(".")}`);
	  return await decoder(decodeInstructions.value, decoders, stack);
	};

	/**
	 * @description - Decodes a response from Flow into JSON
	 * @param {*} decodeInstructions - The response object from Flow
	 * @param {object} customDecoders - An object of custom decoders
	 * @param {Array<*>} stack - The stack of the current decoding
	 * @returns {Promise<*>} - The decoded response
	 */
	const decode$1 = async function (decodeInstructions) {
	  let customDecoders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let stack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	  // Filter out all default decoders which are overridden by a custom decoder regex
	  const filteredDecoders = Object.keys(defaultDecoders).filter(decoder => !Object.keys(customDecoders).find(customDecoder => new RegExp(customDecoder).test(decoder))).reduce((decoders, decoderKey) => {
	    decoders[decoderKey] = defaultDecoders[decoderKey];
	    return decoders;
	  }, customDecoders);
	  const decoders = {
	    ...filteredDecoders,
	    ...customDecoders
	  };
	  return recurseDecode(decodeInstructions, decoders, stack);
	};
	const decodeResponse = async function (response) {
	  let customDecoders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  if (response.encodedData) {
	    return decode$1(response.encodedData, customDecoders);
	  } else if (response.transactionStatus) {
	    return {
	      ...response.transactionStatus,
	      events: await Promise.all(response.transactionStatus.events.map(async function decodeEvents(e) {
	        return {
	          type: e.type,
	          transactionId: e.transactionId,
	          transactionIndex: e.transactionIndex,
	          eventIndex: e.eventIndex,
	          data: await decode$1(e.payload, customDecoders)
	        };
	      }))
	    };
	  } else if (response.transaction) {
	    return response.transaction;
	  } else if (response.events) {
	    return await Promise.all(response.events.map(async function decodeEvents(e) {
	      return {
	        blockId: e.blockId,
	        blockHeight: e.blockHeight,
	        blockTimestamp: e.blockTimestamp,
	        type: e.type,
	        transactionId: e.transactionId,
	        transactionIndex: e.transactionIndex,
	        eventIndex: e.eventIndex,
	        data: await decode$1(e.payload, customDecoders)
	      };
	    }));
	  } else if (response.account) {
	    return response.account;
	  } else if (response.block) {
	    return response.block;
	  } else if (response.blockHeader) {
	    return response.blockHeader;
	  } else if (response.latestBlock) {
	    latestBlockDeprecationNotice();
	    return response.latestBlock;
	  } else if (response.transactionId) {
	    return response.transactionId;
	  } else if (response.collection) {
	    return response.collection;
	  } else if (response.networkParameters) {
	    const chainIdMap = {
	      "flow-testnet": "testnet",
	      "flow-mainnet": "mainnet",
	      "flow-emulator": "local"
	    };
	    return {
	      chainId: chainIdMap[response.networkParameters.chainId]
	    };
	  }
	  return null;
	};

	const isFn$2 = v => typeof v === "function";
	const isString$1 = v => typeof v === "string";
	const oldIdentifierPatternFn = () => /\b(0x\w+)\b/g;
	function isOldIdentifierSyntax(cadence) {
	  return oldIdentifierPatternFn().test(cadence);
	}
	const newIdentifierPatternFn = () => /import\s+"(\w+)"/g;
	function isNewIdentifierSyntax(cadence) {
	  return newIdentifierPatternFn().test(cadence);
	}
	function getContractIdentifierSyntaxMatches(cadence) {
	  return cadence.matchAll(newIdentifierPatternFn());
	}
	async function resolveCadence(ix) {
	  if (!isTransaction(ix) && !isScript(ix)) return ix;
	  var cadence = get$2(ix, "ix.cadence");
	  invariant$3(isFn$2(cadence) || isString$1(cadence), "Cadence needs to be a function or a string.");
	  if (isFn$2(cadence)) cadence = await cadence({});
	  invariant$3(isString$1(cadence), "Cadence needs to be a string at this point.");
	  invariant$3(!isOldIdentifierSyntax(cadence) || !isNewIdentifierSyntax(cadence), "Both account identifier and contract identifier syntax not simultaneously supported.");
	  if (isOldIdentifierSyntax(cadence)) {
	    cadence = await config$2().where(/^0x/).then(d => Object.entries(d).reduce((cadence, _ref) => {
	      let [key, value] = _ref;
	      const regex = new RegExp("(\\b" + key + "\\b)", "g");
	      return cadence.replace(regex, value);
	    }, cadence));
	  }
	  if (isNewIdentifierSyntax(cadence)) {
	    for (const [fullMatch, contractName] of getContractIdentifierSyntaxMatches(cadence)) {
	      const address = await config$2().get(`system.contracts.${contractName}`);
	      if (address) {
	        cadence = cadence.replace(fullMatch, `import ${contractName} from ${withPrefix$1(address)}`);
	      } else {
	        log$2({
	          title: "Contract Placeholder not found",
	          message: `Cannot find a value for contract placeholder ${contractName}. Please add to your flow.json or explicitly add it to the config 'contracts.*' namespace.`,
	          level: LEVELS$2.warn
	        });
	      }
	    }
	  }

	  // We need to move this over in any case.
	  ix.message.cadence = cadence;
	  return ix;
	}

	const isFn$1 = v => typeof v === "function";
	function cast(arg) {
	  // prettier-ignore
	  invariant$3(typeof arg.xform != null, `No type specified for argument: ${arg.value}`);
	  if (isFn$1(arg.xform)) return arg.xform(arg.value);
	  if (isFn$1(arg.xform.asArgument)) return arg.xform.asArgument(arg.value);

	  // prettier-ignore
	  invariant$3(false, `Invalid Argument`, arg);
	}
	async function handleArgResolution(arg) {
	  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
	  invariant$3(depth > 0, `Argument Resolve Recursion Limit Exceeded for Arg: ${arg.tempId}`);
	  if (isFn$1(arg.resolveArgument)) {
	    const resolvedArg = await arg.resolveArgument();
	    return handleArgResolution(resolvedArg, depth - 1);
	  } else {
	    return arg;
	  }
	}
	async function resolveArguments(ix) {
	  if (isTransaction(ix) || isScript(ix)) {
	    for (let [id, arg] of Object.entries(ix.arguments)) {
	      const res = await handleArgResolution(arg);
	      ix.arguments[id].asArgument = cast(res);
	    }
	  }
	  return ix;
	}

	var sha3 = {};

	var sponge = {};

	var permute = {};

	var chi = {};

	var copy = function copy(I, i) {
	  return function (O, o) {
	    var oi = o * 2;
	    var ii = i * 2;
	    O[oi] = I[ii];
	    O[oi + 1] = I[ii + 1];
	  };
	};
	var copy_1 = copy;

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = void 0;
	  var _copy = _interopRequireDefault(copy_1);
	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  }
	  var chi = function chi(_ref) {
	    var A = _ref.A,
	      C = _ref.C;
	    for (var y = 0; y < 25; y += 5) {
	      for (var x = 0; x < 5; x++) {
	        (0, _copy["default"])(A, y + x)(C, x);
	      }
	      for (var _x = 0; _x < 5; _x++) {
	        var xy = (y + _x) * 2;
	        var x1 = (_x + 1) % 5 * 2;
	        var x2 = (_x + 2) % 5 * 2;
	        A[xy] ^= ~C[x1] & C[x2];
	        A[xy + 1] ^= ~C[x1 + 1] & C[x2 + 1];
	      }
	    }
	  };
	  var _default = chi;
	  exports["default"] = _default;
	})(chi);

	var iota = {};

	var roundConstants = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = void 0;
	  var ROUND_CONSTANTS = new Uint32Array([0, 1, 0, 32898, 2147483648, 32906, 2147483648, 2147516416, 0, 32907, 0, 2147483649, 2147483648, 2147516545, 2147483648, 32777, 0, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 2147483648, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 0, 32778, 2147483648, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 0, 2147483649, 2147483648, 2147516424]);
	  var _default = ROUND_CONSTANTS;
	  exports["default"] = _default;
	})(roundConstants);

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = void 0;
	  var _roundConstants = _interopRequireDefault(roundConstants);
	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  }
	  var iota = function iota(_ref) {
	    var A = _ref.A,
	      roundIndex = _ref.roundIndex;
	    var i = roundIndex * 2;
	    A[0] ^= _roundConstants["default"][i];
	    A[1] ^= _roundConstants["default"][i + 1];
	  };
	  var _default = iota;
	  exports["default"] = _default;
	})(iota);

	var rhoPi = {};

	var piShuffles = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = void 0;
	  var PI_SHUFFLES = [10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12, 2, 20, 14, 22, 9, 6, 1];
	  var _default = PI_SHUFFLES;
	  exports["default"] = _default;
	})(piShuffles);

	var rhoOffsets = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = void 0;
	  var RHO_OFFSETS = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43, 62, 18, 39, 61, 20, 44];
	  var _default = RHO_OFFSETS;
	  exports["default"] = _default;
	})(rhoOffsets);

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = void 0;
	  var _piShuffles = _interopRequireDefault(piShuffles);
	  var _rhoOffsets = _interopRequireDefault(rhoOffsets);
	  var _copy = _interopRequireDefault(copy_1);
	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  }
	  var rhoPi = function rhoPi(_ref) {
	    var A = _ref.A,
	      C = _ref.C,
	      W = _ref.W;
	    (0, _copy["default"])(A, 1)(W, 0);
	    var H = 0;
	    var L = 0;
	    var Wi = 0;
	    var ri = 32;
	    for (var i = 0; i < 24; i++) {
	      var j = _piShuffles["default"][i];
	      var r = _rhoOffsets["default"][i];
	      (0, _copy["default"])(A, j)(C, 0);
	      H = W[0];
	      L = W[1];
	      ri = 32 - r;
	      Wi = r < 32 ? 0 : 1;
	      W[Wi] = H << r | L >>> ri;
	      W[(Wi + 1) % 2] = L << r | H >>> ri;
	      (0, _copy["default"])(W, 0)(A, j);
	      (0, _copy["default"])(C, 0)(W, 0);
	    }
	  };
	  var _default = rhoPi;
	  exports["default"] = _default;
	})(rhoPi);

	var theta = {};

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = void 0;
	  var _copy = _interopRequireDefault(copy_1);
	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  }
	  var theta = function theta(_ref) {
	    var A = _ref.A,
	      C = _ref.C,
	      D = _ref.D,
	      W = _ref.W;
	    var H = 0;
	    var L = 0;
	    for (var x = 0; x < 5; x++) {
	      var x20 = x * 2;
	      var x21 = (x + 5) * 2;
	      var x22 = (x + 10) * 2;
	      var x23 = (x + 15) * 2;
	      var x24 = (x + 20) * 2;
	      C[x20] = A[x20] ^ A[x21] ^ A[x22] ^ A[x23] ^ A[x24];
	      C[x20 + 1] = A[x20 + 1] ^ A[x21 + 1] ^ A[x22 + 1] ^ A[x23 + 1] ^ A[x24 + 1];
	    }
	    for (var _x = 0; _x < 5; _x++) {
	      (0, _copy["default"])(C, (_x + 1) % 5)(W, 0);
	      H = W[0];
	      L = W[1];
	      W[0] = H << 1 | L >>> 31;
	      W[1] = L << 1 | H >>> 31;
	      D[_x * 2] = C[(_x + 4) % 5 * 2] ^ W[0];
	      D[_x * 2 + 1] = C[(_x + 4) % 5 * 2 + 1] ^ W[1];
	      for (var y = 0; y < 25; y += 5) {
	        A[(y + _x) * 2] ^= D[_x * 2];
	        A[(y + _x) * 2 + 1] ^= D[_x * 2 + 1];
	      }
	    }
	  };
	  var _default = theta;
	  exports["default"] = _default;
	})(theta);

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = void 0;
	  var _chi = _interopRequireDefault(chi);
	  var _iota = _interopRequireDefault(iota);
	  var _rhoPi = _interopRequireDefault(rhoPi);
	  var _theta = _interopRequireDefault(theta);
	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  }
	  var permute = function permute() {
	    var C = new Uint32Array(10);
	    var D = new Uint32Array(10);
	    var W = new Uint32Array(2);
	    return function (A) {
	      for (var roundIndex = 0; roundIndex < 24; roundIndex++) {
	        (0, _theta["default"])({
	          A: A,
	          C: C,
	          D: D,
	          W: W
	        });
	        (0, _rhoPi["default"])({
	          A: A,
	          C: C,
	          W: W
	        });
	        (0, _chi["default"])({
	          A: A,
	          C: C
	        });
	        (0, _iota["default"])({
	          A: A,
	          roundIndex: roundIndex
	        });
	      }
	      C.fill(0);
	      D.fill(0);
	      W.fill(0);
	    };
	  };
	  var _default = permute;
	  exports["default"] = _default;
	})(permute);

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = void 0;
	  var _buffer = buffer;
	  var _permute = _interopRequireDefault(permute);
	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  }
	  var xorWords = function xorWords(I, O) {
	    for (var i = 0; i < I.length; i += 8) {
	      var o = i / 4;
	      O[o] ^= I[i + 7] << 24 | I[i + 6] << 16 | I[i + 5] << 8 | I[i + 4];
	      O[o + 1] ^= I[i + 3] << 24 | I[i + 2] << 16 | I[i + 1] << 8 | I[i];
	    }
	    return O;
	  };
	  var readWords = function readWords(I, O) {
	    for (var o = 0; o < O.length; o += 8) {
	      var i = o / 4;
	      O[o] = I[i + 1];
	      O[o + 1] = I[i + 1] >>> 8;
	      O[o + 2] = I[i + 1] >>> 16;
	      O[o + 3] = I[i + 1] >>> 24;
	      O[o + 4] = I[i];
	      O[o + 5] = I[i] >>> 8;
	      O[o + 6] = I[i] >>> 16;
	      O[o + 7] = I[i] >>> 24;
	    }
	    return O;
	  };
	  var Sponge = function Sponge(_ref) {
	    var _this = this;
	    var capacity = _ref.capacity,
	      padding = _ref.padding;
	    var keccak = (0, _permute["default"])();
	    var stateSize = 200;
	    var blockSize = capacity / 8;
	    var queueSize = stateSize - capacity / 4;
	    var queueOffset = 0;
	    var state = new Uint32Array(stateSize / 4);
	    var queue = _buffer.Buffer.allocUnsafe(queueSize);
	    this.absorb = function (buffer) {
	      for (var i = 0; i < buffer.length; i++) {
	        queue[queueOffset] = buffer[i];
	        queueOffset += 1;
	        if (queueOffset >= queueSize) {
	          xorWords(queue, state);
	          keccak(state);
	          queueOffset = 0;
	        }
	      }
	      return _this;
	    };
	    this.squeeze = function () {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var output = {
	        buffer: options.buffer || _buffer.Buffer.allocUnsafe(blockSize),
	        padding: options.padding || padding,
	        queue: _buffer.Buffer.allocUnsafe(queue.length),
	        state: new Uint32Array(state.length)
	      };
	      queue.copy(output.queue);
	      for (var i = 0; i < state.length; i++) {
	        output.state[i] = state[i];
	      }
	      output.queue.fill(0, queueOffset);
	      output.queue[queueOffset] |= output.padding;
	      output.queue[queueSize - 1] |= 128;
	      xorWords(output.queue, output.state);
	      for (var offset = 0; offset < output.buffer.length; offset += queueSize) {
	        keccak(output.state);
	        readWords(output.state, output.buffer.slice(offset, offset + queueSize));
	      }
	      return output.buffer;
	    };
	    this.reset = function () {
	      queue.fill(0);
	      state.fill(0);
	      queueOffset = 0;
	      return _this;
	    };
	    return this;
	  };
	  var _default = Sponge;
	  exports["default"] = _default;
	})(sponge);

	(function (exports) {

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports["default"] = exports.SHAKE = exports.SHA3Hash = exports.SHA3 = exports.Keccak = void 0;
	  var _buffer = buffer;
	  var _sponge = _interopRequireDefault(sponge);
	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  }
	  var createHash = function createHash(_ref) {
	    var allowedSizes = _ref.allowedSizes,
	      defaultSize = _ref.defaultSize,
	      padding = _ref.padding;
	    return function Hash() {
	      var _this = this;
	      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;
	      if (!this || this.constructor !== Hash) {
	        return new Hash(size);
	      }
	      if (allowedSizes && !allowedSizes.includes(size)) {
	        throw new Error("Unsupported hash length");
	      }
	      var sponge = new _sponge["default"]({
	        capacity: size
	      });
	      this.update = function (input) {
	        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
	        if (_buffer.Buffer.isBuffer(input)) {
	          sponge.absorb(input);
	          return _this;
	        }
	        if (typeof input === "string") {
	          return _this.update(_buffer.Buffer.from(input, encoding));
	        }
	        throw new TypeError("Not a string or buffer");
	      };
	      this.digest = function () {
	        var formatOrOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "binary";
	        var options = typeof formatOrOptions === "string" ? {
	          format: formatOrOptions
	        } : formatOrOptions;
	        var buffer = sponge.squeeze({
	          buffer: options.buffer,
	          padding: options.padding || padding
	        });
	        if (options.format && options.format !== "binary") {
	          return buffer.toString(options.format);
	        }
	        return buffer;
	      };
	      this.reset = function () {
	        sponge.reset();
	        return _this;
	      };
	      return this;
	    };
	  };
	  var Keccak = createHash({
	    allowedSizes: [224, 256, 384, 512],
	    defaultSize: 512,
	    padding: 1
	  });
	  exports.Keccak = Keccak;
	  var SHA3 = createHash({
	    allowedSizes: [224, 256, 384, 512],
	    defaultSize: 512,
	    padding: 6
	  });
	  exports.SHA3 = SHA3;
	  var SHAKE = createHash({
	    allowedSizes: [128, 256],
	    defaultSize: 256,
	    padding: 31
	  });
	  exports.SHAKE = SHAKE;
	  var SHA3Hash = Keccak;
	  exports.SHA3Hash = SHA3Hash;
	  SHA3.SHA3Hash = SHA3Hash;
	  var _default = SHA3;
	  exports["default"] = _default;
	})(sha3);

	const encodeTransactionPayload = tx => prependTransactionDomainTag(rlpEncode(preparePayload(tx)));
	const encodeTransactionEnvelope = tx => prependTransactionDomainTag(rlpEncode(prepareEnvelope(tx)));
	const encodeTxIdFromVoucher = voucher => sha3_256(rlpEncode(prepareVoucher(voucher)));
	const rightPaddedHexBuffer = (value, pad) => buffer.Buffer.from(value.padEnd(pad * 2, 0), "hex");
	const leftPaddedHexBuffer = (value, pad) => buffer.Buffer.from(value.padStart(pad * 2, 0), "hex");
	const TRANSACTION_DOMAIN_TAG = rightPaddedHexBuffer(buffer.Buffer.from("FLOW-V0.0-transaction").toString("hex"), 32).toString("hex");
	const prependTransactionDomainTag = tx => TRANSACTION_DOMAIN_TAG + tx;
	const addressBuffer = addr => leftPaddedHexBuffer(addr, 8);
	const blockBuffer = block => leftPaddedHexBuffer(block, 32);
	const argumentToString = arg => buffer.Buffer.from(JSON.stringify(arg), "utf8");
	const scriptBuffer = script => buffer.Buffer.from(script, "utf8");
	const signatureBuffer = signature => buffer.Buffer.from(signature, "hex");
	const rlpEncode = v => {
	  return encode(v).toString("hex");
	};
	const sha3_256 = msg => {
	  const sha = new sha3.SHA3(256);
	  sha.update(buffer.Buffer.from(msg, "hex"));
	  return sha.digest().toString("hex");
	};
	const preparePayload = tx => {
	  validatePayload(tx);
	  return [scriptBuffer(tx.cadence), tx.arguments.map(argumentToString), blockBuffer(tx.refBlock), tx.computeLimit, addressBuffer(sansPrefix(tx.proposalKey.address)), tx.proposalKey.keyId, tx.proposalKey.sequenceNum, addressBuffer(sansPrefix(tx.payer)), tx.authorizers.map(authorizer => addressBuffer(sansPrefix(authorizer)))];
	};
	const prepareEnvelope = tx => {
	  validateEnvelope(tx);
	  return [preparePayload(tx), preparePayloadSignatures(tx)];
	};
	const preparePayloadSignatures = tx => {
	  const signers = collectSigners(tx);
	  return tx.payloadSigs.map(sig => {
	    return {
	      signerIndex: signers.get(sig.address),
	      keyId: sig.keyId,
	      sig: sig.sig
	    };
	  }).sort((a, b) => {
	    if (a.signerIndex > b.signerIndex) return 1;
	    if (a.signerIndex < b.signerIndex) return -1;
	    if (a.keyId > b.keyId) return 1;
	    if (a.keyId < b.keyId) return -1;
	  }).map(sig => {
	    return [sig.signerIndex, sig.keyId, signatureBuffer(sig.sig)];
	  });
	};
	const collectSigners = tx => {
	  const signers = new Map();
	  let i = 0;
	  const addSigner = addr => {
	    if (!signers.has(addr)) {
	      signers.set(addr, i);
	      i++;
	    }
	  };
	  addSigner(tx.proposalKey.address);
	  addSigner(tx.payer);
	  tx.authorizers.forEach(addSigner);
	  return signers;
	};
	const prepareVoucher = voucher => {
	  validateVoucher(voucher);
	  const signers = collectSigners(voucher);
	  const prepareSigs = sigs => {
	    return sigs.map(_ref => {
	      let {
	        address,
	        keyId,
	        sig
	      } = _ref;
	      return {
	        signerIndex: signers.get(address),
	        keyId,
	        sig
	      };
	    }).sort((a, b) => {
	      if (a.signerIndex > b.signerIndex) return 1;
	      if (a.signerIndex < b.signerIndex) return -1;
	      if (a.keyId > b.keyId) return 1;
	      if (a.keyId < b.keyId) return -1;
	    }).map(sig => {
	      return [sig.signerIndex, sig.keyId, signatureBuffer(sig.sig)];
	    });
	  };
	  return [[scriptBuffer(voucher.cadence), voucher.arguments.map(argumentToString), blockBuffer(voucher.refBlock), voucher.computeLimit, addressBuffer(sansPrefix(voucher.proposalKey.address)), voucher.proposalKey.keyId, voucher.proposalKey.sequenceNum, addressBuffer(sansPrefix(voucher.payer)), voucher.authorizers.map(authorizer => addressBuffer(sansPrefix(authorizer)))], prepareSigs(voucher.payloadSigs), prepareSigs(voucher.envelopeSigs)];
	};
	const validatePayload = tx => {
	  payloadFields.forEach(field => checkField(tx, field));
	  proposalKeyFields.forEach(field => checkField(tx.proposalKey, field, "proposalKey"));
	};
	const validateEnvelope = tx => {
	  payloadSigsFields.forEach(field => checkField(tx, field));
	  tx.payloadSigs.forEach((sig, index) => {
	    payloadSigFields.forEach(field => checkField(sig, field, "payloadSigs", index));
	  });
	};
	const validateVoucher = voucher => {
	  payloadFields.forEach(field => checkField(voucher, field));
	  proposalKeyFields.forEach(field => checkField(voucher.proposalKey, field, "proposalKey"));
	  payloadSigsFields.forEach(field => checkField(voucher, field));
	  voucher.payloadSigs.forEach((sig, index) => {
	    payloadSigFields.forEach(field => checkField(sig, field, "payloadSigs", index));
	  });
	  envelopeSigsFields.forEach(field => checkField(voucher, field));
	  voucher.envelopeSigs.forEach((sig, index) => {
	    envelopeSigFields.forEach(field => checkField(sig, field, "envelopeSigs", index));
	  });
	};
	const isNumber = v => typeof v === "number";
	const isString = v => typeof v === "string";
	const isObject$2 = v => v !== null && typeof v === "object";
	const isArray = v => isObject$2(v) && v instanceof Array;
	const payloadFields = [{
	  name: "cadence",
	  check: isString
	}, {
	  name: "arguments",
	  check: isArray
	}, {
	  name: "refBlock",
	  check: isString,
	  defaultVal: "0"
	}, {
	  name: "computeLimit",
	  check: isNumber
	}, {
	  name: "proposalKey",
	  check: isObject$2
	}, {
	  name: "payer",
	  check: isString
	}, {
	  name: "authorizers",
	  check: isArray
	}];
	const proposalKeyFields = [{
	  name: "address",
	  check: isString
	}, {
	  name: "keyId",
	  check: isNumber
	}, {
	  name: "sequenceNum",
	  check: isNumber
	}];
	const payloadSigsFields = [{
	  name: "payloadSigs",
	  check: isArray
	}];
	const payloadSigFields = [{
	  name: "address",
	  check: isString
	}, {
	  name: "keyId",
	  check: isNumber
	}, {
	  name: "sig",
	  check: isString
	}];
	const envelopeSigsFields = [{
	  name: "envelopeSigs",
	  check: isArray
	}];
	const envelopeSigFields = [{
	  name: "address",
	  check: isString
	}, {
	  name: "keyId",
	  check: isNumber
	}, {
	  name: "sig",
	  check: isString
	}];
	const checkField = (obj, field, base, index) => {
	  const {
	    name,
	    check,
	    defaultVal
	  } = field;
	  if (obj[name] == null && defaultVal != null) obj[name] = defaultVal;
	  if (obj[name] == null) throw missingFieldError(name, base, index);
	  if (!check(obj[name])) throw invalidFieldError(name, base, index);
	};
	const printFieldName = (field, base, index) => {
	  if (!!base) return index == null ? `${base}.${field}` : `${base}.${index}.${field}`;
	  return field;
	};
	const missingFieldError = (field, base, index) => new Error(`Missing field ${printFieldName(field, base, index)}`);
	const invalidFieldError = (field, base, index) => new Error(`Invalid field ${printFieldName(field, base, index)}`);

	function findInsideSigners(ix) {
	  // Inside Signers Are: (authorizers + proposer) - payer
	  let inside = new Set(ix.authorizations);
	  inside.add(ix.proposer);
	  if (Array.isArray(ix.payer)) {
	    ix.payer.forEach(p => inside.delete(p));
	  } else {
	    inside.delete(ix.payer);
	  }
	  return Array.from(inside);
	}
	function findOutsideSigners(ix) {
	  // Outside Signers Are: (payer)
	  let outside = new Set(Array.isArray(ix.payer) ? ix.payer : [ix.payer]);
	  return Array.from(outside);
	}
	const createSignableVoucher = ix => {
	  const buildAuthorizers = () => {
	    const authorizations = ix.authorizations.map(cid => withPrefix$1(ix.accounts[cid].addr)).reduce((prev, current) => {
	      return prev.find(item => item === current) ? prev : [...prev, current];
	    }, []);
	    return authorizations[0] ? authorizations : [];
	  };
	  const buildInsideSigners = () => findInsideSigners(ix).map(id => ({
	    address: withPrefix$1(ix.accounts[id].addr),
	    keyId: ix.accounts[id].keyId,
	    sig: ix.accounts[id].signature
	  }));
	  const buildOutsideSigners = () => findOutsideSigners(ix).map(id => ({
	    address: withPrefix$1(ix.accounts[id].addr),
	    keyId: ix.accounts[id].keyId,
	    sig: ix.accounts[id].signature
	  }));
	  return {
	    cadence: ix.message.cadence,
	    refBlock: ix.message.refBlock || null,
	    computeLimit: ix.message.computeLimit,
	    arguments: ix.message.arguments.map(id => ix.arguments[id].asArgument),
	    proposalKey: {
	      address: withPrefix$1(ix.accounts[ix.proposer].addr),
	      keyId: ix.accounts[ix.proposer].keyId,
	      sequenceNum: ix.accounts[ix.proposer].sequenceNum
	    },
	    payer: withPrefix$1(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),
	    authorizers: buildAuthorizers(),
	    payloadSigs: buildInsideSigners(),
	    envelopeSigs: buildOutsideSigners()
	  };
	};
	const voucherToTxId = voucher => {
	  return encodeTxIdFromVoucher(voucher);
	};

	const idof$1 = acct => `${withPrefix$1(acct.addr)}-${acct.keyId}`;
	const isFn = v => typeof v === "function";
	function buildPreSignable(acct, ix) {
	  try {
	    return {
	      f_type: "PreSignable",
	      f_vsn: "1.0.1",
	      roles: acct.role,
	      cadence: ix.message.cadence,
	      args: ix.message.arguments.map(d => ix.arguments[d].asArgument),
	      data: {},
	      interaction: ix,
	      voucher: createSignableVoucher(ix)
	    };
	  } catch (error) {
	    console.error("buildPreSignable", error);
	    throw error;
	  }
	}
	async function collectAccounts(ix, accounts, last) {
	  let depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3;
	  invariant$3(depth, "Account Resolve Recursion Limit Exceeded", {
	    ix,
	    accounts
	  });
	  let authorizations = [];
	  for (let ax of accounts) {
	    let resolve = ax.resolve;
	    ax.resolve = null;
	    var old = last || ax;
	    if (isFn(resolve)) ax = await resolve(ax, buildPreSignable(ax, ix));
	    if (Array.isArray(ax)) {
	      await collectAccounts(ix, ax, old, depth - 1);
	    } else {
	      if (ax.addr) {
	        ax.addr = sansPrefix(ax.addr);
	      }
	      if (ax.addr != null && ax.keyId != null) {
	        ax.tempId = idof$1(ax);
	      }
	      ix.accounts[ax.tempId] = ix.accounts[ax.tempId] || ax;
	      ix.accounts[ax.tempId].role.proposer = ix.accounts[ax.tempId].role.proposer || ax.role.proposer;
	      ix.accounts[ax.tempId].role.payer = ix.accounts[ax.tempId].role.payer || ax.role.payer;
	      ix.accounts[ax.tempId].role.authorizer = ix.accounts[ax.tempId].role.authorizer || ax.role.authorizer;
	      if (ix.accounts[ax.tempId].role.proposer && ix.proposer === old.tempId) {
	        ix.proposer = ax.tempId;
	      }
	      if (ix.accounts[ax.tempId].role.payer) {
	        if (Array.isArray(ix.payer)) {
	          ix.payer = Array.from(new Set([...ix.payer, ax.tempId].map(d => d === old.tempId ? ax.tempId : d)));
	        } else {
	          ix.payer = Array.from(new Set([ix.payer, ax.tempId].map(d => d === old.tempId ? ax.tempId : d)));
	        }
	        if (ix.payer.length > 1) {
	          // remove payer dups based on addr and keyId
	          const dupList = [];
	          const payerAccts = [];
	          ix.payer = ix.payer.reduce((g, tempId) => {
	            const {
	              addr
	            } = ix.accounts[tempId];
	            const key = idof$1(ix.accounts[tempId]);
	            payerAccts.push(addr);
	            if (dupList.includes(key)) return g;
	            dupList.push(key);
	            return [...g, tempId];
	          }, []);
	          const multiAccts = Array.from(new Set(payerAccts));
	          if (multiAccts.length > 1) {
	            throw new Error("Payer can not be different accounts");
	          }
	        }
	      }
	      if (ix.accounts[ax.tempId].role.authorizer) {
	        if (last) {
	          // do group replacement
	          authorizations = Array.from(new Set([...authorizations, ax.tempId]));
	        } else {
	          // do 1-1 replacement
	          ix.authorizations = ix.authorizations.map(d => d === old.tempId ? ax.tempId : d);
	        }
	      }
	    }
	    if (old.tempId != ax.tempId) delete ix.accounts[old.tempId];
	  }
	  if (last) {
	    // complete (flatmap) group replacement
	    ix.authorizations = ix.authorizations.map(d => d === last.tempId ? authorizations : d).reduce((prev, curr) => Array.isArray(curr) ? [...prev, ...curr] : [...prev, curr], []);
	  }
	}
	async function resolveAccounts(ix) {
	  if (isTransaction(ix)) {
	    if (!Array.isArray(ix.payer)) {
	      log$2.deprecate({
	        pkg: "FCL",
	        subject: '"ix.payer" must be an array. Support for ix.payer as a singular',
	        message: "See changelog for more info."
	      });
	    }
	    try {
	      await collectAccounts(ix, Object.values(ix.accounts));
	      await collectAccounts(ix, Object.values(ix.accounts));
	    } catch (error) {
	      console.error("=== SAD PANDA ===\n\n", error, "\n\n=== SAD PANDA ===");
	      throw error;
	    }
	  }
	  return ix;
	}

	async function resolveSignatures(ix) {
	  if (isTransaction(ix)) {
	    try {
	      let insideSigners = findInsideSigners(ix);
	      const insidePayload = encodeTransactionPayload(prepForEncoding(ix));
	      await Promise.all(insideSigners.map(fetchSignature(ix, insidePayload)));
	      let outsideSigners = findOutsideSigners(ix);
	      const outsidePayload = encodeTransactionEnvelope({
	        ...prepForEncoding(ix),
	        payloadSigs: insideSigners.map(id => ({
	          address: ix.accounts[id].addr,
	          keyId: ix.accounts[id].keyId,
	          sig: ix.accounts[id].signature
	        }))
	      });
	      await Promise.all(outsideSigners.map(fetchSignature(ix, outsidePayload)));
	    } catch (error) {
	      console.error("Signatures", error, {
	        ix
	      });
	      throw error;
	    }
	  }
	  return ix;
	}
	function fetchSignature(ix, payload) {
	  return async function innerFetchSignature(id) {
	    const acct = ix.accounts[id];
	    if (acct.signature != null) return;
	    const {
	      signature
	    } = await acct.signingFunction(buildSignable(acct, payload, ix));
	    ix.accounts[id].signature = signature;
	  };
	}
	function buildSignable(acct, message, ix) {
	  try {
	    return {
	      f_type: "Signable",
	      f_vsn: "1.0.1",
	      message,
	      addr: sansPrefix(acct.addr),
	      keyId: acct.keyId,
	      roles: acct.role,
	      cadence: ix.message.cadence,
	      args: ix.message.arguments.map(d => ix.arguments[d].asArgument),
	      data: {},
	      interaction: ix,
	      voucher: createSignableVoucher(ix)
	    };
	  } catch (error) {
	    console.error("buildSignable", error);
	    throw error;
	  }
	}
	function prepForEncoding(ix) {
	  const payerAddress = sansPrefix((Array.isArray(ix.payer) ? ix.accounts[ix.payer[0]] : ix.accounts[ix.payer]).addr);
	  return {
	    cadence: ix.message.cadence,
	    refBlock: ix.message.refBlock || null,
	    computeLimit: ix.message.computeLimit,
	    arguments: ix.message.arguments.map(id => ix.arguments[id].asArgument),
	    proposalKey: {
	      address: sansPrefix(ix.accounts[ix.proposer].addr),
	      keyId: ix.accounts[ix.proposer].keyId,
	      sequenceNum: ix.accounts[ix.proposer].sequenceNum
	    },
	    payer: payerAddress,
	    authorizers: ix.authorizations.map(cid => sansPrefix(ix.accounts[cid].addr)).reduce((prev, current) => {
	      return prev.find(item => item === current) ? prev : [...prev, current];
	    }, [])
	  };
	}

	async function resolveValidators(ix) {
	  const validators = get$2(ix, "ix.validators", []);
	  return pipe$2(ix, validators.map(cb => ix => cb(ix, {
	    Ok,
	    Bad
	  })));
	}

	async function resolveFinalNormalization(ix) {
	  for (let key of Object.keys(ix.accounts)) {
	    ix.accounts[key].addr = sansPrefix(ix.accounts[key].addr);
	  }
	  return ix;
	}

	async function resolveVoucherIntercept(ix) {
	  const fn = get$2(ix, "ix.voucher-intercept");
	  if (isFn$3(fn)) {
	    await fn(createSignableVoucher(ix));
	  }
	  return ix;
	}

	const DEFAULT_COMPUTE_LIMIT = 100;
	async function resolveComputeLimit(ix) {
	  if (isTransaction(ix)) {
	    ix.message.computeLimit = ix.message.computeLimit || (await config$2.get("fcl.limit"));
	    if (!ix.message.computeLimit) {
	      log$2.deprecate({
	        pkg: "FCL/SDK",
	        subject: "The built-in default compute limit (DEFAULT_COMPUTE_LIMIT=10)",
	        transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0009-deprecate-default-compute-limit"
	      });
	      ix.message.computeLimit = DEFAULT_COMPUTE_LIMIT;
	    }
	  }
	  return ix;
	}

	const noop$2 = v => v;
	const debug = function (key) {
	  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$2;
	  return async ix => {
	    const accts = ix => ["\nAccounts:", {
	      proposer: ix.proposer,
	      authorizations: ix.authorizations,
	      payer: ix.payer
	    }, "\n\nDetails:", ix.accounts].filter(Boolean);
	    const log = function () {
	      for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {
	        msg[_key] = arguments[_key];
	      }
	      console.log(`debug[${key}] ---\n`, ...msg, "\n\n\n---");
	    };
	    if (await config$2.get(`debug.${key}`)) await fn(ix, log, accts);
	    return ix;
	  };
	};
	const resolve = pipe$2([resolveCadence, debug("cadence", (ix, log) => log(ix.message.cadence)), resolveComputeLimit, debug("compute limit", (ix, log) => log(ix.message.computeLimit)), resolveArguments, debug("arguments", (ix, log) => log(ix.message.arguments, ix.message)), resolveAccounts, debug("accounts", (ix, log, accts) => log(...accts(ix))), /* special */execFetchRef, /* special */execFetchSequenceNumber, resolveSignatures, debug("signatures", (ix, log, accts) => log(...accts(ix))), resolveFinalNormalization, resolveValidators, resolveVoucherIntercept, debug("resolved", (ix, log) => log(ix))]);
	async function execFetchRef(ix) {
	  if (isTransaction(ix) && ix.message.refBlock == null) {
	    const node = await config$2().get("accessNode.api");
	    const sendFn = await config$2.first(["sdk.transport", "sdk.send"], send$2);
	    invariant$3(sendFn, `Required value for sdk.transport is not defined in config. See: ${"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21"}`);
	    ix.message.refBlock = (await sendFn(build([getBlock()]), {
	      config: config$2,
	      response,
	      Buffer: buffer.Buffer,
	      ix: ixModule
	    }, {
	      node
	    }).then(decodeResponse)).id;
	  }
	  return ix;
	}
	async function execFetchSequenceNumber(ix) {
	  if (isTransaction(ix)) {
	    var acct = Object.values(ix.accounts).find(a => a.role.proposer);
	    invariant$3(acct, `Transactions require a proposer`);
	    if (acct.sequenceNum == null) {
	      const node = await config$2().get("accessNode.api");
	      const sendFn = await config$2.first(["sdk.transport", "sdk.send"], send$2);
	      invariant$3(sendFn, `Required value for sdk.transport is not defined in config. See: ${"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21"}`);
	      ix.accounts[acct.tempId].sequenceNum = await sendFn(await build([getAccount(acct.addr)]), {
	        config: config$2,
	        response,
	        Buffer: buffer.Buffer,
	        ix: ixModule
	      }, {
	        node
	      }).then(decodeResponse).then(acct => acct.keys).then(keys => keys.find(key => key.index === acct.keyId)).then(key => key.sequenceNumber);
	    }
	  }
	  return ix;
	}

	function invariant$2() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	  if (args.length > 1) {
	    const [predicate, message] = args;
	    return invariant$2((ix, _ref) => {
	      let {
	        Ok,
	        Bad
	      } = _ref;
	      return predicate ? Ok(ix) : Bad(ix, message);
	    });
	  }
	  const [fn] = args;
	  return ix => fn(ix, {
	    Ok,
	    Bad
	  });
	}

	/**
	 * @description - Sends arbitrary scripts, transactions, and requests to Flow
	 * @param {Array.<Function>} args - An array of functions that take interaction and return interaction
	 * @param {object} opts - Optional parameters
	 * @returns {Promise<*>} - A promise that resolves to a response
	 */
	const send$1 = async function () {
	  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  const sendFn = await config$2.first(["sdk.transport", "sdk.send"], opts.send || send$2);
	  invariant$2(sendFn, `Required value for sdk.transport is not defined in config. See: ${"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21"}`);
	  const resolveFn = await config$2.first(["sdk.resolve"], opts.resolve || resolve);
	  opts.node = opts.node || (await config$2().get("accessNode.api"));
	  if (Array.isArray(args)) args = pipe$2(interaction(), args);
	  return sendFn(await resolveFn(args), {
	    config: config$2,
	    response,
	    ix: ixModule,
	    Buffer: buffer.Buffer
	  }, opts);
	};

	async function decode(response) {
	  const decodersFromConfig = await config$2().where(/^decoder\./);
	  const decoders = Object.entries(decodersFromConfig).map(_ref => {
	    let [pattern, xform] = _ref;
	    pattern = `/${pattern.replace(/^decoder\./, "")}$/`;
	    return [pattern, xform];
	  });
	  return decodeResponse(response, Object.fromEntries(decoders));
	}

	const findPayloadSigners = voucher => {
	  // Payload Signers Are: (authorizers + proposer) - payer
	  let payload = new Set(voucher.authorizers);
	  payload.add(voucher.proposalKey.address);
	  payload.delete(voucher.payer);
	  return Array.from(payload).map(withPrefix$1);
	};
	const findEnvelopeSigners = voucher => {
	  // Envelope Signers Are: (payer)
	  let envelope = new Set([voucher.payer]);
	  return Array.from(envelope).map(withPrefix$1);
	};
	class UnableToDetermineMessageEncodingTypeForSignerAddress extends Error {
	  constructor(signerAddress) {
	    const msg = `
        Encode Message From Signable Error: Unable to determine message encoding for signer addresss: ${signerAddress}. 
        Please ensure the address: ${signerAddress} is intended to sign the given transaction as specified by the transaction signable.
      `.trim();
	    super(msg);
	    this.name = "Unable To Determine Message Encoding For Signer Addresss";
	  }
	}
	const encodeMessageFromSignable = (signable, signerAddress) => {
	  let payloadSigners = findPayloadSigners(signable.voucher);
	  let envelopeSigners = findEnvelopeSigners(signable.voucher);
	  const isPayloadSigner = payloadSigners.includes(withPrefix$1(signerAddress));
	  const isEnvelopeSigner = envelopeSigners.includes(withPrefix$1(signerAddress));
	  if (!isPayloadSigner && !isEnvelopeSigner) {
	    throw new UnableToDetermineMessageEncodingTypeForSignerAddress(signerAddress);
	  }
	  const message = {
	    cadence: signable.voucher.cadence,
	    refBlock: signable.voucher.refBlock,
	    computeLimit: signable.voucher.computeLimit,
	    arguments: signable.voucher.arguments,
	    proposalKey: {
	      ...signable.voucher.proposalKey,
	      address: sansPrefix(signable.voucher.proposalKey.address)
	    },
	    payer: sansPrefix(signable.voucher.payer),
	    authorizers: signable.voucher.authorizers.map(sansPrefix),
	    payloadSigs: signable.voucher.payloadSigs.map(ps => ({
	      ...ps,
	      address: sansPrefix(ps.address)
	    }))
	  };
	  return isPayloadSigner ? encodeTransactionPayload(message) : encodeTransactionEnvelope(message);
	};

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
	let promise;
	var queueMicrotask_1 = typeof queueMicrotask === 'function' ? queueMicrotask.bind(typeof window !== 'undefined' ? window : commonjsGlobal)
	// reuse resolved promise, and allocate it lazily
	: cb => (promise || (promise = Promise.resolve())).then(cb).catch(err => setTimeout(() => {
	  throw err;
	}, 0));
	const mailbox = () => {
	  const queue = [];
	  var next;
	  return {
	    async deliver(msg) {
	      queue.push(msg);
	      if (next) {
	        next(queue.shift());
	        next = undefined;
	      }
	    },
	    receive() {
	      return new Promise(function innerReceive(resolve) {
	        const msg = queue.shift();
	        if (msg) return resolve(msg);
	        next = resolve;
	      });
	    }
	  };
	};
	const INIT = "INIT";
	const SUBSCRIBE = "SUBSCRIBE";
	const UNSUBSCRIBE = "UNSUBSCRIBE";
	const UPDATED$2 = "UPDATED";
	const EXIT = "EXIT";
	const TERMINATE = "TERMINATE";
	const root = typeof self === "object" && self.self === self && self || typeof global === "object" && global.global === global && global || typeof window === "object" && window.window === window && window;
	root.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;
	var pid = 0b0;
	const DEFAULT_TIMEOUT = 5000;
	const send = function (addr, tag, data) {
	  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	  return new Promise((reply, reject) => {
	    const expectReply = opts.expectReply || false;
	    const timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;
	    if (expectReply && timeout) {
	      setTimeout(() => reject(new Error(`Timeout: ${timeout}ms passed without a response.`)), timeout);
	    }
	    const payload = {
	      to: addr,
	      from: opts.from,
	      tag,
	      data,
	      timeout,
	      reply,
	      reject
	    };
	    try {
	      root.FCL_REGISTRY[addr] && root.FCL_REGISTRY[addr].mailbox.deliver(payload);
	      if (!expectReply) reply(true);
	    } catch (error) {
	      console.error("FCL.Actor -- Could Not Deliver Message", payload, root.FCL_REGISTRY[addr], error);
	    }
	  });
	};
	const kill = addr => {
	  delete root.FCL_REGISTRY[addr];
	};
	const fromHandlers = function () {
	  let handlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  return async ctx => {
	    if (typeof handlers[INIT] === "function") await handlers[INIT](ctx);
	    __loop: while (1) {
	      const letter = await ctx.receive();
	      try {
	        if (letter.tag === EXIT) {
	          if (typeof handlers[TERMINATE] === "function") {
	            await handlers[TERMINATE](ctx, letter, letter.data || {});
	          }
	          break __loop;
	        }
	        await handlers[letter.tag](ctx, letter, letter.data || {});
	      } catch (error) {
	        console.error(`${ctx.self()} Error`, letter, error);
	      } finally {
	        continue __loop;
	      }
	    }
	  };
	};
	const spawn = function (fn) {
	  let addr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	  if (addr == null) addr = ++pid;
	  if (root.FCL_REGISTRY[addr] != null) return addr;
	  root.FCL_REGISTRY[addr] = {
	    addr,
	    mailbox: mailbox(),
	    subs: new Set(),
	    kvs: {},
	    error: null
	  };
	  const ctx = {
	    self: () => addr,
	    receive: () => root.FCL_REGISTRY[addr].mailbox.receive(),
	    send: function (to, tag, data) {
	      let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	      opts.from = addr;
	      return send(to, tag, data, opts);
	    },
	    sendSelf: (tag, data, opts) => {
	      if (root.FCL_REGISTRY[addr]) send(addr, tag, data, opts);
	    },
	    broadcast: function (tag, data) {
	      let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      opts.from = addr;
	      for (let to of root.FCL_REGISTRY[addr].subs) send(to, tag, data, opts);
	    },
	    subscribe: sub => sub != null && root.FCL_REGISTRY[addr].subs.add(sub),
	    unsubscribe: sub => sub != null && root.FCL_REGISTRY[addr].subs.delete(sub),
	    subscriberCount: () => root.FCL_REGISTRY[addr].subs.size,
	    hasSubs: () => !!root.FCL_REGISTRY[addr].subs.size,
	    put: (key, value) => {
	      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = value;
	    },
	    get: (key, fallback) => {
	      const value = root.FCL_REGISTRY[addr].kvs[key];
	      return value == null ? fallback : value;
	    },
	    delete: key => {
	      delete root.FCL_REGISTRY[addr].kvs[key];
	    },
	    update: (key, fn) => {
	      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = fn(root.FCL_REGISTRY[addr].kvs[key]);
	    },
	    keys: () => {
	      return Object.keys(root.FCL_REGISTRY[addr].kvs);
	    },
	    all: () => {
	      return root.FCL_REGISTRY[addr].kvs;
	    },
	    where: pattern => {
	      return Object.keys(root.FCL_REGISTRY[addr].kvs).reduce((acc, key) => {
	        return pattern.test(key) ? {
	          ...acc,
	          [key]: root.FCL_REGISTRY[addr].kvs[key]
	        } : acc;
	      }, {});
	    },
	    merge: function () {
	      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      Object.keys(data).forEach(key => root.FCL_REGISTRY[addr].kvs[key] = data[key]);
	    },
	    fatalError: error => {
	      root.FCL_REGISTRY[addr].error = error;
	      for (let to of root.FCL_REGISTRY[addr].subs) send(to, UPDATED$2);
	    }
	  };
	  if (typeof fn === "object") fn = fromHandlers(fn);
	  queueMicrotask_1(async () => {
	    await fn(ctx);
	    kill(addr);
	  });
	  return addr;
	};

	// Returns an unsubscribe function
	// A SUBSCRIBE handler will need to be created to handle the subscription event
	//
	//  [SUBSCRIBE]: (ctx, letter) => {
	//    ctx.subscribe(letter.from)
	//    ctx.send(letter.from, UPDATED, ctx.all())
	//  }
	//
	function subscriber(address, spawnFn, callback) {
	  spawnFn(address);
	  const EXIT = "@EXIT";
	  const self = spawn(async ctx => {
	    ctx.send(address, SUBSCRIBE);
	    while (1) {
	      const letter = await ctx.receive();
	      const error = root.FCL_REGISTRY[address].error;
	      if (letter.tag === EXIT) {
	        ctx.send(address, UNSUBSCRIBE);
	        return;
	      }
	      if (error) {
	        callback(null, error);
	        ctx.send(address, UNSUBSCRIBE);
	        return;
	      }
	      callback(letter.data, null);
	    }
	  });
	  return () => send(self, EXIT);
	}

	/**
	 * Asserts fact is true, otherwise throw an error with invariant message
	 * @param {boolean} fact
	 * @param {string} msg
	 * @param {Array} rest
	 * @returns {void}
	 */
	function invariant$1(fact, msg) {
	  if (!fact) {
	    const error = new Error(`INVARIANT ${msg}`);
	    error.stack = error.stack.split("\n").filter(d => !/at invariant/.test(d)).join("\n");
	    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      rest[_key - 2] = arguments[_key];
	    }
	    console.error("\n\n---\n\n", error, "\n\n", ...rest, "\n\n---\n\n");
	    throw error;
	  }
	}
	const pipe$1 = function () {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	  return v => {
	    return funcs.reduce((res, func) => {
	      return func(res);
	    }, v);
	  };
	};

	/***
	 * Merge multiple functions returning objects into one object.
	 * @param {...function(*): object} funcs - Functions to merge
	 * @return {object} - Merged object
	 */
	const mergePipe$1 = function () {
	  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    funcs[_key2] = arguments[_key2];
	  }
	  return v => {
	    return funcs.reduce((res, func) => {
	      return {
	        ...res,
	        ...func(v)
	      };
	    }, {});
	  };
	};

	/**
	 * @description Object check
	 * @param {*} value - Value to check
	 * @returns {boolean} - Is object status
	 */
	const isObject$1 = value => value && typeof value === "object" && !Array.isArray(value);

	/**
	 * @description Deep merge multiple objects.
	 * @param {object} target - Target object
	 * @param {...object[]} sources - Source objects
	 * @returns {object} - Merged object
	 */
	const mergeDeep$1 = function (target) {
	  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	    sources[_key3 - 1] = arguments[_key3];
	  }
	  if (!sources.length) return target;
	  const source = sources.shift();
	  if (isObject$1(target) && isObject$1(source)) {
	    for (const key in source) {
	      if (isObject$1(source[key])) {
	        if (!target[key]) Object.assign(target, {
	          [key]: {}
	        });
	        mergeDeep$1(target[key], source[key]);
	      } else {
	        Object.assign(target, {
	          [key]: source[key]
	        });
	      }
	    }
	  }
	  return mergeDeep$1(target, ...sources);
	};

	/**
	 * @description Deep merge multiple Flow JSON.
	 * @param {object|object[]} value - Flow JSON or array of Flow JSONs
	 * @returns {object} - Merged Flow JSON
	 */
	const mergeFlowJSONs$1 = value => Array.isArray(value) ? mergeDeep$1({}, ...value) : value;

	/**
	 * @description Filter out contracts section of flow.json.
	 * @param {object|object[]} obj - Flow JSON or array of Flow JSONs
	 * @returns {object} - Contracts section of Flow JSON
	 */
	const filterContracts$1 = obj => obj.contracts ? obj.contracts : {};

	/**
	 * @description Gathers contract addresses by network
	 * @param {string} network - Network to gather addresses for
	 * @returns {object} - Contract names by addresses mapping e.g { "HelloWorld": "0x123" }
	 */
	const mapContractAliasesToNetworkAddress$1 = network => contracts => {
	  return Object.entries(contracts).reduce((c, _ref) => {
	    let [key, value] = _ref;
	    const networkContractAlias = value?.aliases?.[network];
	    if (networkContractAlias) {
	      c[key] = networkContractAlias;
	    }
	    return c;
	  }, {});
	};
	const mapDeploymentsToNetworkAddress$1 = network => _ref2 => {
	  let {
	    deployments = {},
	    accounts = {}
	  } = _ref2;
	  const networkDeployment = deployments?.[network];
	  if (!networkDeployment) return {};
	  return Object.entries(networkDeployment).reduce((c, _ref3) => {
	    let [key, value] = _ref3;
	    // Resolve account address
	    const accountAddress = accounts[key]?.address;
	    if (!accountAddress) return c;

	    // Create an object assigning the address to the contract name.
	    return value.reduce((c, contract) => {
	      return {
	        ...c,
	        [contract]: accountAddress
	      };
	    }, {});
	  }, {});
	};

	/**
	 * @description Take in flow.json files and return contract to address mapping by network
	 * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs
	 * @param {string} network - Network to gather addresses for
	 * @returns {object} - Contract names by addresses mapping e.g { "HelloWorld": "0x123" }
	 */
	const getContracts$1 = (jsons, network) => {
	  return pipe$1(mergeFlowJSONs$1, mergePipe$1(mapDeploymentsToNetworkAddress$1(network), pipe$1(filterContracts$1, mapContractAliasesToNetworkAddress$1(network))))(jsons);
	};

	/**
	 * @description Checks if string is hexidecimal
	 * @param {string} str - String to check
	 * @returns {boolean} - Is hexidecimal status
	 */
	const isHexidecimal$1 = str => {
	  // Check that it is a string
	  if (typeof str !== "string") return false;
	  return /^[0-9A-Fa-f]+$/.test(str);
	};

	/**
	 * @description Checks flow.json file for private keys
	 * @param {object} flowJSON - Flow JSON
	 * @returns {boolean} - Has private keys status
	 */
	const hasPrivateKeys$1 = flowJSON => {
	  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {
	    let [key, value] = _ref4;
	    if (hasPrivateKey) return true;
	    return value?.hasOwnProperty("key") && isHexidecimal$1(value?.key);
	  }, false);
	};

	/**
	 * @description Take in flow.json or array of flow.json files and checks for private keys
	 * @param {object|object[]} value - Flow JSON or array of Flow JSONs
	 * @returns {boolean} - Has private keys status
	 */
	const anyHasPrivateKeys$1 = value => {
	  if (isObject$1(value)) return hasPrivateKeys$1(value);
	  return value.some(hasPrivateKeys$1);
	};

	/**
	 * @description Format network to always be 'emulator', 'testnet', or 'mainnet'
	 * @param {string} network - Network to format
	 * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')
	 */
	const cleanNetwork$1 = network => network?.toLowerCase() === "local" ? "emulator" : network?.toLowerCase();
	const NAME$1 = "config";
	const PUT$1 = "PUT_CONFIG";
	const GET$1 = "GET_CONFIG";
	const GET_ALL$1 = "GET_ALL_CONFIG";
	const UPDATE$1 = "UPDATE_CONFIG";
	const DELETE$1 = "DELETE_CONFIG";
	const CLEAR$1 = "CLEAR_CONFIG";
	const WHERE$1 = "WHERE_CONFIG";
	const UPDATED$1 = "CONFIG/UPDATED";
	const identity$1 = v => v;
	const HANDLERS$1 = {
	  [PUT$1]: (ctx, _letter, _ref) => {
	    let {
	      key,
	      value
	    } = _ref;
	    if (key == null) throw new Error("Missing 'key' for config/put.");
	    ctx.put(key, value);
	    ctx.broadcast(UPDATED$1, {
	      ...ctx.all()
	    });
	  },
	  [GET$1]: (ctx, letter, _ref2) => {
	    let {
	      key,
	      fallback
	    } = _ref2;
	    if (key == null) throw new Error("Missing 'key' for config/get");
	    letter.reply(ctx.get(key, fallback));
	  },
	  [GET_ALL$1]: (ctx, letter) => {
	    letter.reply({
	      ...ctx.all()
	    });
	  },
	  [UPDATE$1]: (ctx, letter, _ref3) => {
	    let {
	      key,
	      fn
	    } = _ref3;
	    if (key == null) throw new Error("Missing 'key' for config/update");
	    ctx.update(key, fn || identity$1);
	    ctx.broadcast(UPDATED$1, {
	      ...ctx.all()
	    });
	  },
	  [DELETE$1]: (ctx, letter, _ref4) => {
	    let {
	      key
	    } = _ref4;
	    if (key == null) throw new Error("Missing 'key' for config/delete");
	    ctx.delete(key);
	    ctx.broadcast(UPDATED$1, {
	      ...ctx.all()
	    });
	  },
	  [CLEAR$1]: (ctx, letter) => {
	    let keys = Object.keys(ctx.all());
	    for (let key of keys) ctx.delete(key);
	    ctx.broadcast(UPDATED$1, {
	      ...ctx.all()
	    });
	  },
	  [WHERE$1]: (ctx, letter, _ref5) => {
	    let {
	      pattern
	    } = _ref5;
	    if (pattern == null) throw new Error("Missing 'pattern' for config/where");
	    letter.reply(ctx.where(pattern));
	  },
	  [SUBSCRIBE]: (ctx, letter) => {
	    ctx.subscribe(letter.from);
	    ctx.send(letter.from, UPDATED$1, {
	      ...ctx.all()
	    });
	  },
	  [UNSUBSCRIBE]: (ctx, letter) => {
	    ctx.unsubscribe(letter.from);
	  }
	};
	spawn(HANDLERS$1, NAME$1);

	/**
	 * @description Adds a key-value pair to the config
	 * @param {string} key - The key to add
	 * @param {*} value - The value to add
	 * @returns {Promise<object>} - The current config
	 */
	function put$1(key, value) {
	  send(NAME$1, PUT$1, {
	    key,
	    value
	  });
	  return config$1();
	}

	/**
	 * @description Gets a key-value pair with a fallback from the config
	 * @param {string} key - The key to add
	 * @param {*} [fallback] - The fallback value to return if key is not found
	 * @returns {Promise<*>} - The value found at key or fallback
	 */
	function get$1(key, fallback) {
	  return send(NAME$1, GET$1, {
	    key,
	    fallback
	  }, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Returns the first non null config value or the fallback
	 * @param {string[]} wants - The keys to search for
	 * @param {*} fallback - The fallback value to return if key is not found
	 * @returns {Promise<*>} - The value found at key or fallback
	 */
	async function first$1() {
	  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  let fallback = arguments.length > 1 ? arguments[1] : undefined;
	  if (!wants.length) return fallback;
	  const [head, ...rest] = wants;
	  const ret = await get$1(head);
	  if (ret == null) return first$1(rest, fallback);
	  return ret;
	}

	/**
	 * @description Returns the current config
	 * @returns {Promise<object>} - The current config
	 */
	function all$1() {
	  return send(NAME$1, GET_ALL$1, null, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Updates a key-value pair in the config
	 * @param {string} key - The key to update
	 * @param {Function} fn - The function to update the value with
	 * @returns {Promise<object>} - The current config
	 */
	function update$1(key) {
	  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$1;
	  send(NAME$1, UPDATE$1, {
	    key,
	    fn
	  });
	  return config$1();
	}

	/**
	 * @description Deletes a key-value pair from the config
	 * @param {string} key - The key to delete
	 * @returns {Promise<object>} - The current config
	 */
	function _delete$1(key) {
	  send(NAME$1, DELETE$1, {
	    key
	  });
	  return config$1();
	}

	/**
	 * @description Returns a subset of the config based on a pattern
	 * @param {string} pattern - The pattern to match keys against
	 * @returns {Promise<object>} - The subset of the config
	 */
	function where$1(pattern) {
	  return send(NAME$1, WHERE$1, {
	    pattern
	  }, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Subscribes to config updates
	 * @param {Function} callback - The callback to call when config is updated
	 * @returns {Function} - The unsubscribe function
	 */
	function subscribe$1(callback) {
	  return subscriber(NAME$1, () => spawn(HANDLERS$1, NAME$1), callback);
	}

	/**
	 * @description Clears the config
	 * @returns {void}
	 */
	function clearConfig$1() {
	  return send(NAME$1, CLEAR$1);
	}

	/**
	 * @description Resets the config to a previous state
	 * @param {object} oldConfig - The previous config state
	 * @returns {Promise<object>} - The current config
	 */
	function resetConfig$1(oldConfig) {
	  return clearConfig$1().then(config$1(oldConfig));
	}

	/**
	 * @description Takes in flow.json or array of flow.json files and creates contract placeholders
	 * @param {object|object[]} data - The flow.json or array of flow.json files
	 * @returns {void}
	 */
	async function load$1(data) {
	  const network = await get$1("flow.network");
	  const cleanedNetwork = cleanNetwork$1(network);
	  const {
	    flowJSON
	  } = data;
	  invariant$1(Boolean(flowJSON), "config.load -- 'flowJSON' must be defined");
	  invariant$1(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define "flow.network" to "emulator", "local", "testnet", or "mainnet" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);
	  if (anyHasPrivateKeys$1(flowJSON)) {
	    const isEmulator = cleanedNetwork === "emulator";
	    log$1({
	      title: "Private Keys Detected",
	      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,
	      level: isEmulator ? LEVELS$1.warn : LEVELS$1.error
	    });
	    if (!isEmulator) return;
	  }
	  for (const [key, value] of Object.entries(getContracts$1(flowJSON, cleanedNetwork))) {
	    const contractConfigKey = `0x${key}`;
	    const existingContractConfigKey = await get$1(contractConfigKey);
	    if (existingContractConfigKey && existingContractConfigKey !== value) {
	      log$1({
	        title: "Contract Placeholder Conflict Detected",
	        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
	        level: LEVELS$1.warn
	      });
	    } else {
	      put$1(contractConfigKey, value);
	    }
	    const systemContractConfigKey = `system.contracts.${key}`;
	    const systemExistingContractConfigKeyValue = await get$1(systemContractConfigKey);
	    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {
	      log$1({
	        title: "Contract Placeholder Conflict Detected",
	        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
	        level: LEVELS$1.warn
	      });
	    } else {
	      put$1(systemContractConfigKey, value);
	    }
	  }
	}

	// eslint-disable-next-line jsdoc/require-returns
	/**
	 * @description Sets the config
	 * @param {object} [values] - The values to set
	 */
	function config$1(values) {
	  if (values != null && typeof values === "object") {
	    Object.keys(values).map(d => put$1(d, values[d]));
	  }
	  return {
	    put: put$1,
	    get: get$1,
	    all: all$1,
	    first: first$1,
	    update: update$1,
	    delete: _delete$1,
	    where: where$1,
	    subscribe: subscribe$1,
	    overload: overload$1,
	    load: load$1
	  };
	}
	config$1.put = put$1;
	config$1.get = get$1;
	config$1.all = all$1;
	config$1.first = first$1;
	config$1.update = update$1;
	config$1.delete = _delete$1;
	config$1.where = where$1;
	config$1.subscribe = subscribe$1;
	config$1.overload = overload$1;
	config$1.load = load$1;
	const noop$1 = v => v;
	function overload$1() {
	  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$1;
	  return new Promise(async (resolve, reject) => {
	    const oldConfig = await all$1();
	    try {
	      config$1(opts);
	      var result = await callback(await all$1());
	      await resetConfig$1(oldConfig);
	      resolve(result);
	    } catch (error) {
	      await resetConfig$1(oldConfig);
	      reject(error);
	    }
	  });
	}

	/**
	 * The levels of the logger
	 * 
	 * @typedef {Object} LEVELS
	 * @property {number} debug - The debug level
	 * @property {number} info - The info level
	 * @property {number} log - The log level
	 * @property {number} warn - The warn level
	 * @property {number} error - The error level
	 * 
	 */
	const LEVELS$1 = Object.freeze({
	  debug: 5,
	  info: 4,
	  log: 3,
	  warn: 2,
	  error: 1
	});

	/**
	 * Builds a message formatted for the logger
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.title - The title of the log
	 * @param {string} options.message - The message of the log
	 * @returns {Array<string>} - The message formatted for the logger
	 * 
	 * @example
	 * buildLoggerMessageArgs({ title: "My Title", message: "My Message" })
	 */
	const buildLoggerMessageArgs$1 = _ref => {
	  let {
	    title,
	    message
	  } = _ref;
	  return [`
    %c${title}
    ============================

    ${message}

    ============================
    `.replace(/\n[^\S\r\n]+/g, "\n").trim(),, "font-weight:bold;font-family:monospace;"];
	};

	/**
	 * Logs messages based on the level of the message and the level set in the config
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.title - The title of the log
	 * @param {string} options.message - The message of the log
	 * @param {number} options.level - The level of the log
	 * @param {boolean} options.always - Whether to always show the log
	 * @returns {Promise<void>}
	 * 
	 * @example
	 * log({ title: "My Title", message: "My Message", level: LEVELS.warn, always: false })
	 * 
	 */
	const log$1 = async _ref2 => {
	  let {
	    title,
	    message,
	    level,
	    always = false
	  } = _ref2;
	  const configLoggerLevel = await config$1.get("logger.level", LEVELS$1.warn);

	  // If config level is below message level then don't show it
	  if (!always && configLoggerLevel < level) return;
	  const loggerMessageArgs = buildLoggerMessageArgs$1({
	    title,
	    message
	  });
	  switch (level) {
	    case LEVELS$1.debug:
	      console.debug(...loggerMessageArgs);
	      break;
	    case LEVELS$1.info:
	      console.info(...loggerMessageArgs);
	      break;
	    case LEVELS$1.warn:
	      console.warn(...loggerMessageArgs);
	      break;
	    case LEVELS$1.error:
	      console.error(...loggerMessageArgs);
	      break;
	    default:
	      console.log(...loggerMessageArgs);
	  }
	};

	/**
	 * Logs a deprecation notice
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.pkg - The package that is being deprecated
	 * @param {string} options.subject - The subject of the deprecation
	 * @param {string} options.transition - The transition path for the deprecation
	 * @param {number} options.level - The level of the log
	 * @param {string} options.message - The message of the log
	 * @param {Function} options.callback - A callback to run after the log
	 * @returns {Promise<void>}
	 * 
	 * @example
	 * log.deprecate({ pkg: "@onflow/fcl", subject: "Some item", transition: "https://github.com/onflow/flow-js-sdk", message: "Descriptive message", level: LEVELS.warn, callback: () => {} })
	 * 
	 */
	log$1.deprecate = _ref3 => {
	  let {
	    pkg,
	    subject,
	    transition,
	    level = LEVELS$1.warn,
	    message = "",
	    callback = null
	  } = _ref3;
	  const capitalizeFirstLetter = string => {
	    return string.charAt(0).toUpperCase() + string.slice(1);
	  };
	  const logMessage = () => log$1({
	    title: `${pkg ? pkg + " " : ""}Deprecation Notice`,
	    message: `
      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? " of " + pkg : ""}.` : ""}${message ? "\n" + message : ""}${transition ? `\nYou can learn more (including a guide on common transition paths) here: ${transition}` : ""}
    `.trim(),
	    level
	  });
	  if (typeof callback === "function") {
	    return async function () {
	      await logMessage();
	      return await callback(...arguments);
	    };
	  }
	  return logMessage();
	};

	/**
	 * Asserts fact is true, otherwise throw an error with invariant message
	 * @param {boolean} fact
	 * @param {string} msg
	 * @param {Array} rest
	 * @returns {void}
	 */
	function invariant(fact, msg) {
	  if (!fact) {
	    const error = new Error(`INVARIANT ${msg}`);
	    error.stack = error.stack.split("\n").filter(d => !/at invariant/.test(d)).join("\n");
	    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      rest[_key - 2] = arguments[_key];
	    }
	    console.error("\n\n---\n\n", error, "\n\n", ...rest, "\n\n---\n\n");
	    throw error;
	  }
	}
	const pipe = function () {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	  return v => {
	    return funcs.reduce((res, func) => {
	      return func(res);
	    }, v);
	  };
	};

	/***
	 * Merge multiple functions returning objects into one object.
	 * @param {...function(*): object} funcs - Functions to merge
	 * @return {object} - Merged object
	 */
	const mergePipe = function () {
	  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    funcs[_key2] = arguments[_key2];
	  }
	  return v => {
	    return funcs.reduce((res, func) => {
	      return {
	        ...res,
	        ...func(v)
	      };
	    }, {});
	  };
	};

	/**
	 * @description Object check
	 * @param {*} value - Value to check
	 * @returns {boolean} - Is object status
	 */
	const isObject = value => value && typeof value === "object" && !Array.isArray(value);

	/**
	 * @description Deep merge multiple objects.
	 * @param {object} target - Target object
	 * @param {...object[]} sources - Source objects
	 * @returns {object} - Merged object
	 */
	const mergeDeep = function (target) {
	  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	    sources[_key3 - 1] = arguments[_key3];
	  }
	  if (!sources.length) return target;
	  const source = sources.shift();
	  if (isObject(target) && isObject(source)) {
	    for (const key in source) {
	      if (isObject(source[key])) {
	        if (!target[key]) Object.assign(target, {
	          [key]: {}
	        });
	        mergeDeep(target[key], source[key]);
	      } else {
	        Object.assign(target, {
	          [key]: source[key]
	        });
	      }
	    }
	  }
	  return mergeDeep(target, ...sources);
	};

	/**
	 * @description Deep merge multiple Flow JSON.
	 * @param {object|object[]} value - Flow JSON or array of Flow JSONs
	 * @returns {object} - Merged Flow JSON
	 */
	const mergeFlowJSONs = value => Array.isArray(value) ? mergeDeep({}, ...value) : value;

	/**
	 * @description Filter out contracts section of flow.json.
	 * @param {object|object[]} obj - Flow JSON or array of Flow JSONs
	 * @returns {object} - Contracts section of Flow JSON
	 */
	const filterContracts = obj => obj.contracts ? obj.contracts : {};

	/**
	 * @description Gathers contract addresses by network
	 * @param {string} network - Network to gather addresses for
	 * @returns {object} - Contract names by addresses mapping e.g { "HelloWorld": "0x123" }
	 */
	const mapContractAliasesToNetworkAddress = network => contracts => {
	  return Object.entries(contracts).reduce((c, _ref) => {
	    let [key, value] = _ref;
	    const networkContractAlias = value?.aliases?.[network];
	    if (networkContractAlias) {
	      c[key] = networkContractAlias;
	    }
	    return c;
	  }, {});
	};
	const mapDeploymentsToNetworkAddress = network => _ref2 => {
	  let {
	    deployments = {},
	    accounts = {}
	  } = _ref2;
	  const networkDeployment = deployments?.[network];
	  if (!networkDeployment) return {};
	  return Object.entries(networkDeployment).reduce((c, _ref3) => {
	    let [key, value] = _ref3;
	    // Resolve account address
	    const accountAddress = accounts[key]?.address;
	    if (!accountAddress) return c;

	    // Create an object assigning the address to the contract name.
	    return value.reduce((c, contract) => {
	      return {
	        ...c,
	        [contract]: accountAddress
	      };
	    }, {});
	  }, {});
	};

	/**
	 * @description Take in flow.json files and return contract to address mapping by network
	 * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs
	 * @param {string} network - Network to gather addresses for
	 * @returns {object} - Contract names by addresses mapping e.g { "HelloWorld": "0x123" }
	 */
	const getContracts = (jsons, network) => {
	  return pipe(mergeFlowJSONs, mergePipe(mapDeploymentsToNetworkAddress(network), pipe(filterContracts, mapContractAliasesToNetworkAddress(network))))(jsons);
	};

	/**
	 * @description Checks if string is hexidecimal
	 * @param {string} str - String to check
	 * @returns {boolean} - Is hexidecimal status
	 */
	const isHexidecimal = str => {
	  // Check that it is a string
	  if (typeof str !== "string") return false;
	  return /^[0-9A-Fa-f]+$/.test(str);
	};

	/**
	 * @description Checks flow.json file for private keys
	 * @param {object} flowJSON - Flow JSON
	 * @returns {boolean} - Has private keys status
	 */
	const hasPrivateKeys = flowJSON => {
	  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {
	    let [key, value] = _ref4;
	    if (hasPrivateKey) return true;
	    return value?.hasOwnProperty("key") && isHexidecimal(value?.key);
	  }, false);
	};

	/**
	 * @description Take in flow.json or array of flow.json files and checks for private keys
	 * @param {object|object[]} value - Flow JSON or array of Flow JSONs
	 * @returns {boolean} - Has private keys status
	 */
	const anyHasPrivateKeys = value => {
	  if (isObject(value)) return hasPrivateKeys(value);
	  return value.some(hasPrivateKeys);
	};

	/**
	 * @description Format network to always be 'emulator', 'testnet', or 'mainnet'
	 * @param {string} network - Network to format
	 * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')
	 */
	const cleanNetwork = network => network?.toLowerCase() === "local" ? "emulator" : network?.toLowerCase();
	const NAME = "config";
	const PUT = "PUT_CONFIG";
	const GET = "GET_CONFIG";
	const GET_ALL = "GET_ALL_CONFIG";
	const UPDATE = "UPDATE_CONFIG";
	const DELETE = "DELETE_CONFIG";
	const CLEAR = "CLEAR_CONFIG";
	const WHERE = "WHERE_CONFIG";
	const UPDATED = "CONFIG/UPDATED";
	const identity$2 = v => v;
	const HANDLERS = {
	  [PUT]: (ctx, _letter, _ref) => {
	    let {
	      key,
	      value
	    } = _ref;
	    if (key == null) throw new Error("Missing 'key' for config/put.");
	    ctx.put(key, value);
	    ctx.broadcast(UPDATED, {
	      ...ctx.all()
	    });
	  },
	  [GET]: (ctx, letter, _ref2) => {
	    let {
	      key,
	      fallback
	    } = _ref2;
	    if (key == null) throw new Error("Missing 'key' for config/get");
	    letter.reply(ctx.get(key, fallback));
	  },
	  [GET_ALL]: (ctx, letter) => {
	    letter.reply({
	      ...ctx.all()
	    });
	  },
	  [UPDATE]: (ctx, letter, _ref3) => {
	    let {
	      key,
	      fn
	    } = _ref3;
	    if (key == null) throw new Error("Missing 'key' for config/update");
	    ctx.update(key, fn || identity$2);
	    ctx.broadcast(UPDATED, {
	      ...ctx.all()
	    });
	  },
	  [DELETE]: (ctx, letter, _ref4) => {
	    let {
	      key
	    } = _ref4;
	    if (key == null) throw new Error("Missing 'key' for config/delete");
	    ctx.delete(key);
	    ctx.broadcast(UPDATED, {
	      ...ctx.all()
	    });
	  },
	  [CLEAR]: (ctx, letter) => {
	    let keys = Object.keys(ctx.all());
	    for (let key of keys) ctx.delete(key);
	    ctx.broadcast(UPDATED, {
	      ...ctx.all()
	    });
	  },
	  [WHERE]: (ctx, letter, _ref5) => {
	    let {
	      pattern
	    } = _ref5;
	    if (pattern == null) throw new Error("Missing 'pattern' for config/where");
	    letter.reply(ctx.where(pattern));
	  },
	  [SUBSCRIBE]: (ctx, letter) => {
	    ctx.subscribe(letter.from);
	    ctx.send(letter.from, UPDATED, {
	      ...ctx.all()
	    });
	  },
	  [UNSUBSCRIBE]: (ctx, letter) => {
	    ctx.unsubscribe(letter.from);
	  }
	};
	spawn(HANDLERS, NAME);

	/**
	 * @description Adds a key-value pair to the config
	 * @param {string} key - The key to add
	 * @param {*} value - The value to add
	 * @returns {Promise<object>} - The current config
	 */
	function put(key, value) {
	  send(NAME, PUT, {
	    key,
	    value
	  });
	  return config();
	}

	/**
	 * @description Gets a key-value pair with a fallback from the config
	 * @param {string} key - The key to add
	 * @param {*} [fallback] - The fallback value to return if key is not found
	 * @returns {Promise<*>} - The value found at key or fallback
	 */
	function get(key, fallback) {
	  return send(NAME, GET, {
	    key,
	    fallback
	  }, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Returns the first non null config value or the fallback
	 * @param {string[]} wants - The keys to search for
	 * @param {*} fallback - The fallback value to return if key is not found
	 * @returns {Promise<*>} - The value found at key or fallback
	 */
	async function first() {
	  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  let fallback = arguments.length > 1 ? arguments[1] : undefined;
	  if (!wants.length) return fallback;
	  const [head, ...rest] = wants;
	  const ret = await get(head);
	  if (ret == null) return first(rest, fallback);
	  return ret;
	}

	/**
	 * @description Returns the current config
	 * @returns {Promise<object>} - The current config
	 */
	function all() {
	  return send(NAME, GET_ALL, null, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Updates a key-value pair in the config
	 * @param {string} key - The key to update
	 * @param {Function} fn - The function to update the value with
	 * @returns {Promise<object>} - The current config
	 */
	function update(key) {
	  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$2;
	  send(NAME, UPDATE, {
	    key,
	    fn
	  });
	  return config();
	}

	/**
	 * @description Deletes a key-value pair from the config
	 * @param {string} key - The key to delete
	 * @returns {Promise<object>} - The current config
	 */
	function _delete(key) {
	  send(NAME, DELETE, {
	    key
	  });
	  return config();
	}

	/**
	 * @description Returns a subset of the config based on a pattern
	 * @param {string} pattern - The pattern to match keys against
	 * @returns {Promise<object>} - The subset of the config
	 */
	function where(pattern) {
	  return send(NAME, WHERE, {
	    pattern
	  }, {
	    expectReply: true,
	    timeout: 10
	  });
	}

	/**
	 * @description Subscribes to config updates
	 * @param {Function} callback - The callback to call when config is updated
	 * @returns {Function} - The unsubscribe function
	 */
	function subscribe(callback) {
	  return subscriber(NAME, () => spawn(HANDLERS, NAME), callback);
	}

	/**
	 * @description Clears the config
	 * @returns {void}
	 */
	function clearConfig() {
	  return send(NAME, CLEAR);
	}

	/**
	 * @description Resets the config to a previous state
	 * @param {object} oldConfig - The previous config state
	 * @returns {Promise<object>} - The current config
	 */
	function resetConfig(oldConfig) {
	  return clearConfig().then(config(oldConfig));
	}

	/**
	 * @description Takes in flow.json or array of flow.json files and creates contract placeholders
	 * @param {object|object[]} data - The flow.json or array of flow.json files
	 * @returns {void}
	 */
	async function load(data) {
	  const network = await get("flow.network");
	  const cleanedNetwork = cleanNetwork(network);
	  const {
	    flowJSON
	  } = data;
	  invariant(Boolean(flowJSON), "config.load -- 'flowJSON' must be defined");
	  invariant(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define "flow.network" to "emulator", "local", "testnet", or "mainnet" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);
	  if (anyHasPrivateKeys(flowJSON)) {
	    const isEmulator = cleanedNetwork === "emulator";
	    log$1({
	      title: "Private Keys Detected",
	      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,
	      level: isEmulator ? LEVELS$1.warn : LEVELS$1.error
	    });
	    if (!isEmulator) return;
	  }
	  for (const [key, value] of Object.entries(getContracts(flowJSON, cleanedNetwork))) {
	    const contractConfigKey = `0x${key}`;
	    const existingContractConfigKey = await get(contractConfigKey);
	    if (existingContractConfigKey && existingContractConfigKey !== value) {
	      log$1({
	        title: "Contract Placeholder Conflict Detected",
	        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
	        level: LEVELS$1.warn
	      });
	    } else {
	      put(contractConfigKey, value);
	    }
	    const systemContractConfigKey = `system.contracts.${key}`;
	    const systemExistingContractConfigKeyValue = await get(systemContractConfigKey);
	    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {
	      log$1({
	        title: "Contract Placeholder Conflict Detected",
	        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
	        level: LEVELS$1.warn
	      });
	    } else {
	      put(systemContractConfigKey, value);
	    }
	  }
	}

	// eslint-disable-next-line jsdoc/require-returns
	/**
	 * @description Sets the config
	 * @param {object} [values] - The values to set
	 */
	function config(values) {
	  if (values != null && typeof values === "object") {
	    Object.keys(values).map(d => put(d, values[d]));
	  }
	  return {
	    put,
	    get,
	    all,
	    first,
	    update,
	    delete: _delete,
	    where,
	    subscribe,
	    overload,
	    load
	  };
	}
	config.put = put;
	config.get = get;
	config.all = all;
	config.first = first;
	config.update = update;
	config.delete = _delete;
	config.where = where;
	config.subscribe = subscribe;
	config.overload = overload;
	config.load = load;
	const noop = v => v;
	function overload() {
	  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
	  return new Promise(async (resolve, reject) => {
	    const oldConfig = await all();
	    try {
	      config(opts);
	      var result = await callback(await all());
	      await resetConfig(oldConfig);
	      resolve(result);
	    } catch (error) {
	      await resetConfig(oldConfig);
	      reject(error);
	    }
	  });
	}

	/**
	 * The levels of the logger
	 * 
	 * @typedef {Object} LEVELS
	 * @property {number} debug - The debug level
	 * @property {number} info - The info level
	 * @property {number} log - The log level
	 * @property {number} warn - The warn level
	 * @property {number} error - The error level
	 * 
	 */
	const LEVELS = Object.freeze({
	  debug: 5,
	  info: 4,
	  log: 3,
	  warn: 2,
	  error: 1
	});

	/**
	 * Builds a message formatted for the logger
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.title - The title of the log
	 * @param {string} options.message - The message of the log
	 * @returns {Array<string>} - The message formatted for the logger
	 * 
	 * @example
	 * buildLoggerMessageArgs({ title: "My Title", message: "My Message" })
	 */
	const buildLoggerMessageArgs = _ref => {
	  let {
	    title,
	    message
	  } = _ref;
	  return [`
    %c${title}
    ============================

    ${message}

    ============================
    `.replace(/\n[^\S\r\n]+/g, "\n").trim(),, "font-weight:bold;font-family:monospace;"];
	};

	/**
	 * Logs messages based on the level of the message and the level set in the config
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.title - The title of the log
	 * @param {string} options.message - The message of the log
	 * @param {number} options.level - The level of the log
	 * @param {boolean} options.always - Whether to always show the log
	 * @returns {Promise<void>}
	 * 
	 * @example
	 * log({ title: "My Title", message: "My Message", level: LEVELS.warn, always: false })
	 * 
	 */
	const log = async _ref2 => {
	  let {
	    title,
	    message,
	    level,
	    always = false
	  } = _ref2;
	  const configLoggerLevel = await config.get("logger.level", LEVELS.warn);

	  // If config level is below message level then don't show it
	  if (!always && configLoggerLevel < level) return;
	  const loggerMessageArgs = buildLoggerMessageArgs({
	    title,
	    message
	  });
	  switch (level) {
	    case LEVELS.debug:
	      console.debug(...loggerMessageArgs);
	      break;
	    case LEVELS.info:
	      console.info(...loggerMessageArgs);
	      break;
	    case LEVELS.warn:
	      console.warn(...loggerMessageArgs);
	      break;
	    case LEVELS.error:
	      console.error(...loggerMessageArgs);
	      break;
	    default:
	      console.log(...loggerMessageArgs);
	  }
	};

	/**
	 * Logs a deprecation notice
	 * 
	 * @param {Object} options - The options for the log
	 * @param {string} options.pkg - The package that is being deprecated
	 * @param {string} options.subject - The subject of the deprecation
	 * @param {string} options.transition - The transition path for the deprecation
	 * @param {number} options.level - The level of the log
	 * @param {string} options.message - The message of the log
	 * @param {Function} options.callback - A callback to run after the log
	 * @returns {Promise<void>}
	 * 
	 * @example
	 * log.deprecate({ pkg: "@onflow/fcl", subject: "Some item", transition: "https://github.com/onflow/flow-js-sdk", message: "Descriptive message", level: LEVELS.warn, callback: () => {} })
	 * 
	 */
	log.deprecate = _ref3 => {
	  let {
	    pkg,
	    subject,
	    transition,
	    level = LEVELS.warn,
	    message = "",
	    callback = null
	  } = _ref3;
	  const capitalizeFirstLetter = string => {
	    return string.charAt(0).toUpperCase() + string.slice(1);
	  };
	  const logMessage = () => log({
	    title: `${pkg ? pkg + " " : ""}Deprecation Notice`,
	    message: `
      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? " of " + pkg : ""}.` : ""}${message ? "\n" + message : ""}${transition ? `\nYou can learn more (including a guide on common transition paths) here: ${transition}` : ""}
    `.trim(),
	    level
	  });
	  if (typeof callback === "function") {
	    return async function () {
	      await logMessage();
	      return await callback(...arguments);
	    };
	  }
	  return logMessage();
	};
	function interleave() {
	  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	  let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	  if (!a.length && !b.length) return c;
	  if (!a.length) return c;
	  if (!b.length) return [...c, a[0]];
	  const [aHead, ...aRest] = a;
	  const [bHead, ...bRest] = b;
	  if (aHead !== undefined) c.push(aHead);
	  if (bHead !== undefined) c.push(bHead);
	  return interleave(aRest, bRest, c);
	}
	function recApply(d) {
	  return function (arg1) {
	    if (typeof arg1 === "function") {
	      log.deprecate({
	        pkg: "FCL/SDK",
	        subject: "Interopolation of functions into template literals",
	        transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params"
	      });
	      return recApply(d)(arg1(d));
	    }
	    return String(arg1);
	  };
	}

	/**
	 * @param {(string|Array.<*>)} head
	 * @param {Array.<*>} rest
	 * @returns {{function(): string}}
	 */
	function template(head) {
	  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    rest[_key - 1] = arguments[_key];
	  }
	  if (typeof head === "string") return () => head;
	  if (Array.isArray(head)) {
	    return d => interleave(head, rest.map(recApply(d))).join("").trim();
	  }
	  return head;
	}

	function validator(cb) {
	  return update$2("ix.validators", validators => Array.isArray(validators) ? validators.push(cb) : [cb]);
	}

	/**
	 * @description - A builder function that returns a partial interaction to a block at a specific height
	 * @param {number} height - The height of the block to get
	 * @returns {object} - A partial interaction object
	 */
	function atBlockHeight(height) {
	  return pipe$2([ix => {
	    ix.block.height = height;
	    return ix;
	  }, validator(ix => {
	    if (typeof ix.block.isSealed === "boolean") throw new Error("Unable to specify both block height and isSealed.");
	    if (ix.block.id) throw new Error("Unable to specify both block height and block id.");
	    return ix;
	  })]);
	}

	function atBlockId(id) {
	  return pipe$2([ix => {
	    ix.block.id = id;
	    return Ok(ix);
	  }, validator((ix, _ref) => {
	    let {
	      Ok,
	      Bad
	    } = _ref;
	    if (isGetAccount(ix)) return Bad(ix, "Unable to specify a block id with a Get Account interaction.");
	    if (typeof ix.block.isSealed === "boolean") return Bad(ix, "Unable to specify both block id and isSealed.");
	    if (ix.block.height) return Bad(ix, "Unable to specify both block id and block height.");
	    return Ok(ix);
	  })]);
	}

	/**
	 * @typedef {import("@onflow/typedefs").Account} Account
	 */

	/**
	 * @description  Returns the details of an account from their public address
	 * @param {string} address - Address of the account
	 * @param {object} [queryOptions] - Query parameters
	 * @param {number} [queryOptions.height] - Block height to query
	 * @param {string} [queryOptions.id] - Block ID to query
	 * @param {object} [opts] - Optional parameters
	 * @returns {Promise<Account>} - A promise that resolves to an account response
	 */
	function account(address) {
	  let {
	    height,
	    id
	  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  let opts = arguments.length > 2 ? arguments[2] : undefined;
	  invariant$3(!(id && height), `Method: account -- Cannot pass "id" and "height" simultaneously`);

	  // Get account by ID
	  if (id) return send$1([getAccount(address), atBlockId(id)], opts).then(decodeResponse);

	  // Get account by height
	  if (height) return send$1([getAccount(address), atBlockHeight(height)], opts).then(decodeResponse);
	  return send$1([getAccount(address)], opts).then(decodeResponse);
	}

	/**
	 * @typedef {import("@onflow/typedefs").Block} Block
	 */

	/**
	 * @description Returns the latest block (optionally sealed or not), by id, or by height
	 * @param {object} [queryOptions] - Query parameters
	 * @param {boolean} [queryOptions.sealed=false] - Whether to query for a sealed block
	 * @param {number} [queryOptions.height] - Block height to query
	 * @param {string} [queryOptions.id] - Block ID to query
	 * @param {object} [opts] - Optional parameters
	 * @returns {Promise<Block>} - A promise that resolves to a block response
	 */
	function block() {
	  let {
	    sealed = false,
	    id,
	    height
	  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  invariant$3(!(sealed && id || sealed && height), `Method: block -- Cannot pass "sealed" with "id" or "height"`);
	  invariant$3(!(id && height), `Method: block -- Cannot pass "id" and "height" simultaneously`);

	  // Get block by ID
	  if (id) return send$1([getBlock(), atBlockId(id)], opts).then(decodeResponse);

	  // Get block by height
	  if (height) return send$1([getBlock(), atBlockHeight(height)], opts).then(decodeResponse);

	  // Get latest block
	  return send$1([getBlock(sealed)], opts).then(decodeResponse);
	}

	function authorizations() {
	  let ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  return pipe$2(ax.map(authz => {
	    return prepAccount(authz, {
	      role: AUTHORIZER
	    });
	  }));
	}
	function authorization(addr, signingFunction, keyId, sequenceNum) {
	  return {
	    addr,
	    signingFunction,
	    keyId,
	    sequenceNum
	  };
	}

	function getEvents(eventType, start, end) {
	  if (typeof start !== "undefined" || typeof end !== "undefined") {
	    log$2.deprecate({
	      pkg: "FCL/SDK",
	      subject: "Passing a start and end into getEvents",
	      transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0005-deprecate-start-end-get-events-builder"
	    });
	  }
	  return pipe$2([makeGetEvents, ix => {
	    ix.events.eventType = eventType;
	    ix.events.start = start;
	    ix.events.end = end;
	    return Ok(ix);
	  }]);
	}

	/**
	 * @description - A builder function that returns all instances of a particular event (by name) within a height range
	 * NOTE:
	 * - The block range provided must be from the current spork.
	 * - The block range provided must be 250 blocks or lower per request.
	 * @param {string} eventName - The name of the event to get
	 * @param {number} fromBlockHeight - The height of the block to start looking for events (inclusive)
	 * @param {number} toBlockHeight - The height of the block to stop looking for events (inclusive)
	 * @returns {object} - An interaction object
	 */
	function getEventsAtBlockHeightRange(eventName, fromBlockHeight, toBlockHeight) {
	  return pipe$2([makeGetEvents, ix => {
	    ix.events.eventType = eventName;
	    ix.events.start = fromBlockHeight;
	    ix.events.end = toBlockHeight;
	    return Ok(ix);
	  }]);
	}

	/**
	 * @description - A builder function that returns all instances of a particular event (by name) within a set of blocks, specified by block ids
	 * NOTE:
	 * - The block range provided must be from the current spork.
	 * @param {string} eventName - The name of the event to get
	 * @param {number[]} blockIds - The ids of the blocks to look for events
	 * @returns {object} - An interaction object
	 */
	function getEventsAtBlockIds(eventName) {
	  let blockIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	  return pipe$2([makeGetEvents, ix => {
	    ix.events.eventType = eventName;
	    ix.events.blockIds = blockIds;
	    return Ok(ix);
	  }]);
	}

	/**
	 * @description - A builder function that returns the interaction to get a block header
	 * @param {boolean} [isSealed] - Whether or not the block should be sealed
	 * @returns {object} - An interaction object
	 */
	function getBlockHeader() {
	  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	  return pipe$2([makeGetBlockHeader, ix => {
	    ix.block.isSealed = isSealed;
	    return Ok(ix);
	  }]);
	}

	/**
	 * @description - A builder function that returns all a collection containing a list of transaction ids by its collection id
	 * NOTE:
	 * - The block range provided must be from the current spork. All events emitted during past sporks is current unavailable.
	 * @param {string} [id] - The id of the collection to get
	 * @returns {object} - An interaction object
	 */
	function getCollection() {
	  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	  return pipe$2([makeGetCollection, ix => {
	    ix.collection.id = id;
	    return ix;
	  }]);
	}

	/**
	 * @description - A builder function that returns the status of transaction
	 * NOTE: The transactionID provided must be from the current spork.
	 * @param {string} transactionId - The id of the transaction to get status
	 * @returns {object} - An interaction object
	 */
	function getTransactionStatus(transactionId) {
	  return pipe$2([makeGetTransactionStatus, ix => {
	    ix.transaction.id = transactionId;
	    return Ok(ix);
	  }]);
	}

	/**
	 * @description - A builder function that returns a transaction
	 * NOTE: The transactionID provided must be from the current spork.
	 * @param {string} transactionId - The id of the transaction to get
	 * @returns {object} - An interaction object
	 */
	function getTransaction(transactionId) {
	  return pipe$2([makeGetTransaction, ix => {
	    ix.transaction.id = transactionId;
	    return Ok(ix);
	  }]);
	}

	function getNetworkParameters() {
	  return pipe$2([makeGetNetworkParameters, ix => {
	    return Ok(ix);
	  }]);
	}

	function limit(computeLimit) {
	  return ix => {
	    ix.message.computeLimit = computeLimit;
	    return ix;
	  };
	}

	/**
	 * @description - A utility builder to be used with other builders to pass in arguments with a value and supported type
	 * @param {Array.<*>} ax - An array of arguments
	 * @returns {object} - An interaction object
	 */
	function args() {
	  let ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  return pipe$2(ax.map(makeArgument));
	}

	/**
	 * @description - A utility builder to be used with fcl.args[...] to create FCL supported arguments for interactions
	 * @param {any} value - The value of the argument
	 * @param {Function} xform - A function to transform the value
	 * @returns {object} - An argument object
	 */
	function arg(value, xform) {
	  return {
	    value,
	    xform
	  };
	}

	async function proposer(authz) {
	  return prepAccount(authz, {
	    role: PROPOSER
	  });
	}

	async function payer(authz) {
	  return prepAccount(authz, {
	    role: PAYER
	  });
	}

	function ping() {
	  return makePing;
	}

	function ref(refBlock) {
	  return pipe$2([ix => {
	    ix.message.refBlock = refBlock;
	    return Ok(ix);
	  }]);
	}

	function script() {
	  return pipe$2([makeScript, put$2("ix.cadence", template(...arguments))]);
	}

	const DEFAULT_SCRIPT_ACCOUNTS = [];
	const DEFUALT_REF = null;

	/**
	 * @description - A template builder to use a Cadence transaction for an interaction
	 * @param {...*} args - The arguments to pass
	 * @returns {object} - An interaction object
	 */
	function transaction() {
	  return pipe$2([makeTransaction, put$2("ix.cadence", template(...arguments)), ix => {
	    ix.message.refBlock = ix.message.refBlock || DEFUALT_REF;
	    ix.authorizations = ix.authorizations || DEFAULT_SCRIPT_ACCOUNTS;
	    return Ok(ix);
	  }]);
	}

	function voucherIntercept(fn) {
	  return put$2("ix.voucher-intercept", fn);
	}

	const resolveProposerSequenceNumber = _ref => {
	  let {
	    node
	  } = _ref;
	  return async ix => {
	    if (!isTransaction(ix)) return Ok(ix);
	    if (ix.accounts[ix.proposer].sequenceNum) return Ok(ix);
	    const sendFn = await config$2.first(["sdk.transport", "sdk.send"], send$2);
	    invariant$3(sendFn, `Required value for sdk.transport is not defined in config. See: ${"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21"}`);
	    const response$1 = await sendFn(await build([getAccount(ix.accounts[ix.proposer].addr)]), {
	      config: config$2,
	      response: response,
	      Buffer: buffer.Buffer,
	      ix: ixModule
	    }, {
	      node
	    });
	    const decoded = await decodeResponse(response$1);
	    ix.accounts[ix.proposer].sequenceNum = decoded.keys[ix.accounts[ix.proposer].keyId].sequenceNumber;
	    return Ok(ix);
	  };
	};

	async function getRefId(opts) {
	  const node = await config$2().get("accessNode.api");
	  const sendFn = await config$2.first(["sdk.transport", "sdk.send"], send$2);
	  invariant$3(sendFn, `Required value for sdk.transport is not defined in config. See: ${"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21"}`);
	  var ix;
	  ix = await pipe$2(interaction(), [getBlock()]);
	  ix = await sendFn(ix, {
	    config: config$2,
	    response,
	    Buffer: buffer.Buffer,
	    ix: ixModule
	  }, {
	    node
	  });
	  ix = await decodeResponse(ix);
	  return ix.id;
	}
	function resolveRefBlockId(opts) {
	  return async ix => {
	    if (!isTransaction(ix)) return Ok(ix);
	    if (ix.message.refBlock) return Ok(ix);
	    ix.message.refBlock = await getRefId();
	    return Ok(ix);
	  };
	}

	function mockAccountResponse(ix) {
	  let numberOfKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
	  // prettier-ignore
	  invariant$3(ix.account, "mockAccountResponse(ix) -- ix.account is missing", ix);
	  // prettier-ignore
	  invariant$3(ix.account.addr, "mockAccountResponse(ix) -- ix.account.addr is missing", ix);
	  const address = ix.account.addr;
	  return {
	    account: {
	      addr: address,
	      keys: Array.from({
	        length: numberOfKeys
	      }, (_, i) => ({
	        index: i,
	        sequenceNumber: 42
	      }))
	    }
	  };
	}
	function mockGetBlockResponse(ix) {
	  return {
	    tag: "GET_BLOCK",
	    block: {
	      id: "32"
	    }
	  };
	}
	const identity = v => v;
	function mockSend() {
	  let fallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identity;
	  return async function execSend(ix) {
	    ix = await ix;
	    switch (true) {
	      case isGetAccount(ix):
	        return mockAccountResponse(ix);
	      case isGetBlock(ix):
	        return mockGetBlockResponse();
	      default:
	        return fallback(ix);
	    }
	  };
	}

	const idof = acct => `${withPrefix$1(acct.addr)}-${acct.keyId}`;
	function sig(opts) {
	  return ["SIGNATURE", opts.addr, opts.keyId].join(".");
	}
	function authzFn() {
	  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  return function (account) {
	    const acct = {
	      ...account,
	      ...opts,
	      signingFunction: opts.signingFunction || account.signingFunction || fallbackSigningFunction
	    };
	    return acct;
	    function fallbackSigningFunction(signable) {
	      return {
	        addr: acct.addr,
	        keyId: acct.keyId,
	        signature: sig(acct)
	      };
	    }
	  };
	}
	function authzResolve() {
	  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  return function (account) {
	    const {
	      tempId,
	      ...rest
	    } = opts;
	    return {
	      ...account,
	      tempId: tempId || "WITH_RESOLVE",
	      resolve: authzFn(rest)
	    };
	  };
	}
	const ROLE = {
	  proposer: false,
	  authorizer: false,
	  payer: false
	};
	function authzResolveMany() {
	  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  return function (account) {
	    const tempId = opts.tempId || "AUTHZ_RESOLVE_MANY";
	    return {
	      ...account,
	      tempId,
	      resolve: () => [opts.proposer && authzFn(opts.proposer)({
	        role: {
	          ...ROLE,
	          proposer: true
	        }
	      }), ...opts.authorizations.map(authzFn).map(d => d({
	        role: {
	          ...ROLE,
	          authorizer: true
	        }
	      })), opts.payer && authzFn(opts.payer)({
	        role: {
	          ...ROLE,
	          payer: true
	        }
	      })].filter(Boolean)
	    };
	  };
	}

	const run = function () {
	  let fns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  return build([ref("123"), ...fns]).then(resolve);
	};

	var index = /*#__PURE__*/Object.freeze({
		__proto__: null,
		mockSend: mockSend,
		authzFn: authzFn,
		authzResolve: authzResolve,
		authzResolveMany: authzResolveMany,
		sig: sig,
		idof: idof,
		run: run
	});

	const VERSION = "1.2.0" ;

	// Deprecated
	const params = params => log$2.deprecate({
	  pkg: "FCL/SDK",
	  message: `The params builder has been removed from the Flow JS-SDK/FCL.`,
	  transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params",
	  level: LEVELS$2.error
	});
	const param = params => log$2.deprecate({
	  pkg: "FCL/SDK",
	  message: `The param builder has been removed from the Flow JS-SDK/FCL.`,
	  transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params",
	  level: LEVELS$2.error
	});

	exports.TestUtils = index;
	exports.VERSION = VERSION;
	exports.account = account;
	exports.arg = arg;
	exports.args = args;
	exports.atBlockHeight = atBlockHeight;
	exports.atBlockId = atBlockId;
	exports.authorization = authorization;
	exports.authorizations = authorizations;
	exports.block = block;
	exports.build = build;
	exports.cadence = template;
	exports.cdc = template;
	exports.config = config$2;
	exports.createSignableVoucher = createSignableVoucher;
	exports.decode = decode;
	exports.destroy = destroy;
	exports.encodeMessageFromSignable = encodeMessageFromSignable;
	exports.encodeTransactionEnvelope = encodeTransactionEnvelope;
	exports.encodeTransactionPayload = encodeTransactionPayload;
	exports.encodeTxIdFromVoucher = encodeTxIdFromVoucher;
	exports.get = get$2;
	exports.getAccount = getAccount;
	exports.getBlock = getBlock;
	exports.getBlockHeader = getBlockHeader;
	exports.getCollection = getCollection;
	exports.getEvents = getEvents;
	exports.getEventsAtBlockHeightRange = getEventsAtBlockHeightRange;
	exports.getEventsAtBlockIds = getEventsAtBlockIds;
	exports.getNetworkParameters = getNetworkParameters;
	exports.getTransaction = getTransaction;
	exports.getTransactionStatus = getTransactionStatus;
	exports.interaction = interaction;
	exports.invariant = invariant$2;
	exports.isBad = isBad;
	exports.isGetAccount = isGetAccount;
	exports.isGetBlock = isGetBlock;
	exports.isGetBlockHeader = isGetBlockHeader;
	exports.isGetCollection = isGetCollection;
	exports.isGetEvents = isGetEvents;
	exports.isGetNetworkParameters = isGetNetworkParameters;
	exports.isGetTransaction = isGetTransaction;
	exports.isGetTransactionStatus = isGetTransactionStatus;
	exports.isOk = isOk;
	exports.isPing = isPing;
	exports.isScript = isScript;
	exports.isTransaction = isTransaction;
	exports.isUnknown = isUnknown;
	exports.limit = limit;
	exports.param = param;
	exports.params = params;
	exports.payer = payer;
	exports.ping = ping;
	exports.pipe = pipe$2;
	exports.proposer = proposer;
	exports.put = put$2;
	exports.ref = ref;
	exports.resolve = resolve;
	exports.resolveAccounts = resolveAccounts;
	exports.resolveArguments = resolveArguments;
	exports.resolveCadence = resolveCadence;
	exports.resolveFinalNormalization = resolveFinalNormalization;
	exports.resolveProposerSequenceNumber = resolveProposerSequenceNumber;
	exports.resolveRefBlockId = resolveRefBlockId;
	exports.resolveSignatures = resolveSignatures;
	exports.resolveValidators = resolveValidators;
	exports.resolveVoucherIntercept = resolveVoucherIntercept;
	exports.response = response;
	exports.script = script;
	exports.send = send$1;
	exports.transaction = transaction;
	exports.update = update$2;
	exports.validator = validator;
	exports.voucherIntercept = voucherIntercept;
	exports.voucherToTxId = voucherToTxId;
	exports.why = why;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=sdk.umd.js.map
