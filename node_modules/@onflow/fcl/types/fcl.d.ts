export { VERSION } from "./VERSION";
export { query } from "./exec/query";
export { mutate } from "./exec/mutate";
export { verifyUserSignatures } from "./exec/verify";
export { serialize } from "./serialize";
export { transaction as tx } from "./transaction";
export { events } from "./events";
export { pluginRegistry } from "./current-user/exec-service/plugins";
export function authenticate(opts?: {}): Promise<import("@onflow/typedefs").CurrentUser>;
export function unauthenticate(): void;
export function reauthenticate(opts?: {}): Promise<import("@onflow/typedefs").CurrentUser>;
export function signUp(opts?: {}): Promise<import("@onflow/typedefs").CurrentUser>;
export function logIn(opts?: {}): Promise<import("@onflow/typedefs").CurrentUser>;
export const authz: (account: any) => Promise<any>;
/**
 * @type {Types}
 */
export const t: Types;
export { getChainId } from "./utils";
export { config } from "@onflow/config";
export type Types = {
    /**
     * - Represents the Identity type.
     */
    Identity: any;
    /**
     * - Represents the UInt type.
     */
    UInt: any;
    /**
     * - Represents the Int type.
     */
    Int: any;
    /**
     * - Represents the UInt8 type.
     */
    UInt8: any;
    /**
     * - Represents the Int8 type.
     */
    Int8: any;
    /**
     * - Represents the UInt16 type.
     */
    UInt16: any;
    /**
     * - Represents the Int16 type.
     */
    Int16: any;
    /**
     * - Represents the UInt32 type.
     */
    UInt32: any;
    /**
     * - Represents the Int32 type.
     */
    Int32: any;
    /**
     * - Represents the UInt64 type.
     */
    UInt64: any;
    /**
     * - Represents the Int64 type.
     */
    Int64: any;
    /**
     * - Represents the UInt128 type.
     */
    UInt128: any;
    /**
     * - Represents the Int128 type.
     */
    Int128: any;
    /**
     * - Represents the UInt256 type.
     */
    UInt256: any;
    /**
     * - Represents the Int256 type.
     */
    Int256: any;
    /**
     * - Represents the Word8 type.
     */
    Word8: any;
    /**
     * - Represents the Word16 type.
     */
    Word16: any;
    /**
     * - Represents the Word32 type.
     */
    Word32: any;
    /**
     * - Represents the Word64 type.
     */
    Word64: any;
    /**
     * - Represents the UFix64 type.
     */
    UFix64: any;
    /**
     * - Represents the Fix64 type.
     */
    Fix64: any;
    /**
     * - Represents the String type.
     */
    String: any;
    /**
     * - Represents the Character type.
     */
    Character: any;
    /**
     * - Represents the Bool type.
     */
    Bool: any;
    /**
     * - Represents the Address type.
     */
    Address: any;
    /**
     * - Represents the Void type.
     */
    Void: any;
    /**
     * - Represents the Optional type.
     */
    Optional: any;
    /**
     * - Represents the Reference type.
     */
    Reference: any;
    /**
     * - Represents the Array type.
     */
    Array: any;
    /**
     * - Represents the Dictionary type.
     */
    Dictionary: any;
    /**
     * - Represents the Event type.
     */
    Event: any;
    /**
     * - Represents the Resource type.
     */
    Resource: any;
    /**
     * - Represents the Struct type.
     */
    Struct: any;
    /**
     * - Represents the Enum type.
     */
    Enum: any;
    /**
     * - Represents the Path type.
     */
    Path: any;
};
export type ArgsFn = (arg: ArgFn, t: Types) => any[];
export type ArgFn = (value: any, type: any) => any;
import { currentUser } from "./current-user";
import { discovery } from "./discovery";
import * as WalletUtils from "./wallet-utils";
import * as AppUtils from "./app-utils";
import * as InteractionTemplateUtils from "./interaction-template-utils";
export { currentUser, discovery, WalletUtils, AppUtils, InteractionTemplateUtils };
export { TestUtils, send, decode, account, block, isOk, isBad, why, pipe, build, createSignableVoucher, voucherIntercept, voucherToTxId, transaction, script, ping, atBlockHeight, atBlockId, getAccount, getEvents, getEventsAtBlockHeightRange, getEventsAtBlockIds, getBlock, getBlockHeader, getCollection, getTransactionStatus, getTransaction, getNetworkParameters, authorizations, authorization, args, arg, proposer, payer, limit, ref, params, param, validator, invariant } from "@onflow/sdk";
export { withPrefix, sansPrefix, display } from "@onflow/util-address";
