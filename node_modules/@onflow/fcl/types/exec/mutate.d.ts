/**
 * @description
 * Allows you to submit transactions to the blockchain to potentially mutate the state.
 *
 *  @param {object} opts - Mutation Options and configuration
 *  @param {string} opts.cadence - Cadence Transaction used to mutate Flow
 *  @param {import("../fcl").ArgsFn} [opts.args] - Arguments passed to cadence transaction
 *  @param {object} [opts.template] - Interaction Template for a transaction
 *  @param {number} [opts.limit] - Compute Limit for transaction
 *  @returns {Promise<string>} Transaction Id
 *
 * @example
 *    fcl.mutate({
 *      cadence: `
 *        transaction(a: Int, b: Int, c: Address) {
 *          prepare(acct: AuthAccount) {
 *            log(acct)
 *            log(a)
 *            log(b)
 *            log(c)
 *          }
 *        }
 *      `,
 *      args: (arg, t) => [
 *        arg(6, t.Int),
 *        arg(7, t.Int),
 *        arg("0xba1132bc08f82fe2", t.Address),
 *      ],
 *    })
 *
 *
 *  Options:
 *    type Options = {
 *      template: InteractionTemplate | String // InteractionTemplate or url to one
 *      cadence: String!,
 *      args: (arg, t) => Array<Arg>,
 *      limit: Number,
 *      authz: AuthzFn, // will overload the trinity of signatory roles
 *      proposer: AuthzFn, // will overload the proposer signatory role
 *      payer: AuthzFn, // will overload the payer signatory role
 *      authorizations: [AuthzFn], // an array of authorization functions used as authorizations signatory roles
 *    }
 */
export function mutate(opts?: {
    cadence: string;
    args?: import("../fcl").ArgsFn;
    template?: object;
    limit?: number;
}): Promise<string>;
