/**
 * @description Clears the config
 * @returns {void}
 */
export function clearConfig(): void;
/**
 * @description Sets the config
 * @param {object} [values] - The values to set
 */
export function config(values?: object): {
    put: typeof put;
    get: typeof get;
    all: typeof all;
    first: typeof first;
    update: typeof update;
    delete: typeof _delete;
    where: typeof where;
    subscribe: typeof subscribe;
    overload: typeof overload;
    load: typeof load;
};
export namespace config {
    export { put };
    export { get };
    export { all };
    export { first };
    export { update };
    export { _delete as delete };
    export { where };
    export { subscribe };
    export { overload };
    export { load };
}
/**
 * @description Adds a key-value pair to the config
 * @param {string} key - The key to add
 * @param {*} value - The value to add
 * @returns {Promise<object>} - The current config
 */
declare function put(key: string, value: any): Promise<object>;
/**
 * @description Gets a key-value pair with a fallback from the config
 * @param {string} key - The key to add
 * @param {*} [fallback] - The fallback value to return if key is not found
 * @returns {Promise<*>} - The value found at key or fallback
 */
declare function get(key: string, fallback?: any): Promise<any>;
/**
 * @description Returns the current config
 * @returns {Promise<object>} - The current config
 */
declare function all(): Promise<object>;
/**
 * @description Returns the first non null config value or the fallback
 * @param {string[]} wants - The keys to search for
 * @param {*} fallback - The fallback value to return if key is not found
 * @returns {Promise<*>} - The value found at key or fallback
 */
declare function first(wants: string[], fallback: any): Promise<any>;
/**
 * @description Updates a key-value pair in the config
 * @param {string} key - The key to update
 * @param {Function} fn - The function to update the value with
 * @returns {Promise<object>} - The current config
 */
declare function update(key: string, fn?: Function): Promise<object>;
/**
 * @description Deletes a key-value pair from the config
 * @param {string} key - The key to delete
 * @returns {Promise<object>} - The current config
 */
declare function _delete(key: string): Promise<object>;
/**
 * @description Returns a subset of the config based on a pattern
 * @param {string} pattern - The pattern to match keys against
 * @returns {Promise<object>} - The subset of the config
 */
declare function where(pattern: string): Promise<object>;
/**
 * @description Subscribes to config updates
 * @param {Function} callback - The callback to call when config is updated
 * @returns {Function} - The unsubscribe function
 */
declare function subscribe(callback: Function): Function;
declare function overload(opts?: {}, callback?: (v: any) => any): Promise<any>;
/**
 * @description Takes in flow.json or array of flow.json files and creates contract placeholders
 * @param {object|object[]} data - The flow.json or array of flow.json files
 * @returns {void}
 */
declare function load(data: object | object[]): void;
export {};
